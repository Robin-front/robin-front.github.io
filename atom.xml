<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三寸稚笔</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://robin-front.github.io/"/>
  <updated>2017-06-14T15:28:54.000Z</updated>
  <id>http://robin-front.github.io/</id>
  
  <author>
    <name>robin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flow和TypeScript之间的区别和优劣</title>
    <link href="http://robin-front.github.io/2017/06/14/Flow%E5%92%8CTypeScript%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BC%98%E5%8A%A3/"/>
    <id>http://robin-front.github.io/2017/06/14/Flow和TypeScript之间的区别和优劣/</id>
    <published>2017-06-14T15:28:54.000Z</published>
    <updated>2017-06-14T15:28:54.000Z</updated>
    
    <content type="html">&lt;p&gt;采用Flow＆TypeScript, 两者上手流程之间的比较。&lt;/p&gt;
&lt;p&gt;让我们想象一下我们想要采用一种类型检查器的场景…&lt;/p&gt;
&lt;p&gt;本文译自： &lt;a href=&quot;http://thejameskyle.com/adopting-flow-and-typescript.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;adopting flow and typescript&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近我们已经注意到了我们的应用程序中的很多NaN的出现。我们搜索源代码并找到以下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// math.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们对自己叹了口气，也许决定添加一个类型检查器。我们退后一步，查看我们的选项： &lt;a href=&quot;https://flow.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flow&lt;/a&gt; 或 &lt;a href=&quot;http://www.typescriptlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TypeScript&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这两个工具都有相当简单的方法给逐个文件应用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flow: &lt;code&gt;// @flow&lt;/code&gt; 向文件顶部添加注释&lt;/li&gt;
&lt;li&gt;TypeScript：将扩展名更改为&lt;code&gt;.js&lt;/code&gt;扩展&lt;code&gt;.ts&lt;/code&gt; 名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是让我们比较一下这里面发生了什么。&lt;/p&gt;
&lt;h3 id=&quot;采用TypeScript&quot;&gt;&lt;a href=&quot;#采用TypeScript&quot; class=&quot;headerlink&quot; title=&quot;采用TypeScript&quot;&gt;&lt;/a&gt;采用TypeScript&lt;/h3&gt;&lt;p&gt;要采用TypeScript，我们首先重命名&lt;code&gt;math.js&lt;/code&gt;为 &lt;code&gt;math.ts&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// math.ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们将运行typescript：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(no errors)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;没有错误，是因为TypeScript要求我们给函数键入注释，然后才会根据注释检查类型。如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n: number&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;number&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果没有这些类型，TypeScript将根据您的配置执行下面两件事情之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;隐含地将每个未知类型转换为&lt;code&gt;any&lt;/code&gt;。这种任何类型将让您退出所有类型检查。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;或者如果您使用了&lt;code&gt;--noImplicitAny&lt;/code&gt;选项，它会为任何未知类型抛出错误，指明需要添加类型注释。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这意味着TypeScript 覆盖的代码量与您所写的类型相关。写入类型时，类型coverage将线性上升。&lt;/p&gt;
&lt;h3 id=&quot;类型覆盖（type-coverage）&quot;&gt;&lt;a href=&quot;#类型覆盖（type-coverage）&quot; class=&quot;headerlink&quot; title=&quot;类型覆盖（type coverage）&quot;&gt;&lt;/a&gt;类型覆盖（type coverage）&lt;/h3&gt;&lt;p&gt;在我们进一步讲解之前，我应该解释一下什么是类型覆盖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://thejameskyle.com/img/type-coverage.png&quot; alt=&quot;未有类型覆盖的代码用红色显示&quot;&gt;&lt;/p&gt;
&lt;p&gt;未有类型覆盖的代码用红色显示&lt;/p&gt;
&lt;p&gt;如果你看到你的代码中的值和表达式，并问类型检查器“你知道这是什么类型吗”。&lt;/p&gt;
&lt;p&gt;如果类型检查器知道它类型，则覆盖该值或表达式。如果类型检查器不知道类型，那么它没有被覆盖。&lt;/p&gt;
&lt;p&gt;您希望您的程序尽可能多地提供类型覆盖，因为这样可以在更多地方抛出错误时提前告诉您。&lt;/p&gt;
&lt;p&gt;没有类型覆盖，类型检查器什么都不是。&lt;/p&gt;
&lt;h3 id=&quot;采用Flow&quot;&gt;&lt;a href=&quot;#采用Flow&quot; class=&quot;headerlink&quot; title=&quot;采用Flow&quot;&gt;&lt;/a&gt;采用Flow&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @flow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们将运行Flow并查看结果：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ^   ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt; (x2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt; (x2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string. The operand &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; an arithmetic operation must be a number.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;紧接着就抛出了类型错误，告诉我们代码出了问题。&lt;/p&gt;
&lt;p&gt;Flow 只需要我们键入文件和外部模块的导出。可以推测出其他一切。&lt;/p&gt;
&lt;p&gt;这使得类型覆盖率快得多。只需几种类型，您可以快速获取具有非常高类型覆盖率的文件。&lt;/p&gt;
&lt;p&gt;根据我的经验，我可以在短短几分钟内将文件覆盖约70-90％。&lt;/p&gt;
&lt;p&gt;这是一个非常科学的差异图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://thejameskyle.com/img/adopting-flow-and-typescript-graph.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这不是我一家之言，你可以自己尝试一下，看看几种类型的区别。&lt;/p&gt;
&lt;p&gt;要查看Flow中文件的类型覆盖，可以运行：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flow coverage path/to/file.js --color&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;您还可以使用 &lt;a href=&quot;https://github.com/rpl/flow-coverage-report&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;流量报告&lt;/a&gt; 来帮助您。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：我没有注意到TypeScript 有任何的类型报告工具（如果您知道一个，请给我发送一个链接）。但是，您可以测试代码是否覆盖，以确定当您出现错误时是否会报告错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;这个的工作原理是什么&quot;&gt;&lt;a href=&quot;#这个的工作原理是什么&quot; class=&quot;headerlink&quot; title=&quot;这个的工作原理是什么&quot;&gt;&lt;/a&gt;这个的工作原理是什么&lt;/h3&gt;&lt;p&gt;这两种工具具有不同行为的原因归结于其架构之间的区别。&lt;/p&gt;
&lt;h4 id=&quot;TypeScript体系结构：AST导向&quot;&gt;&lt;a href=&quot;#TypeScript体系结构：AST导向&quot; class=&quot;headerlink&quot; title=&quot;TypeScript体系结构：AST导向&quot;&gt;&lt;/a&gt;TypeScript体系结构：AST导向&lt;/h4&gt;&lt;p&gt;TypeScript将遍历您的程序并构建已知类型的表。当它发现值和表达式时，它会立即为其分配类型。当TypeScript发现一个未知的类型时，它必须立即作出决定，这意味着将其分配给&lt;code&gt;any&lt;/code&gt;或抛出错误。&lt;/p&gt;
&lt;h4 id=&quot;Flow-架构：图形导向&quot;&gt;&lt;a href=&quot;#Flow-架构：图形导向&quot; class=&quot;headerlink&quot; title=&quot;Flow 架构：图形导向&quot;&gt;&lt;/a&gt;Flow 架构：图形导向&lt;/h4&gt;&lt;p&gt;Flow 将建立一个你所有的值和表达式及其彼此之间的关系的图表。然后，它将开始为每个值和表达式分配类型。如果它找到一个未知的类型，它将使它成为一个“开放”类型，稍后再回来判断。&lt;/p&gt;
&lt;p&gt;一旦Flow具有您的程序的完整蓝图，它将开始连接所有点，从一个值连接到另一个值地跟踪类型。打开类型接受流入它们的所有值的类型 - 生成的类型称为 “推断类型”。&lt;/p&gt;
&lt;p&gt;你可以看这个是怎么回事。来看看我们在之前的类型错误：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ^   ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt; (x2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt; (x2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string. The operand &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; an arithmetic operation must be a number.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意错误是指向&lt;code&gt;n * n&lt;/code&gt;而不是 &lt;code&gt;square(&amp;quot;oops&amp;quot;)&lt;/code&gt;。因为我们没有写入一个类型为n的 “oops”字符串流入它，并且Flow开始检查n，就好像它是一个字符串。&lt;/p&gt;
&lt;p&gt;添加类型注释我们可以看到错误点移动了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n: number&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ^ &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;: string.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This type is incompatible &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; the expected param type &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; number.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这提出了一个重要的一点：Flow可以在任何地方自动推断类型并不意味着你不应该添加类型注释你的代码。&lt;/p&gt;
&lt;h3 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h3&gt;&lt;p&gt;TypeScript和Flow都有非常好的上手过程。一个个文件地尝试是一个很好的经历。&lt;/p&gt;
&lt;p&gt;但是，如果使用Flow，你就会有更高以及更快的覆盖类型，你就可以安心睡觉。&lt;/p&gt;
&lt;p&gt;使用Flow，您可以添加类型以使错误更友好，而不仅只是发现它们。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;采用Flow＆TypeScript, 两者上手流程之间的比较。&lt;/p&gt;
&lt;p&gt;让我们想象一下我们想要采用一种类型检查器的场景…&lt;/p&gt;
&lt;p&gt;本文译自： &lt;a href=&quot;http://thejameskyle.com/adopting-flow-and-typescript.html&quot;&gt;adopting flow and typescript&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Flow" scheme="http://robin-front.github.io/categories/Flow/"/>
    
      <category term="TypeScript" scheme="http://robin-front.github.io/categories/Flow/TypeScript/"/>
    
    
      <category term="Flow" scheme="http://robin-front.github.io/tags/Flow/"/>
    
      <category term="TypeScript" scheme="http://robin-front.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>使用RXJS组合、过滤和映射数据流的值</title>
    <link href="http://robin-front.github.io/2017/06/05/%E4%BD%BF%E7%94%A8RXJS%E7%BB%84%E5%90%88%E3%80%81%E8%BF%87%E6%BB%A4%E5%92%8C%E6%98%A0%E5%B0%84%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E5%80%BC/"/>
    <id>http://robin-front.github.io/2017/06/05/使用RXJS组合、过滤和映射数据流的值/</id>
    <published>2017-06-05T08:24:16.000Z</published>
    <updated>2017-06-05T08:24:16.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;查询可观测序列&quot;&gt;&lt;a href=&quot;#查询可观测序列&quot; class=&quot;headerlink&quot; title=&quot;查询可观测序列&quot;&gt;&lt;/a&gt;查询可观测序列&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/getting_started_with_rxjs/creating_and_querying_observable_sequences/bridging_to_events.md&quot;&gt;事件桥接&lt;/a&gt; 一文中，我们将现有的DOM和Node.js事件转换成可观察的序列以订阅它们。在本主题中，我们将把可观察序列的父级class视为IObservable对象，其中Rx组件提供通用LINQ操作符来操作这些对象。大多数操作符获取可观察的序列并对其执行一些逻辑并输出另一个可观测序列。另外，从代码示例可以看出，甚至可以在源序列上使用多个运算符，最终将结果序列调整到您的确切需求。
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本文翻译在： &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/getting_started_with_rxjs/creating_and_querying_observable_sequences/querying_observable_sequences.html&quot;&gt;RXJS中文文档&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用不同的运算符&quot;&gt;&lt;a href=&quot;#使用不同的运算符&quot; class=&quot;headerlink&quot; title=&quot;使用不同的运算符&quot;&gt;&lt;/a&gt;使用不同的运算符&lt;/h2&gt;&lt;p&gt;我们已经在以前的主题中使用&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservablecreatesubscribe&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;create&lt;/code&gt;&lt;/a&gt;和&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservablerangestart-count-scheduler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt;运算符来创建和返回简单的序列。我们还使用&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservablefromeventelement-eventname&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;fromEvent&lt;/code&gt;&lt;/a&gt;和&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservablefromeventpatternaddhandler-removehandler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;fromEventPattern&lt;/code&gt;&lt;/a&gt;运算符将现有事件转换成可观察的序列。在本主题中，我们将使用其他&lt;code&gt;Observable&lt;/code&gt;类型的运算符，以便可以过滤，分组和转换数据。这些运算符将可观察到的序列作为输入，并生成输出另一个可观察序列。&lt;/p&gt;
&lt;h2 id=&quot;组合不同序列&quot;&gt;&lt;a href=&quot;#组合不同序列&quot; class=&quot;headerlink&quot; title=&quot;组合不同序列&quot;&gt;&lt;/a&gt;组合不同序列&lt;/h2&gt;&lt;p&gt;在本节中，我们会研究将各种可观察序列组合成单个可观察序列的操作符。请注意，当我们组合序列时，数据不会被转换。在以下示例中，我们使用Concat运算符将两个序列组合成一个序列并订阅它。为了说明的目的，我们将使用非常简单的&lt;code&gt;range(x, y)&lt;/code&gt;运算符创建一个从x开始的整数序列，然后产生y个序列数字。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source1 = Rx.Observable.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source2 = Rx.Observable.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source1.concat(source2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .subscribe(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log.bind(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意，结果序列是1,2,3,1,2,3。这是因为当您使用&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypeconcatargs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;concat&lt;/code&gt;&lt;/a&gt;运算符时，第二个序列（source2）将在第一个序列（source1）完成推送其所有值之后才会激活。只有在source1完成之后，source2才会将值推送到最后的序列。然后，订阅者将从得到的序列中获取所有值。&lt;/p&gt;
&lt;p&gt;与&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypemergemaxconcurrent--other&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;merge&lt;/code&gt;&lt;/a&gt; 操作符进行比较。如果运行以下示例代码，您将获得1,1,2,2,3,3。这是因为两个序列同时处于活动状态，并且值在数据源中发生时被推出。结果序列仅在最后一个数据源完成推送值时完成。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source1 = Rx.Observable.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source2 = Rx.Observable.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source1.merge(source2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .subscribe(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log.bind(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypecatchsecond--handler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;catch&lt;/code&gt;&lt;/a&gt; 操作符可以进行另一个比较。在这种情况下，如果source1完成没有任何错误，那么source2将不会启动。因此，如果运行以下示例代码，则获得1,2,3因为source2（产生4,5,6））被忽略。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source1 = Rx.Observable.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source2 = Rx.Observable.range(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source1.catch(source2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .subscribe(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log.bind(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，我们来看看&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypeonerrorresumenextsecond&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;onErrorResumeNext&lt;/code&gt;&lt;/a&gt;。即使由于错误导致source1无法完成，该操作符也将移动到source2。在以下示例中，即使source1表示通过使用&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservablethrowexception-scheduler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;throw&lt;/code&gt;&lt;/a&gt;运算符终止异常的序列，用户将接收source2发布的值（1,2,3）。因此，如果您预期到任何一个源序列产生任何错误，那么使用它&lt;code&gt;onErrorResumeNext&lt;/code&gt;来保证用户仍然会收到一些值是更安全的。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source1 = Rx.Observable.throw(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;An error has occurred.&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source2 = Rx.Observable.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;source1.onErrorResumeNext(source2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .subscribe(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log.bind(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;映射&quot;&gt;&lt;a href=&quot;#映射&quot; class=&quot;headerlink&quot; title=&quot;映射&quot;&gt;&lt;/a&gt;映射&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypeselectselector-thisarg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt;或 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypemapselector-thisarg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; 操作符将可观察到的一个序列的每个元素转换成另一种形式。&lt;/p&gt;
&lt;p&gt;在下面的示例中，我们将一系列字符串映射到一系列表示长度的整数中。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array = [&lt;span class=&quot;string&quot;&gt;&#39;Reactive&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Extensions&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;RxJS&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; seqString = Rx.Observable.from(array);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; seqNum = seqString.map(x =&amp;gt; x.length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;seqNum&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .subscribe(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log.bind(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在以下示例中，我们在“&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/getting_started_with_rxjs/creating_and_querying_observable_sequences/bridging_to_events.md&quot;&gt;桥接现有事件&lt;/a&gt;”主题中看到的事件转换示例的扩展，我们使用&lt;code&gt;select&lt;/code&gt;或&lt;code&gt;map&lt;/code&gt;运算符将事件参数投影到x和y点。这样，我们将鼠标移动事件序列转换为可以进一步解析和操作的数据类型，如下一个“过滤”部分所示。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; move = Rx.Observable.fromEvent(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; points = move.map(e =&amp;gt; (&amp;#123;x: e.clientX, y: e.clientY &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;points.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	pos =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Mouse at point &#39;&lt;/span&gt; + pos.x + &lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt; + pos.y));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，我们来看看&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypeselectmanyselector-resultselector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;selectMany&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypeflatmapselector-resultselector&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;flatMap&lt;/code&gt;&lt;/a&gt;运算符。&lt;code&gt;selectMany&lt;/code&gt;或&lt;code&gt;flatMap&lt;/code&gt;操作符具有许多重载，其中一个就是需要选择器函数作为参数。这个选择器函数是由数据源推出的每个值去调用的。对于每一个值，选择器将其映射成一个迷你的可观察序列。最后，&lt;code&gt;selectMany&lt;/code&gt;或者&lt;code&gt;flatMap&lt;/code&gt;操作符将所有这些迷你序列扁平化成单个结果序列，然后将其推送到用户。&lt;/p&gt;
&lt;p&gt;在数据源和由选择器函数产生的所有迷你可观察序列都已经完成之后，源序列返回&lt;code&gt;selectMany&lt;/code&gt;或&lt;code&gt;flatMap&lt;/code&gt;发布的&lt;code&gt;onCompleted&lt;/code&gt;。当发生源数据流中的错误时触发&lt;code&gt;onError&lt;/code&gt;，当一个异常被选择函数抛出，或者当在任何迷你观察序列的发生了错误。&lt;/p&gt;
&lt;p&gt;在下面的例子中，我们首先创建一个数据源序列，每5秒产生一个整数，并决定使用生成的前两个值（使用&lt;code&gt;take&lt;/code&gt;运算符）。然后，我们使用&lt;code&gt;selectMany&lt;/code&gt;或者&lt;code&gt;flatMap&lt;/code&gt;对另一个序列{100,101,102}这些整数进行映射。通过这样做，产生两个迷你观察序列{100,101,102}和{100,101,102}。它们最终平坦化成{100,101,102,100,101,102}的单个整数流，并被推送到观察者。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source1 = Rx.Observable.interval(&lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;).take(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; proj = Rx.Observable.range(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; resultSeq = source1.flatMap(proj);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = resultSeq.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onNext: %s&#39;&lt;/span&gt;, x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onError: %s&#39;&lt;/span&gt;, e.message),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 101&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 102&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 101&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 102&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onCompleted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;过滤&quot;&gt;&lt;a href=&quot;#过滤&quot; class=&quot;headerlink&quot; title=&quot;过滤&quot;&gt;&lt;/a&gt;过滤&lt;/h2&gt;&lt;p&gt;在下面的例子中，我们使用&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservablegenerateinitialstate-condition-iterate-resultselector-scheduler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;generate&lt;/code&gt;&lt;/a&gt; 运算符创建一个简单的可观察数字序列。该&lt;code&gt;generate&lt;/code&gt;操作符有几个版本，包括有相对和绝对时间调度。在我们的示例中，它需要初始状态（在我们的示例中为0），一个条件函数终止（少于10次），迭代器（+1），结果选择器（当前值的平方函数））和打印只使用小于5的那些使用&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypefilterpredicate-thisarg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/a&gt;或&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md#rxobservableprototypewherepredicate-thisarg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;where&lt;/code&gt;&lt;/a&gt;运算符。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; seq = Rx.Observable.generate(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i =&amp;gt; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i =&amp;gt; i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	i =&amp;gt; i * i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = seq.filter(n =&amp;gt; n &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onNext: %s&#39;&lt;/span&gt;, x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onError: %s&#39;&lt;/span&gt;, e.message),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onCompleted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以下示例是本主题前面已经看到的映射示例的扩展。在该示例中，我们使用&lt;code&gt;select&lt;/code&gt;或&lt;code&gt;map&lt;/code&gt;运算符将事件参数投影到具有x和y的点。在下面的例子中，我们使用&lt;code&gt;filter&lt;/code&gt;或&lt;code&gt;where&lt;/code&gt;和&lt;code&gt;select&lt;/code&gt;或&lt;code&gt;map&lt;/code&gt;操作符只挑选那些鼠标移动，我们感兴趣的是，在这种情况下，我们鼠标移动过滤，以找出在第一平分线（其中x和y坐标是相等的）。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; move = Rx.Observable.fromEvent(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; points = move.map(e =&amp;gt; (&amp;#123; x: e.clientX, y: e.clientY &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; overfirstbisector = points.filter(pos =&amp;gt; pos.x === pos.y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; movesub = overfirstbisector.subscribe(pos =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;mouse at &#39;&lt;/span&gt; + pos.x + &lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt; pos.y));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;基于时间的操作&quot;&gt;&lt;a href=&quot;#基于时间的操作&quot; class=&quot;headerlink&quot; title=&quot;基于时间的操作&quot;&gt;&lt;/a&gt;基于时间的操作&lt;/h2&gt;&lt;p&gt;您可以使用缓冲区运算符执行基于时间的操作。&lt;/p&gt;
&lt;p&gt;缓冲可观察序列意味着可观测序列的值基于指定的时间段或计数阈值被放入缓冲区。这在您预期有大量数据被序列推出的情况下特别有用，并且订阅者没有资源来处理这些值。通过基于时间或计数缓冲结果，并且只有在超过条件时才返回值序列（或者源序列完成时），用户可以按照自己的速度处理&lt;code&gt;OnNext&lt;/code&gt;调用。&lt;/p&gt;
&lt;p&gt;在下面的例子中，我们首先创建一个以每秒为时间单位的简单的整数序列。然后我们使用&lt;code&gt;bufferWithCount&lt;/code&gt;运算符，并指定每个缓冲区将保存序列中的5个项目。在&lt;code&gt;onNext&lt;/code&gt;当缓冲区已满被调用。然后我们使用缓冲区的总和&lt;code&gt;Array.reduce&lt;/code&gt;。缓冲区自动刷新，另一个循环开始。打印输出将为10,35,60 …，其中10 = 0 + 1 + 2 + 3 + 4,35 = 5 + 6 + 7 + 8 + 9等。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; seq = Rx.Observable.interval(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bufSeq = seq.bufferWithCount(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bufSeq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.map(arr =&amp;gt; arr.reduce((acc, x) =&amp;gt; acc + x, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribe(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log.bind(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 35&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 60&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们还可以创建一个指定时间跨度（以毫秒为单位）的缓冲区。在以下示例中，缓冲区将保存累积3秒钟的项目。打印输出将为3,12,21 …其中3 = 0 + 1 + 2,12 = 3 + 4 + 5，依此类推。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; seq = Rx.Observable.interval(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bufSeq = seq.bufferWithTime(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bufSeq&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.map(arr =&amp;gt; arr.reduce((acc, x) =&amp;gt; acc + x, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	.subscribe(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log.bind(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请注意，如果您使用任何一个&lt;code&gt;buffer*&lt;/code&gt;或&lt;code&gt;window*&lt;/code&gt;运算符，则必须确保序列不为空，然后再过滤。&lt;/p&gt;
&lt;h2 id=&quot;按类别操作&quot;&gt;&lt;a href=&quot;#按类别操作&quot; class=&quot;headerlink&quot; title=&quot;按类别操作&quot;&gt;&lt;/a&gt;按类别操作&lt;/h2&gt;&lt;p&gt;按&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/getting_started_with_rxjs/creating_and_querying_observable_sequences/operators_by_category.md&quot;&gt;类别划分的操作符&lt;/a&gt;主题列出了按类别实施的&lt;code&gt;Observable&lt;/code&gt;的所有主要操作符; 具体来说：创建，转换，合并，功能，数学，时间，异常，杂项，选择和原值。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;查询可观测序列&quot;&gt;&lt;a href=&quot;#查询可观测序列&quot; class=&quot;headerlink&quot; title=&quot;查询可观测序列&quot;&gt;&lt;/a&gt;查询可观测序列&lt;/h1&gt;&lt;p&gt;在&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/getting_started_with_rxjs/creating_and_querying_observable_sequences/bridging_to_events.md&quot;&gt;事件桥接&lt;/a&gt; 一文中，我们将现有的DOM和Node.js事件转换成可观察的序列以订阅它们。在本主题中，我们将把可观察序列的父级class视为IObservable对象，其中Rx组件提供通用LINQ操作符来操作这些对象。大多数操作符获取可观察的序列并对其执行一些逻辑并输出另一个可观测序列。另外，从代码示例可以看出，甚至可以在源序列上使用多个运算符，最终将结果序列调整到您的确切需求。
    
    </summary>
    
      <category term="RXJS" scheme="http://robin-front.github.io/categories/RXJS/"/>
    
    
      <category term="RXJS" scheme="http://robin-front.github.io/tags/RXJS/"/>
    
  </entry>
  
  <entry>
    <title>如何调试Node.js|使用谷歌chrome浏览器调试Node.js</title>
    <link href="http://robin-front.github.io/2017/06/02/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95Node-js%E4%BD%BF%E7%94%A8%E8%B0%B7%E6%AD%8Cchrome%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E8%AF%95Node-js/"/>
    <id>http://robin-front.github.io/2017/06/02/如何调试Node-js使用谷歌chrome浏览器调试Node-js/</id>
    <published>2017-06-02T09:46:03.000Z</published>
    <updated>2017-06-02T09:46:03.000Z</updated>
    
    <content type="html">&lt;p&gt;如何调试 Node.js, 还在使用 console.log 来调试 Node.js 吗，可以像调试前端页面一样调试 Node.js!
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译文：&lt;a href=&quot;https://medium.com/the-node-js-collection/debugging-node-js-with-google-chrome-4965b5f910f4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Debugging Node.js with Google Chrome&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;调试是从软件应用程序中识别和删除错误的任务，而不仅仅是打印代码中的值。本文介绍如何使用最新的Google Chrome DevTools高效地调试Node.js程序。&lt;/p&gt;
&lt;h2 id=&quot;为什么console-log不是最好的选择？&quot;&gt;&lt;a href=&quot;#为什么console-log不是最好的选择？&quot; class=&quot;headerlink&quot; title=&quot;为什么console.log不是最好的选择？&quot;&gt;&lt;/a&gt;为什么console.log不是最好的选择？&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;console.log&lt;/code&gt;来调试你的代码，通常你会无限重复地做 “停止你的应用程序，添加一个console.log，并再次启动你的应用程序” 这样的操作。除了减缓您的应用程序的开发外，它还使您的书写变得脏乱并创建不必要的代码。最后，尝试注销变量以及其他可能的日志记录操作的噪点时，可能会在尝试找到正在调试的值时使调试变得困难。&lt;/p&gt;
&lt;h2 id=&quot;调试工具&quot;&gt;&lt;a href=&quot;#调试工具&quot; class=&quot;headerlink&quot; title=&quot;调试工具&quot;&gt;&lt;/a&gt;调试工具&lt;/h2&gt;&lt;p&gt;调试工具为用户提供的是几个重要的功能&lt;code&gt;console.log&lt;/code&gt;无法提供。特别是，它们允许您在代码中的特定点暂停执行应用程序，并在程序仍在运行时检查和修改变量的值。&lt;/p&gt;
&lt;h2 id=&quot;设置Chrome-for-Node-js调试&quot;&gt;&lt;a href=&quot;#设置Chrome-for-Node-js调试&quot; class=&quot;headerlink&quot; title=&quot;设置Chrome for Node.js调试&quot;&gt;&lt;/a&gt;设置Chrome for Node.js调试&lt;/h2&gt;&lt;p&gt;使用&lt;code&gt;Chrome 57+&lt;/code&gt;，&lt;code&gt;Node.js&lt;/code&gt;调试功能是默认启用的，不需要像以前的版本那样从“实验功能”面板手动启用它。&lt;/p&gt;
&lt;p&gt;如果您还没有完成，请将Google Chrome更新到最新版本，并确保使用&lt;code&gt;Node.js 6.4+&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;要开始调试，请使用 &lt;code&gt;- inspect&lt;/code&gt;标志运行&lt;code&gt;Node.js&lt;/code&gt;应用程序。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ node --inspect &amp;lt;your_file&amp;gt; .js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*NIVrIoEiniOt6cP-d-0LFQ.png&quot; alt=&quot;在调试模式下运行Node.js应用程序&quot;&gt;&lt;/p&gt;
&lt;p&gt;接下来，忽略从终端中显示的“&lt;code&gt;chrome-devtools://&lt;/code&gt;”开头的URL ，而是在Google Chrome中打开“ &lt;code&gt;about:inspect&lt;/code&gt; ”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*QAmWRyPtdfF5X7VuvDN1zg.png&quot; alt=&quot;chrome DevTools&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后点击“ Open dedicated DevTools for Node” 开始调试应用程序的代码。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*zQ1uLl_qiRIAJ7Lxw_LFAQ.png&quot; alt=&quot;deloper tools for Node&quot;&gt;&lt;/p&gt;
&lt;p&gt;此外，关于调试&lt;a href=&quot;https://nodejs.org/en/docs/guides/debugging-getting-started/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js App&lt;/a&gt;的官方文档还提供了所有其他检查器工具和客户端选项的详细列表。&lt;/p&gt;
&lt;h2 id=&quot;Chrome-DevTools的应用&quot;&gt;&lt;a href=&quot;#Chrome-DevTools的应用&quot; class=&quot;headerlink&quot; title=&quot;Chrome DevTools的应用&quot;&gt;&lt;/a&gt;Chrome DevTools的应用&lt;/h2&gt;&lt;p&gt;要结束本文，我想说明一下&lt;code&gt;Chrome DevTools&lt;/code&gt;在以下&lt;code&gt;Express&lt;/code&gt;应用程序中的应用。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&#39;use strict&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; express = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;express&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; app = express()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; PORT = process.env.PORT || &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;capitalize&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;str&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; firstLetter = str.charAt(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// we can check what&#39;s inside here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;firstLetter.toUpperCase()&amp;#125;&lt;/span&gt;&lt;span class=&quot;subst&quot;&gt;$&amp;#123;str.slice(1)&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.get(&lt;span class=&quot;string&quot;&gt;&#39;/:name?&#39;&lt;/span&gt;, (req, res) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; name = req.params.name ? capitalize(req.params.name) : &lt;span class=&quot;string&quot;&gt;&#39;World&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  res.send(&lt;span class=&quot;string&quot;&gt;`Hello &lt;span class=&quot;subst&quot;&gt;$&amp;#123;name&amp;#125;&lt;/span&gt;!`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app.listen(PORT, () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`App listening on *:&lt;span class=&quot;subst&quot;&gt;$&amp;#123;PORT&amp;#125;&lt;/span&gt;`&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们从运行&lt;code&gt;- inspect&lt;/code&gt;标志，并打开专用&lt;code&gt;DevTools for Node&lt;/code&gt;如前所述。&lt;/p&gt;
&lt;p&gt;此时，您将可以访问您可能已经熟悉的所有功能：断点(&lt;code&gt;breakpoints&lt;/code&gt;)，压缩代码的源映射(&lt;code&gt;source map for transpiled code&lt;/code&gt;)，堆快照检查(&lt;code&gt;heap snapshot inspection&lt;/code&gt;)，分配分析(&lt;code&gt;allocation profiling&lt;/code&gt;)，JavaScript值热插拔(&lt;code&gt;JavaScript values hot-swapping&lt;/code&gt;)等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*jTzAaK_zRNynCMvlDbx2rA.png&quot; alt=&quot;使用断点来调试Express应用程序&quot;&gt;&lt;/p&gt;
&lt;p&gt;具体来说，如下图所示，您可以插入断点来停止执行程序，检查和“热交换”变量的值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*URHvZNuF7RksLoDZRbYnpQ.png&quot; alt=&quot;JavaScript值热拔插&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*mk2Ro3VX6iAw7YLWJzlmtw.png&quot; alt=&quot;JavaScript值热拔插2&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用Chrome作为调试工具的另外一件好事是您可以使用相同的界面🚀调试前端和后端JavaScript代码。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如何调试 Node.js, 还在使用 console.log 来调试 Node.js 吗，可以像调试前端页面一样调试 Node.js!
    
    </summary>
    
      <category term="Node.js" scheme="http://robin-front.github.io/categories/Node-js/"/>
    
    
      <category term="debug" scheme="http://robin-front.github.io/tags/debug/"/>
    
      <category term="Node.js" scheme="http://robin-front.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>RXJS我该选用哪个操作符之-创建篇</title>
    <link href="http://robin-front.github.io/2017/06/01/RXJS%E6%88%91%E8%AF%A5%E9%80%89%E7%94%A8%E5%93%AA%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B9%8B-%E5%88%9B%E5%BB%BA%E7%AF%87/"/>
    <id>http://robin-front.github.io/2017/06/01/RXJS我该选用哪个操作符之-创建篇/</id>
    <published>2017-06-01T10:16:43.000Z</published>
    <updated>2017-06-01T10:16:43.000Z</updated>
    
    <content type="html">&lt;p&gt;RXJS该怎么上手？这么多操作符该用哪个？RXJS比较强大，操作符众多，想熟悉需要比较长时间的运用，所以大部分新手都比较疑惑应该使用哪些操作符去实现自己的数据流的操作。&lt;/p&gt;
&lt;p&gt;更多详情请翻阅 &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese&quot;&gt;RXJS中文翻译文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;我该选用哪个操作符-创建操作符&quot;&gt;&lt;a href=&quot;#我该选用哪个操作符-创建操作符&quot; class=&quot;headerlink&quot; title=&quot;我该选用哪个操作符? - 创建操作符&quot;&gt;&lt;/a&gt;我该选用哪个操作符? - 创建操作符&lt;/h1&gt;&lt;p&gt;使用此页面查找&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/index.html&quot;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt;符合您需求的类型创建操作：
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table style=&quot;display: table&quot;&gt;
&lt;thead&gt;静态方法&lt;/thead&gt;
&lt;tbody&gt;
    &lt;!-- Observable factories --&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;26&quot;&gt;我想创建一个新的序列&lt;/td&gt;
        &lt;td rowspan=&quot;4&quot;&gt;使用自定义逻辑&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td&gt;
            &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/create.html&quot;&gt;Observable.create&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;3&quot;&gt;像一个for循环&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/generate.html&quot;&gt;Observable.generate&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;并随时间发射值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/generatewithrelativetime.html&quot;&gt;Observable.generateWithRelativeTime&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/generatewithabsolutetime.html&quot;&gt;Observable.generateWithAbsoluteTime&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;它返回一个值&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td&gt;
            &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/return.html&quot;&gt;Observable.return/just&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;多次&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/repeat.html&quot;&gt;Observable.repeat&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;这会抛出错误&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/throw.html&quot;&gt;Observable.throw&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;完成了&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/empty.html&quot;&gt;Observable.empty&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;从来没有做任何事情&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/never.html&quot;&gt;Observable.never&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;从事件&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/fromevent.html&quot;&gt;Observable.fromEvent&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;它使用自定义函数来添加和删除事件处理程序&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/fromeventpattern.html&quot;&gt;Observable.fromEventPattern&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;来自一个&lt;a title=&quot;ES6 Promise&quot; href=&quot;https://www.promisejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ES6 Promise&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/frompromise.html&quot;&gt;Observable.fromPromise&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;6&quot;&gt;它可迭代&lt;/td&gt;
        &lt;td rowspan=&quot;2&quot;&gt;覆盖到数组中的值&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;
            &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/fromarray.html&quot;&gt;Observable.fromArray&lt;/a&gt;&lt;br&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;对象键/值对&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/pairs.html&quot;&gt;Observable.pairs&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;异步元素&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/for.html&quot;&gt;Observable.for&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;数值范围内的值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/range.html&quot;&gt;Observable.range&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;来自一个可迭代的数组或类似数组的对象的值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/from.html&quot;&gt;Observable.from&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;来自参数&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/of.html&quot;&gt;Observable.of&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;根据定时器发出值&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/interval.html&quot;&gt;Observable.interval&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;具有可选的初始延迟&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/timer.html&quot;&gt;Observable.timer&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot; colspan=&quot;2&quot;&gt;不传参调用函数&lt;/td&gt;
        &lt;td&gt;在特定的调度程序&lt;/td&gt;
        &lt;td&gt;
            &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/start.html&quot;&gt;Observable.start&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;异步&lt;/td&gt;
        &lt;td&gt;
            &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/startasync.html&quot;&gt;Observable.startAsync&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;4&quot;&gt;取决于订阅时&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;基于布尔条件&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/if.html&quot;&gt;Observable.if&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;f从一组预先设定的序列&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/case.html&quot;&gt;Observable.case&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;1&quot; rowspan=&quot;2&quot;&gt;使用自定义逻辑&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/defer.html&quot;&gt;Observable.defer&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;它取决于资源&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/using.html&quot;&gt;Observable.using&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;!-- Function factories --&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;3&quot;&gt;我想包装一个函数&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td rowspan=&quot;3&quot;&gt;并产生一个序列的结果&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/toasync.html&quot;&gt;Observable.toAsync&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;它接受回调&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/fromcallback.html&quot;&gt;Observable.fromCallback&lt;/a&gt;&lt;/td&gt;
    
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;它接受Node.js回调&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/fromnodecallback.html&quot;&gt;Observable.fromNodeCallback&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;!-- Flatteners --&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;30&quot;&gt;我想结合多个序列&lt;/td&gt;
        &lt;td colspan=&quot;3&quot;&gt;并且仅从产生值的序列中接收值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/amb.html&quot;&gt;Observable.amb&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;所有人都已经完成通知&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/forkjoin.html&quot;&gt;Observable.forkJoin&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;并输出所有这些值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/merge.html&quot;&gt;Observable.merge&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;为了&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;不改变时重复使用最新值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/operators/combinelatest.html&quot;&gt;Observable.combineLatest&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;每个值只使用一次&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/zip.html&quot;&gt;Observable.zip&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;3&quot;&gt;通过订阅每个序列为了&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;当前一个序列完成时&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/concat.html&quot;&gt;Observable.concat&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;当另一个序列抛出错误时&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/catch.html&quot;&gt;Observable.catch&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;不管先前的序列是完成还是抛出错误&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/onerrorresumenext.html&quot;&gt;Observable.onErrorResumeNext&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;通过响应不同的值组合&lt;a href=&quot;http://en.wikipedia.org/wiki/Join-calculus&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;（连接微积分）&lt;/a&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/when.html&quot;&gt;Observable.when&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;RXJS该怎么上手？这么多操作符该用哪个？RXJS比较强大，操作符众多，想熟悉需要比较长时间的运用，所以大部分新手都比较疑惑应该使用哪些操作符去实现自己的数据流的操作。&lt;/p&gt;
&lt;p&gt;更多详情请翻阅 &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese&quot;&gt;RXJS中文翻译文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;我该选用哪个操作符-创建操作符&quot;&gt;&lt;a href=&quot;#我该选用哪个操作符-创建操作符&quot; class=&quot;headerlink&quot; title=&quot;我该选用哪个操作符? - 创建操作符&quot;&gt;&lt;/a&gt;我该选用哪个操作符? - 创建操作符&lt;/h1&gt;&lt;p&gt;使用此页面查找&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_methods/index.html&quot;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt;符合您需求的类型创建操作：
    
    </summary>
    
      <category term="RXJS" scheme="http://robin-front.github.io/categories/RXJS/"/>
    
    
      <category term="RXJS" scheme="http://robin-front.github.io/tags/RXJS/"/>
    
  </entry>
  
  <entry>
    <title>RXJS我该选用哪个操作符之-实例操作符篇</title>
    <link href="http://robin-front.github.io/2017/06/01/RXJS%E6%88%91%E8%AF%A5%E9%80%89%E7%94%A8%E5%93%AA%E4%B8%AA%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B9%8B-%E5%AE%9E%E4%BE%8B%E6%93%8D%E4%BD%9C%E7%AC%A6%E7%AF%87/"/>
    <id>http://robin-front.github.io/2017/06/01/RXJS我该选用哪个操作符之-实例操作符篇/</id>
    <published>2017-06-01T09:54:53.000Z</published>
    <updated>2017-06-01T09:54:53.000Z</updated>
    
    <content type="html">&lt;p&gt;RXJS比较强大，操作符众多，想熟悉需要比较长时间的运用，所以大部分新手都比较疑惑应该使用哪些操作符去实现自己的数据流的操作。&lt;/p&gt;
&lt;p&gt;更多详情请翻阅 &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese&quot;&gt;RXJS中文翻译文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;我该选用哪个操作符-实例操作符&quot;&gt;&lt;a href=&quot;#我该选用哪个操作符-实例操作符&quot; class=&quot;headerlink&quot; title=&quot;我该选用哪个操作符? - 实例操作符&quot;&gt;&lt;/a&gt;我该选用哪个操作符? - 实例操作符&lt;/h1&gt;&lt;p&gt;使用此页面通过类型查找&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt; 适合您需要的实例运算符：
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table style=&quot;display: table&quot;&gt;
&lt;thead&gt;实例操作符&lt;/thead&gt;
&lt;tbody&gt;
    &lt;!-- Observable operators --&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;71&quot;&gt;使用现有的序列&lt;/td&gt;
        &lt;td colspan=&quot;3&quot;&gt;我想改变每个值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/select.html&quot;&gt;map/select&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;我想从每个值拉一个属性&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/pluck.html&quot;&gt;pluck&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;我想在不影响值的情况下被通知值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/do.html&quot;&gt;do/tap&lt;/a&gt;&lt;br&gt;
            &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/doonnext.html&quot;&gt;doOnNext/tapOnNext&lt;/a&gt;&lt;br&gt;
            &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/doonerror.html&quot;&gt;doOnError/tapOnError&lt;/a&gt;&lt;br&gt;
            &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/dooncompleted.html&quot;&gt;doOnCompleted/tapOnCompleted&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;6&quot;&gt;我想包含值&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;基于自定义逻辑&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/where.html&quot;&gt;filter/where&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;从序列开头&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/take.html&quot;&gt;take&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;基于自定义逻辑&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/takewhile.html&quot;&gt;takeWhile&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;从序列的末尾&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/takelast.html&quot;&gt;takeLast&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;直到另一个序列发射一个值或完成&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/takeuntil.html&quot;&gt;takeUntil&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;7&quot;&gt;我想忽略值&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;全部&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/ignoreelements.html&quot;&gt;ignoreElements&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;从序列的开头&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/skip.html&quot;&gt;skip&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;基于自定义逻辑&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/skipwhile.html&quot;&gt;skipWhile&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;从序列的末尾&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/skiplast.html&quot;&gt;skipLast&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;直到另一个序列发出一个值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/skipuntil.html&quot;&gt;skipUntil&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;与以前的值相同&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/distinctuntilchanged.html&quot;&gt;distinctUntilChanged&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;这（触发）太频繁&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/throttle.html&quot;&gt;throttle&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;4&quot;&gt;我想计算&lt;/td&gt;
        &lt;td&gt;总和&lt;/td&gt;
        &lt;td rowspan=&quot;2&quot;&gt;这些值的&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/sum.html&quot;&gt;sum&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;平均值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/average.html&quot;&gt;average&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;使用自定义逻辑&lt;/td&gt;
        &lt;td&gt;并且只输出最终值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/aggregate.html&quot;&gt;aggregate&lt;/a&gt;&lt;br&gt;
            &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/reduce.html&quot;&gt;reduce&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;并在计算出值时输出（每一步的）值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/scan.html&quot;&gt;scan&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;3&quot;&gt;我想用元数据包装它的消息&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;描述每个消息&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/materialize.html&quot;&gt;materialize&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;包括从最后一个价值以来的时间&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/timeinterval.html&quot;&gt;timeInterval&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;包括时间戳&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/timestamp.html&quot;&gt;timestamp&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;经过一段时间的不活动&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;我想抛出一个错误&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/timeout.html&quot;&gt;timeout&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;我想切换到另一个序列&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/timeout.html&quot;&gt;timeout&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;我想确保只有一个值&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;并且如果存在多于或少于一个值则抛出错误&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/single.html&quot;&gt;single&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;并且如果没有值，则使用默认值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/singleordefault.html&quot;&gt;singleOrDefault&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;3&quot;&gt;我只想取第一个值&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;并且如果没有值，则抛出错误&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/first.html&quot;&gt;first&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;并且如果没有值，则使用默认值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/firstordefault.html&quot;&gt;firstOrDefault&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;在一段时间内&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/sample.html&quot;&gt;sample&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;我只想取最后的值&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;如果没有值，则报错&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/last.html&quot;&gt;last&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;并且如果没有值，则使用默认值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/lastordefault.html&quot;&gt;lastOrDefault&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;我想知道它包含多少值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/count.html&quot;&gt;count&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;我想知道它是否包含一个指定的值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/includes.html&quot;&gt;contains&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;我想知道条件是否满足&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;只需要任一值满足&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/any.html&quot;&gt;any/some&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;需要所有值都满足&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/every.html&quot;&gt;all/every&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot; colspan=&quot;2&quot;&gt;我想把消息延迟一段特定的时间&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/delay.html&quot;&gt;delay&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;基于自定义逻辑&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/delaywithselector.html&quot;&gt;delayWithSelector&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;11&quot;&gt;我想给值分组&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;直到序列完成&lt;/td&gt;
        &lt;td&gt;
          &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/toarray.html&quot;&gt;toArray&lt;/a&gt;&lt;br&gt;
          &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/tomap.html&quot;&gt;toMap&lt;/a&gt;&lt;br&gt;
          &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/toset.html&quot;&gt;toSet&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;使用自定义逻辑&lt;/td&gt;
        &lt;td&gt;作为数组&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/buffer.html&quot;&gt;buffer&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;作为序列&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/window.html&quot;&gt;window&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;根据特定大小分批&lt;/td&gt;
        &lt;td&gt;作为数组&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/bufferwithcount.html&quot;&gt;bufferWithCount&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;作为序列&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/windowwithcount.html&quot;&gt;windowWithCount&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;基于时间&lt;/td&gt;
        &lt;td&gt;作为数组&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/bufferwithtime.html&quot;&gt;bufferWithTime&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;作为序列&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/windowwithtime.html&quot;&gt;windowWithTime&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;基于时间或计数，以先发生者为准&lt;/td&gt;
        &lt;td&gt;作为数组&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/bufferwithtimeorcount.html&quot;&gt;bufferWithTimeOrCount&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;作为序列&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/windowwithtimeorcount.html&quot;&gt;windowWithTimeOrCount&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;基于一个指定的key&lt;/td&gt;
        &lt;td&gt;直到序列完成&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/groupby.html&quot;&gt;groupBy&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;并控制每组的生命周期&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/groupbyuntil.html&quot;&gt;groupByUntil&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;6&quot;&gt;我想为每个值开始一个新的序列&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;并且并行地从所有序列中发出值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/selectmany.html&quot;&gt;flatMap/selectMany&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;并按顺序从每个序列中输出值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/concatmap.html&quot;&gt;concatMap/selectConcat&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;并在新值到达时取消先前的序列&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/flatmaplatest.html&quot;&gt;flatMapLatest/selectSwitch&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;并递归地为每个新值启动一个新的序列&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/expand.html&quot;&gt;expand&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;并根据onNext，onError和onCompleted并行地从所有序列发出值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/flatmapobserver.html&quot;&gt;flatMapObserver/selectManyObserver&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;并根据onNext，onError和onCompleted顺序地从所有序列发出值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/flatmapobserver.html&quot;&gt;concatMapObserver/selectConcatObserver&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;我想把它与另一个结合起来&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;两者都完成时发出通知&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/forkjoin.html&quot;&gt;forkJoin&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;我想执行复杂的操作，而不会打破流畅的调用&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/let.html&quot;&gt;let&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;5&quot;&gt;我想在多个订阅者之间共享订阅&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;使用特定的&lt;code&gt;subject&lt;/code&gt;实现&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/multicast.html&quot;&gt;multicast&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;
        &lt;td&gt;
          &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/publish.html&quot;&gt;publish&lt;/a&gt;&lt;br&gt;
          &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/share.html&quot;&gt;share&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;并向未来订阅者提供最后的值&lt;/td&gt;
        &lt;td&gt;
          &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/publishlast.html&quot;&gt;publishLast&lt;/a&gt;&lt;br&gt;
          &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/sharelast.html&quot;&gt;shareLast&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;并向未来订阅者重播默认值或最新值&lt;/td&gt;
        &lt;td&gt;
          &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/publishvalue.html&quot;&gt;publishValue&lt;/a&gt;&lt;br&gt;
          &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/sharevalue.html&quot;&gt;shareValue&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;并向未来的订阅者重播n个值&lt;/td&gt;
        &lt;td&gt;
          &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/publish.html&quot;&gt;replay&lt;/a&gt;&lt;br&gt;
          &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/share.html&quot;&gt;shareReplay&lt;/a&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;3&quot;&gt;发生错误时&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;我想重新订阅&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/retry.html&quot;&gt;retry&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;我想开始一个新序列&lt;/td&gt;
        &lt;td&gt;&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/catch.html&quot;&gt;catch&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;取决于错误&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/catch.html&quot;&gt;catch&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;当完成时&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;我想重新订阅&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/repeat.html&quot;&gt;repeat&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;我想开始一个新序列&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/concat.html&quot;&gt;concat&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;当完成或抛出错误时&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;我想开始一个新序列&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/onerrorresumenext.html&quot;&gt;onErrorResumeNext&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;当完成，抛出错误或退订时&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;我想执行一个函数&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/finally.html&quot;&gt;finally&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;我想改变路由的调度程序&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;调用&lt;code&gt;subscribe&lt;/code&gt;（订阅）&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/subscribeon.html&quot;&gt;subscribeOn&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;2&quot;&gt;消息&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/observeon.html&quot;&gt;observeOn&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;9&quot;&gt;使用两个序列&lt;/td&gt;
        &lt;td&gt;我想决定从哪个接收值&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;取决于哪个序列先发出值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/amb.html&quot;&gt;amb&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;我想确定它们的值是否相等&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/sequenceequal.html&quot;&gt;sequenceEqual&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;5&quot;&gt;我想合并它们的值&lt;/td&gt;
        &lt;td colspan=&quot;2&quot;&gt;只有当第一个序列发射时，使用每个序列的最新值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/withlatestfrom.html&quot;&gt;withLatestFrom&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;为了&lt;/td&gt;
        &lt;td&gt;不改变时重复使用最新值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/combinelatest.html&quot;&gt;combineLatest&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;每个值只使用一次&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/zip.html&quot;&gt;zip&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td rowspan=&quot;2&quot;&gt;重复分享我选择的“生命周期”&lt;/td&gt;
        &lt;td&gt;并通知每个组合&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/join.html&quot;&gt;join&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td&gt;并给每个“左”的序列的值给“右”的序列&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/groupjoin.html&quot;&gt;groupJoin&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td colspan=&quot;3&quot;&gt;我想包含两者的值&lt;/td&gt;
        &lt;td&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/observable/observable_instance_methods/merge.html&quot;&gt;merge&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;RXJS比较强大，操作符众多，想熟悉需要比较长时间的运用，所以大部分新手都比较疑惑应该使用哪些操作符去实现自己的数据流的操作。&lt;/p&gt;
&lt;p&gt;更多详情请翻阅 &lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese&quot;&gt;RXJS中文翻译文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;我该选用哪个操作符-实例操作符&quot;&gt;&lt;a href=&quot;#我该选用哪个操作符-实例操作符&quot; class=&quot;headerlink&quot; title=&quot;我该选用哪个操作符? - 实例操作符&quot;&gt;&lt;/a&gt;我该选用哪个操作符? - 实例操作符&lt;/h1&gt;&lt;p&gt;使用此页面通过类型查找&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md&quot;&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt; 适合您需要的实例运算符：
    
    </summary>
    
      <category term="RXJS" scheme="http://robin-front.github.io/categories/RXJS/"/>
    
    
      <category term="RXJS" scheme="http://robin-front.github.io/tags/RXJS/"/>
    
  </entry>
  
  <entry>
    <title>Marko和react,preact,vue相比快在哪里</title>
    <link href="http://robin-front.github.io/2017/06/01/Marko%E5%92%8Creact-preact-vue%E7%9B%B8%E6%AF%94%E5%BF%AB%E5%9C%A8%E5%93%AA%E9%87%8C/"/>
    <id>http://robin-front.github.io/2017/06/01/Marko和react-preact-vue相比快在哪里/</id>
    <published>2017-06-01T02:48:00.000Z</published>
    <updated>2017-06-01T02:48:00.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://hackernoon.com/why-is-marko-fast-a20796cb8ae3&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;译文：why-is-marko-fast&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在eBay，我们正在使用&lt;code&gt;[Marko](http://markojs.com/)&lt;/code&gt;每天处理超过十亿的请求，这就要求我们精简我们的开源UI库Marko。我们大大优化了Marko ，以实现快速渲染，&lt;a href=&quot;http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;高级性能技术&lt;/a&gt;，并实现了最小的页面重量（〜10kb gzipped）。性能只是一个方面，因为我们还必须扩展Marko以支持数百个团队的开发，从而允许开发人员有效地创建可维护和强大的Web应用程序。&lt;/p&gt;
&lt;p&gt;我们已经创建了我们自己的&lt;a href=&quot;https://github.com/marko-js/isomorphic-ui-benchmarks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;benchMarks&lt;/a&gt;进行比较，也已经将Marko添加到&lt;a href=&quot;https://github.com/raxjs/server-side-rendering-comparison/pull/11&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;其他基准测试&lt;/a&gt;中，但是基准测试并不总是值得信赖的。尽管我们尽可能公平地对待我们的基准，但最重要的是在现实世界的应用中的表现，而不是专注于微观基准。这就是V8团队转而采用新的方法来衡量和理解现实JavaScript性能的一个原因。&lt;/p&gt;
&lt;p&gt;同样，我们已经观察过我们的开发人员实际开发中如何编写他们的Marko组件，并且发现了可以进一步优化的模式。而不是关注本文中的基准测试，我想关注我们应用于Marko的优化细节。
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;多个编译输出&quot;&gt;&lt;a href=&quot;#多个编译输出&quot; class=&quot;headerlink&quot; title=&quot;多个编译输出&quot;&gt;&lt;/a&gt;多个编译输出&lt;/h2&gt;&lt;p&gt;Marko是一个在服务器和浏览器中运行的同构UI库。正如&lt;a href=&quot;https://medium.com/@mlrawlings&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Michael Rawlings&lt;/a&gt;在“ &lt;a href=&quot;https://hackernoon.com/server-side-rendering-shootout-with-marko-preact-rax-react-and-vue-25e1ae17800f&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;服务器端渲染染&lt;/a&gt; ”中提到的，当在服务器上呈现时，Marko直接呈现可以作为HTTP响应发送的文档（HTML）的字符串表示形式。&lt;/p&gt;
&lt;p&gt;在浏览器中呈现时，必须解析HTML字符串才能更新DOM。因此，Marko通过程序将视图编译为直接呈现到虚拟文档（VDOM）树，这可以针对浏览器有效地更新真实的DOM。&lt;/p&gt;
&lt;p&gt;给出以下模板：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/anonymous/5ccdaadcb42dc0f5a4b2e6a956111562/raw/fa23a13e458bf8bb79dfbdc659f1248c012a799a/template.marko&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div&amp;gt;Hello $&amp;#123;input.name&amp;#125;!&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;编译为服务器&quot;&gt;&lt;a href=&quot;#编译为服务器&quot; class=&quot;headerlink&quot; title=&quot;编译为服务器&quot;&gt;&lt;/a&gt;编译为服务器&lt;/h3&gt;&lt;p&gt;编译输出针对服务器上的HTML输出进行了优化：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; marko_template = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;marko/html&quot;&lt;/span&gt;).t(__filename),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    marko_helpers = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;marko/runtime/html/helpers&quot;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    marko_escapeXml = marko_helpers.x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;input, out&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  out.w(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;div&amp;gt;Hello &quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    marko_escapeXml(input.name) +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;!&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;编译为浏览器&quot;&gt;&lt;a href=&quot;#编译为浏览器&quot; class=&quot;headerlink&quot; title=&quot;编译为浏览器&quot;&gt;&lt;/a&gt;编译为浏览器&lt;/h3&gt;&lt;p&gt;编译输出针对浏览器中的虚拟DOM渲染进行了优化：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; marko_template = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;marko/vdom&quot;&lt;/span&gt;).t(__filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;input, out&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  out.e(&lt;span class=&quot;string&quot;&gt;&quot;DIV&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .t(&lt;span class=&quot;string&quot;&gt;&quot;Hello &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .t(input.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .t(&lt;span class=&quot;string&quot;&gt;&quot;!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;模块化运行时&quot;&gt;&lt;a href=&quot;#模块化运行时&quot; class=&quot;headerlink&quot; title=&quot;模块化运行时&quot;&gt;&lt;/a&gt;模块化运行时&lt;/h3&gt;&lt;p&gt;Marko运行时并不作为单个JavaScript文件分发。相反，Marko编译器会生成一个JavaScript模块，该模块仅导入实际需要的运行时部分。这允许我们向Marko添加新功能，而不会使现有应用程序膨胀。例如，给出以下模板：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; color = &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div style=&amp;#123;backgroundColor: color&amp;#125;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的示例中，需要额外的运行时代码来根据所提供&lt;code&gt;style&lt;/code&gt;的JavaScript对象呈现属性。导入&lt;code&gt;styleAttr&lt;/code&gt;助手的编译代码如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; marko_styleAttr = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;marko/runtime/vdom/helper-styleAttr&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;input, out&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; color = &lt;span class=&quot;string&quot;&gt;&#39;red&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  out.e(&lt;span class=&quot;string&quot;&gt;&quot;DIV&quot;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      style: marko_styleAttr(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          backgroundColor: color&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;高性能的服务器端渲染&quot;&gt;&lt;a href=&quot;#高性能的服务器端渲染&quot; class=&quot;headerlink&quot; title=&quot;高性能的服务器端渲染&quot;&gt;&lt;/a&gt;高性能的服务器端渲染&lt;/h3&gt;&lt;p&gt;与基于专门进行虚拟DOM渲染的JSX的解决方案相比，Marko在服务器端渲染方面具有巨大的优势。当渲染到服务器上的虚拟DOM树时，它是一个两步的过程来呈现HTML：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先在内存中生成一个完整的虚拟DOM树&lt;/li&gt;
&lt;li&gt;第二遍将虚拟DOM树序列化为可以通过线路发送的HTML字符串（这需要遍历整个树结构）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;相比之下，Marko直接一次性渲染一整个HTML流。没有中间树数据结构。&lt;/p&gt;
&lt;h3 id=&quot;静态子树的编译时优化&quot;&gt;&lt;a href=&quot;#静态子树的编译时优化&quot; class=&quot;headerlink&quot; title=&quot;静态子树的编译时优化&quot;&gt;&lt;/a&gt;静态子树的编译时优化&lt;/h3&gt;&lt;p&gt;给出以下模板：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div&amp;gt;This is a &amp;lt;strong&amp;gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/strong&amp;gt; node&amp;lt;/&lt;/span&gt;div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Marko将会认识到，模板片段每次都会产生相同的输出，因此会像以下编译输出一样创建一个虚拟DOM节点：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; marko_node0 = marko_createElement(&lt;span class=&quot;string&quot;&gt;&quot;DIV&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, ...)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .t(&lt;span class=&quot;string&quot;&gt;&quot;This is a &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .e(&lt;span class=&quot;string&quot;&gt;&quot;STRONG&quot;&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .t(&lt;span class=&quot;string&quot;&gt;&quot;static&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .t(&lt;span class=&quot;string&quot;&gt;&quot; node&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;input, out&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  out.n(marko_node0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;渲染静态子树几乎是零成本。此外，Marko将跳过对比/修补静态子树。&lt;/p&gt;
&lt;p&gt;同样，在服务器上，Marko会将模板的静态部分合并成一个字符串：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;input, out&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  out.w(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;div&amp;gt;This is a &amp;lt;strong&amp;gt;static&amp;lt;/strong&amp;gt; node&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;静态属性的编译时优化&quot;&gt;&lt;a href=&quot;#静态属性的编译时优化&quot; class=&quot;headerlink&quot; title=&quot;静态属性的编译时优化&quot;&gt;&lt;/a&gt;静态属性的编译时优化&lt;/h3&gt;&lt;p&gt;Marko还将优化动态元素的静态属性。&lt;/p&gt;
&lt;p&gt;给出以下模板：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;div.hello&amp;gt;Hello $&amp;#123;input.name&amp;#125;!&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Marko将产生以下编译输出：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; marko_attrs0 = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&quot;class&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;input, out&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  out.e(&lt;span class=&quot;string&quot;&gt;&quot;DIV&quot;&lt;/span&gt;, marko_attrs0, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .t(&lt;span class=&quot;string&quot;&gt;&quot;Hello &quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .t(input.name)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .t(&lt;span class=&quot;string&quot;&gt;&quot;!&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请注意，属性对象只创建一次，它用于每个渲染。另外，静态属性不会发生 &lt;code&gt;diffing&lt;/code&gt;/&lt;code&gt;patching&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;智能编译器&quot;&gt;&lt;a href=&quot;#智能编译器&quot; class=&quot;headerlink&quot; title=&quot;智能编译器&quot;&gt;&lt;/a&gt;智能编译器&lt;/h3&gt;&lt;p&gt;使用Marko，我们倾向于在编译时尽可能多地执行。这使我们的编译器更加复杂，但它在运行时给我们带来了很大的收获。我们有〜90％的代码覆盖率和超过2000个测试，以确保编译器正常工作。此外，在许多情况下，Marko编译器为给定的模板提供运行时提示，以便运行时可以针对特定模式进行优化。例如，识别的Marko如果HTML元素仅具有&lt;code&gt;class&lt;/code&gt;/&lt;code&gt;id&lt;/code&gt;/&lt;code&gt;style&lt;/code&gt;定义和做版本比较时/修补运行时优化了这些虚拟DOM节点（Marko编译器生成的代码，标记简单的虚拟DOM节点用于针对 &lt;code&gt;diffing&lt;/code&gt;/&lt;code&gt;patching&lt;/code&gt; 逻辑）。&lt;/p&gt;
&lt;h3 id=&quot;事件委托&quot;&gt;&lt;a href=&quot;#事件委托&quot; class=&quot;headerlink&quot; title=&quot;事件委托&quot;&gt;&lt;/a&gt;事件委托&lt;/h3&gt;&lt;p&gt;如果你正在建立一个UI组件，您将很可能需要编写代码来处理不同的DOM事件（&lt;code&gt;click&lt;/code&gt;，&lt;code&gt;submit&lt;/code&gt;，等）。开发人员常常编写使用&lt;code&gt;el.addEventListener(...)&lt;/code&gt;或使用诸如jQuery的库来添加DOM事件监听器的代码。当您使用Marko构建UI组件时，您仍然可以执行此操作，但是在初始化大量组件时，在附加侦听器时会出现开销。相反，Marko建议使用声明式事件绑定，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;button type=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; on-click(&lt;span class=&quot;string&quot;&gt;&quot;handleClick&quot;&lt;/span&gt;)&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Click Me&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/button&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当使用声明性事件绑定时，事实上没有附加任何DOM事件侦听器。相反，Marko会为每个DOM事件（在启动时完成）为页面的根DOM元素附加一个监听器。当Marko在根节点处收到事件时，它将把事件委托给该事件的相应组件。这是通过查看&lt;code&gt;event.target&lt;/code&gt;属性来查看事件发生的位置，然后向上遍历树来查找需要通知的组件。因此，当根目录捕获DOM事件时，会做更多的工作，但这种方法使用的内存少得多，并减少了初始化时需要完成的。将事件委派给组件的额外开销并不明显，因此这是一个非常有益的优化。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://hackernoon.com/why-is-marko-fast-a20796cb8ae3&quot;&gt;译文：why-is-marko-fast&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在eBay，我们正在使用&lt;code&gt;[Marko](http://markojs.com/)&lt;/code&gt;每天处理超过十亿的请求，这就要求我们精简我们的开源UI库Marko。我们大大优化了Marko ，以实现快速渲染，&lt;a href=&quot;http://www.ebaytechblog.com/2014/12/08/async-fragments-rediscovering-progressive-html-rendering-with-marko/&quot;&gt;高级性能技术&lt;/a&gt;，并实现了最小的页面重量（〜10kb gzipped）。性能只是一个方面，因为我们还必须扩展Marko以支持数百个团队的开发，从而允许开发人员有效地创建可维护和强大的Web应用程序。&lt;/p&gt;
&lt;p&gt;我们已经创建了我们自己的&lt;a href=&quot;https://github.com/marko-js/isomorphic-ui-benchmarks&quot;&gt;benchMarks&lt;/a&gt;进行比较，也已经将Marko添加到&lt;a href=&quot;https://github.com/raxjs/server-side-rendering-comparison/pull/11&quot;&gt;其他基准测试&lt;/a&gt;中，但是基准测试并不总是值得信赖的。尽管我们尽可能公平地对待我们的基准，但最重要的是在现实世界的应用中的表现，而不是专注于微观基准。这就是V8团队转而采用新的方法来衡量和理解现实JavaScript性能的一个原因。&lt;/p&gt;
&lt;p&gt;同样，我们已经观察过我们的开发人员实际开发中如何编写他们的Marko组件，并且发现了可以进一步优化的模式。而不是关注本文中的基准测试，我想关注我们应用于Marko的优化细节。
    
    </summary>
    
      <category term="Marko" scheme="http://robin-front.github.io/categories/Marko/"/>
    
    
      <category term="Marko" scheme="http://robin-front.github.io/tags/Marko/"/>
    
  </entry>
  
  <entry>
    <title>npm@5发布有哪些改进</title>
    <link href="http://robin-front.github.io/2017/06/01/npm-5%E5%8F%91%E5%B8%83%E6%9C%89%E5%93%AA%E4%BA%9B%E6%94%B9%E8%BF%9B/"/>
    <id>http://robin-front.github.io/2017/06/01/npm-5发布有哪些改进/</id>
    <published>2017-06-01T02:15:45.000Z</published>
    <updated>2017-06-01T02:15:45.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*9nI6dL1Z-8cqFpCX96zVFA.gif&quot; alt=&quot;npm@5 is now latest&quot;&gt;&lt;/p&gt;
&lt;p&gt;从今天开始，如果您输入“&lt;code&gt;npm install npm@latest -g&lt;/code&gt;”，那么您将被更新为npm版本5。另外，在所有&lt;a href=&quot;https://medium.com/@nodejs/node-js-8-big-improvements-for-the-debugging-and-native-module-ecosystem-58454861f2fc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js 8&lt;/a&gt;的新安装中都捆绑了&lt;code&gt;npm@5&lt;/code&gt; ，它已经替代了&lt;code&gt;Node.js 7&lt;/code&gt;在Node Project的当前版本中。&lt;/p&gt;
&lt;p&gt;在过去一年半的时间里，我们一直在努力解决大量的痛点，其中有些是创建npm以来就已经存在的。今天的发布是对npm速度，一致性和用户体验的最大改进。&lt;/p&gt;
&lt;p&gt;发布说明中有什么新内容和更改内容的明确列表，但这里有一些亮点：
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;速度很快&quot;&gt;&lt;a href=&quot;#速度很快&quot; class=&quot;headerlink&quot; title=&quot;速度很快&quot;&gt;&lt;/a&gt;速度很快&lt;/h2&gt;&lt;p&gt;重新编排了包元数据，软件包下载和软件包缓存，这大大加快了工作。一般来说，期望性能提升20-100％; 我们还看到一些安装和版本冲突的运行速度提高了5倍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/0*K1Wb1ERhtAHLRG0m.&quot; alt=&quot;speed improvements in npm@5&quot;&gt;&lt;/p&gt;
&lt;p&gt;由于npm最初的设计，开发人员已经改变了他们如何使用npm。npm生态系统不仅呈指数级增长，而且从2014年起，平均npm软件包中的依赖关系数量增加了250％。现在，更多的开发人员现在可以在本地安装Babel，Webpack和Tap等有用工具，而不是全局。这是一个最佳实践，但这意味着“&lt;code&gt;npm install&lt;/code&gt;”可以做更多的工作。&lt;/p&gt;
&lt;p&gt;鉴于我们社区的规模，任何速度上升都会为数百万用户带来巨大的节省，更不用说我们的所有组织和npm企业客户。使npm @ 5变快成为一个很显然的目标。&lt;/p&gt;
&lt;h2 id=&quot;目标一致&quot;&gt;&lt;a href=&quot;#目标一致&quot; class=&quot;headerlink&quot; title=&quot;目标一致&quot;&gt;&lt;/a&gt;目标一致&lt;/h2&gt;&lt;h3 id=&quot;默认锁文件&quot;&gt;&lt;a href=&quot;#默认锁文件&quot; class=&quot;headerlink&quot; title=&quot;默认锁文件&quot;&gt;&lt;/a&gt;默认锁文件&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Shrinkwrap&lt;/code&gt;很早就已经是npm的一部分，但&lt;code&gt;npm@5&lt;/code&gt;使&lt;code&gt;lockfiles&lt;/code&gt;成为默认，所以所有的npm安装现在都是可重现的。在安装给定版本的软件包时，每次安装它您获得的文件将是相同的。&lt;/p&gt;
&lt;p&gt;我们发现无数常见且耗时的问题可能与不同开发人员环境利用不同软件包版本时发生的“漂移”相关。使用默认锁文件，这不再是问题。你不会浪费时间，试图找出一个错误，只是为了了解它来自运行不同版本的图书馆的人。&lt;/p&gt;
&lt;h3 id=&quot;SHA-512哈希&quot;&gt;&lt;a href=&quot;#SHA-512哈希&quot; class=&quot;headerlink&quot; title=&quot;SHA-512哈希&quot;&gt;&lt;/a&gt;SHA-512哈希&lt;/h3&gt;&lt;p&gt;&lt;code&gt;npm@5&lt;/code&gt;增加了对&lt;code&gt;Node.js&lt;/code&gt;支持的任何tarball Hash功能的支持，并以SHA-512 hash发布。通过检查所有下载的软件包，您可以防止数据损坏和恶意攻击，并且您可以相信您从npm下载的代码是一致和安全的。&lt;/p&gt;
&lt;h3 id=&quot;自愈缓存&quot;&gt;&lt;a href=&quot;#自愈缓存&quot; class=&quot;headerlink&quot; title=&quot;自愈缓存&quot;&gt;&lt;/a&gt;自愈缓存&lt;/h3&gt;&lt;p&gt;我们的新缓存很容易损坏，但也更具弹性。多个npm进程不会破坏共享缓存，&lt;code&gt;npm@5&lt;/code&gt;将检查插入和提取的数据，以防止安装损坏的数据。如果缓存项失败完整性检查，&lt;code&gt;npm@5&lt;/code&gt;将自动删除它并重新获取。&lt;/p&gt;
&lt;h3 id=&quot;更易使用&quot;&gt;&lt;a href=&quot;#更易使用&quot; class=&quot;headerlink&quot; title=&quot;更易使用&quot;&gt;&lt;/a&gt;更易使用&lt;/h3&gt;&lt;p&gt;根据您的反馈，我们通过&lt;code&gt;npm @ 5&lt;/code&gt;中的优化改进了用户体验。其中很大一部分是输出更多的有用的提示信息。最好的例子是，npm不再显示&lt;code&gt;package&lt;/code&gt;上的整个树; 相反，您将看到有关安装内容的摘要报告。由于平均每个&lt;code&gt;package&lt;/code&gt;中的依赖关系较大，因此我们进行了此更改。逐个文件读出结果是超过一定数量就会显得非常笨重。&lt;/p&gt;
&lt;h2 id=&quot;比较&quot;&gt;&lt;a href=&quot;#比较&quot; class=&quot;headerlink&quot; title=&quot;比较&quot;&gt;&lt;/a&gt;比较&lt;/h2&gt;&lt;p&gt;有一个项目使用 &lt;code&gt;benchmark&lt;/code&gt; 比较了 &lt;code&gt;yarn&lt;/code&gt;, &lt;code&gt;pnpm&lt;/code&gt;, &lt;code&gt;npm&lt;/code&gt; 的效率, &lt;a href=&quot;https://github.com/JamieMason/npm-cache-benchmark&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面是比较结果：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Installer&lt;/th&gt;
&lt;th style=&quot;text-align:right&quot;&gt;Average over 5 runs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;yarn –offline&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;5.88&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;pnpm –offline&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;6.72&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;pnpm (cached)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;6.86&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;npm 5.x (shrinkpacked, compressed)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;8.35&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;npm 5.x (shrinkpacked)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;8.94&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;npm 5.x (cached)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;11.36&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;npm 4.x (cached)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;13.47&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;yarn&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;13.71&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;npm 5.x&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;14.93&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;pnpm&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;17.57&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;npm 4.x (shrinkpacked, compressed)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;18.73&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;npm 4.x (shrinkpacked)&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;18.78&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;npm 4.x&lt;/td&gt;
&lt;td style=&quot;text-align:right&quot;&gt;29.73&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*9nI6dL1Z-8cqFpCX96zVFA.gif&quot; alt=&quot;npm@5 is now latest&quot;&gt;&lt;/p&gt;
&lt;p&gt;从今天开始，如果您输入“&lt;code&gt;npm install npm@latest -g&lt;/code&gt;”，那么您将被更新为npm版本5。另外，在所有&lt;a href=&quot;https://medium.com/@nodejs/node-js-8-big-improvements-for-the-debugging-and-native-module-ecosystem-58454861f2fc&quot;&gt;Node.js 8&lt;/a&gt;的新安装中都捆绑了&lt;code&gt;npm@5&lt;/code&gt; ，它已经替代了&lt;code&gt;Node.js 7&lt;/code&gt;在Node Project的当前版本中。&lt;/p&gt;
&lt;p&gt;在过去一年半的时间里，我们一直在努力解决大量的痛点，其中有些是创建npm以来就已经存在的。今天的发布是对npm速度，一致性和用户体验的最大改进。&lt;/p&gt;
&lt;p&gt;发布说明中有什么新内容和更改内容的明确列表，但这里有一些亮点：
    
    </summary>
    
      <category term="npm" scheme="http://robin-front.github.io/categories/npm/"/>
    
    
      <category term="npm" scheme="http://robin-front.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>JSX是什么鬼(WTF is JSX)</title>
    <link href="http://robin-front.github.io/2017/05/30/JSX%E6%98%AF%E4%BB%80%E4%B9%88%E9%AC%BC/"/>
    <id>http://robin-front.github.io/2017/05/30/JSX是什么鬼/</id>
    <published>2017-05-30T01:52:45.000Z</published>
    <updated>2017-05-30T01:52:45.000Z</updated>
    
    <content type="html">&lt;p&gt;JSX实际上很简单：只需要花1分钟阅读这个，你会明白有关这个有趣的替代模板的一切。
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;替换标题：“融入JSX”&lt;/p&gt;
&lt;h2 id=&quot;Pragma&quot;&gt;&lt;a href=&quot;#Pragma&quot; class=&quot;headerlink&quot; title=&quot;Pragma&quot;&gt;&lt;/a&gt;Pragma&lt;/h2&gt;&lt;p&gt;您可以声明每个文件或每个函数来告诉您的&lt;code&gt;transpiler&lt;/code&gt;（例如：&lt;code&gt;Babel&lt;/code&gt;）每个节点在运行时应调用的函数的名称（请参阅“&lt;a href=&quot;https://jasonformat.com/wtf-is-jsx/#Transpilation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Transpilation&lt;/a&gt;”）。&lt;/p&gt;
&lt;p&gt;在下面的例子中，我们说的是“ &lt;code&gt;h()&lt;/code&gt;为每个节点注入一个函数”：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** @jsx h */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Transpilation&quot;&gt;&lt;a href=&quot;#Transpilation&quot; class=&quot;headerlink&quot; title=&quot;Transpilation&quot;&gt;&lt;/a&gt;Transpilation&lt;/h2&gt;&lt;p&gt;如果你还没有使用解析器，你应该是尝试一下。使用ES6 / ES2015 编写，调试，测试和运行JavaScript时更为高效。&lt;code&gt;Babel&lt;/code&gt;是最受欢迎和推荐的透析器，所以我会假设你正在使用它。&lt;/p&gt;
&lt;p&gt;除了将ES6 / ES7 +语法转换为 ES5 以外，Babel还包括对JSX 开箱即用的转换支持。您不需要添加或更改任何内容以使用此功能。&lt;/p&gt;
&lt;p&gt;通过查看一个非常简单的例子来了解它的工作原理是最简单的：&lt;/p&gt;
&lt;p&gt;&lt;em&gt;转换前&lt;/em&gt; :( 你写的代码）&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/** @jsx h */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; foo = &amp;lt;div id=&quot;foo&quot;&amp;gt;Hello!&amp;lt;/div&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;转换后&lt;/em&gt; :(你运行的代码）&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; foo = h(&lt;span class=&quot;string&quot;&gt;&#39;div&#39;&lt;/span&gt;, &amp;#123;id:&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;&amp;#125;, &lt;span class=&quot;string&quot;&gt;&#39;Hello!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可能看第二个代码片段的时候，认为使用函数构建UI不会那么糟糕&lt;/p&gt;
&lt;p&gt;这就是为什么我坐上了 &lt;code&gt;JSX&lt;/code&gt; 的车：如果它从地球上消失了，用手写的输出依然会很舒服。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JSX只是一种已经相当不错的语法的糖。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;人们甚至把它用于整个项目：&lt;a href=&quot;https://github.com/dominictarr/hyperscript&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hyperscript&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;我们来构建一个JSX渲染器&quot;&gt;&lt;a href=&quot;#我们来构建一个JSX渲染器&quot; class=&quot;headerlink&quot; title=&quot;我们来构建一个JSX渲染器&quot;&gt;&lt;/a&gt;我们来构建一个JSX渲染器&lt;/h2&gt;&lt;p&gt;首先，我们需要定义转换代码后调用的 &lt;code&gt;h()&lt;/code&gt; 函数。&lt;/p&gt;
&lt;p&gt;你调用任何你想要的，我使用&lt;code&gt;h()&lt;/code&gt;，因为这种类型的“构建器”功能的原始想法被称为hyperscript (“hyper&lt;del&gt;text&lt;/del&gt;“ + “&lt;del&gt;java&lt;/del&gt;script”).。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;h&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;nodeName, attributes, ...args&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; children = args.length ? [].concat(...args) : &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; nodeName, attributes, children &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;好的，这看起来很简单（ps: 只处理了 children）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不熟悉ES6 / ES2015？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这…在参数列表是一个rest param。它将“其余”的参数收集到数组中。&lt;/li&gt;
&lt;li&gt;该concat(…args)位是一个扩展运算符：它需要该数组并将其扩展为参数concat()。这里使用的concat()是将子节点推入数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在我们有这些嵌套的JSON对象我们的&lt;code&gt;h()&lt;/code&gt;函数吐出来，所以我们最终得到一个这样的“树”：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  nodeName: &lt;span class=&quot;string&quot;&gt;&quot;div&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  attributes: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  children: [&lt;span class=&quot;string&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以我们只需要一个接受该格式并抛出实际DOM节点的函数：(即沉染vdom)&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;vnode&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 字符串只转换成 文本节点：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (vnode.split) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createTextNode(vnode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 使用 VDOM 的 nodeName 创建一个DOM 标签&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; n = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(vnode.nodeName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 拷贝所有属性到新节点上&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a = vnode.attributes || &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(a).forEach( k =&amp;gt; n.setAttribute(k, a[k]) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 渲染并添加子节点&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (vnode.children || []).forEach( c =&amp;gt; n.appendChild(render(c)) );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;：） 不难理解这是如何工作的。
如果有帮助，您可以将“虚拟DOM”视为一个非常简单的配置，用于构建给定的DOM结构。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;虚拟DOM的好处是它非常轻巧。小对象引用其他小对象，一个由易于优化的应用程序逻辑构成的结构。&lt;/p&gt;
&lt;p&gt;这也意味着它不受任何渲染逻辑或缓慢的DOM方法的束缚。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;使用JSX&quot;&gt;&lt;a href=&quot;#使用JSX&quot; class=&quot;headerlink&quot; title=&quot;使用JSX&quot;&gt;&lt;/a&gt;使用JSX&lt;/h2&gt;&lt;p&gt;我们知道&lt;code&gt;JSX&lt;/code&gt;被转换成&lt;code&gt;h()&lt;/code&gt;函数调用。
那些函数调用创建一个简单的“虚拟”DOM树。
我们可以使用该&lt;code&gt;render()&lt;/code&gt;函数来制作一个匹配的“真实”DOM树。
这就是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// JSX -&amp;gt; VDOM:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; vdom = &amp;lt;div id=&quot;foo&quot;&amp;gt;Hello!&amp;lt;/div&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// VDOM -&amp;gt; DOM:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dom = render(vdom);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// add the tree to &amp;lt;body&amp;gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(dom);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;Partials，迭代与逻辑：没有新的语法&quot;&gt;&lt;a href=&quot;#Partials，迭代与逻辑：没有新的语法&quot; class=&quot;headerlink&quot; title=&quot;Partials，迭代与逻辑：没有新的语法&quot;&gt;&lt;/a&gt;Partials，迭代与逻辑：没有新的语法&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;我们拥有所有的JavaScript语法，而不是模板语言引入的有限概念。（PS:这是JSX胜过模板语言的地方）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“Partials”是由无逻辑/有限逻辑模板引擎引入的概念，用于在不同的上下文中重复使用视图块。&lt;/p&gt;
&lt;p&gt;迭代似乎是每个新的模板语言都重新发明的东西（我和任何人一样有罪）。使用JSX，没有新的语法来学习：迭代您在JavaScript程序中的其他任何地方。您选择最适合给定任务迭代式的：&lt;code&gt;[].forEach()&lt;/code&gt;，&lt;code&gt;[].map()&lt;/code&gt;，&lt;code&gt;for&lt;/code&gt;和&lt;code&gt;while&lt;/code&gt;循环等&lt;/p&gt;
&lt;p&gt;逻辑，像迭代，是模板语言喜欢重新发明的东西。一方面，无逻辑模板在将逻辑嵌入到视图方法非常弱：有限的结构，如&lt;code&gt;\{\{ \#if value}}&lt;/code&gt;将逻辑推入控制器层，鼓励膨胀。这规避了构建语言来描述更复杂的逻辑，避免可预见性和安全隐患。&lt;/p&gt;
&lt;p&gt;在另一方面，使用代码生成（一种从粗略到不可原谅的技术）的引擎通常具有执行逻辑或甚至迭代任意JavaScript表达式的能力。这是一个很好的理由，不惜一切代价避免这种情况：您的代码被从原始位置（也许是一个模块，闭包或标记内）中剥离出来，并对“别的地方”评估。这对我来说是不可预测的或足够安全的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JSX允许所有 JavaScript的语言功能，而不依赖于在构建步骤中生成奇怪的代码，没有eval()和扩展。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将数组中的字符串以列表的形式展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; items = [&lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;baz&#39;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建列表li&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;item&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;text&lt;/span&gt;) &lt;/span&gt;&amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;lt;li&amp;gt;&amp;#123;text&amp;#125;&amp;lt;/li&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 一个使用迭代和复用的视图&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; list = render(  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123; items.map(item) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;render()&lt;/code&gt;返回一个DOM节点（在上述情况下是返回&lt;ul&gt;列表），所以我们只需要把它放到DOM中：&lt;/ul&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(list);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;把它放在一起&quot;&gt;&lt;a href=&quot;#把它放在一起&quot; class=&quot;headerlink&quot; title=&quot;把它放在一起&quot;&gt;&lt;/a&gt;把它放在一起&lt;/h2&gt;&lt;p&gt;以下是小型虚拟DOM渲染器和使用它的视图的完整源码。
具有一些样式的CodePen可在下面获得。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同样，我也写了一个例子：&lt;a href=&quot;https://github.com/Robin-front/code-code-hut/tree/master/jsx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;在任何地方使用JSX渲染DOM&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; ITEMS = &lt;span class=&quot;string&quot;&gt;&#39;hello there people&#39;&lt;/span&gt;.split(&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// turn an Array into list items:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; list = items =&amp;gt; items.map( p =&amp;gt; &amp;lt;li&amp;gt; &amp;#123;p&amp;#125; &amp;lt;/li&amp;gt; );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// view with a call out (&quot;partial&quot;) to generate a list from an Array:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; vdom = (  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;div id=&quot;foo&quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;p&amp;gt;Look, a simple JSX DOM renderer!&amp;lt;/p&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;ul&amp;gt;&amp;#123; list(ITEMS) &amp;#125;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// render() converts our &quot;virtual DOM&quot; (see below) to a real DOM tree:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; dom = render(vdom);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// append the new nodes somewhere:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(dom);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Remember that &quot;virtual DOM&quot;? It&#39;s just JSON - each &quot;VNode&quot; is an object with 3 properties.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; json = &lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;.stringify(vdom, &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;  &#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The whole process (JSX -&amp;gt; VDOM -&amp;gt; DOM) in one step:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    render( &amp;lt;pre id=&quot;vdom&quot;&amp;gt;&amp;#123; json &amp;#125;&amp;lt;/pre&amp;gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Codepen演示&quot;&gt;&lt;a href=&quot;#Codepen演示&quot; class=&quot;headerlink&quot; title=&quot;Codepen演示&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://codepen.io/developit/embed/aOYywe/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Codepen演示&lt;/a&gt;&lt;/h2&gt;&lt;iframe src=&quot;https://codepen.io/developit/embed/aOYywe/?height=600&amp;theme-id=16424&amp;default-tab=result&quot; frameborder=&quot;no&quot; crolling=&quot;no&quot; width=&quot;100%&quot; height=&quot;600&quot;&gt;&lt;/iframe&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;JSX实际上很简单：只需要花1分钟阅读这个，你会明白有关这个有趣的替代模板的一切。
    
    </summary>
    
      <category term="JSX" scheme="http://robin-front.github.io/categories/JSX/"/>
    
      <category term="react" scheme="http://robin-front.github.io/categories/JSX/react/"/>
    
    
      <category term="react" scheme="http://robin-front.github.io/tags/react/"/>
    
      <category term="JSX" scheme="http://robin-front.github.io/tags/JSX/"/>
    
  </entry>
  
  <entry>
    <title>RxJS事件桥接</title>
    <link href="http://robin-front.github.io/2017/05/05/RxJS%E4%BA%8B%E4%BB%B6%E6%A1%A5%E6%8E%A5/"/>
    <id>http://robin-front.github.io/2017/05/05/RxJS事件桥接/</id>
    <published>2017-05-05T08:51:51.000Z</published>
    <updated>2017-05-05T08:51:51.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;事件桥接&quot;&gt;&lt;a href=&quot;#事件桥接&quot; class=&quot;headerlink&quot; title=&quot;事件桥接&quot;&gt;&lt;/a&gt;事件桥接&lt;/h1&gt;&lt;p&gt;RxJS 提供工厂方法来桥接 DOM 或 Node.js 中已存在的异步数据源，所以，你可以使用丰富的创作、过滤和资源管理功能对RxJS提供的任何类型的数据流进行操作。这篇文章探讨 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/fromevent.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;fromEvent&lt;/code&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/fromeventpattern.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;fromEventPattern&lt;/code&gt;&lt;/a&gt;操作符，它允许导入一个 DOM 或者普通事件到 RxJS 的数据流。每次引发事件时，一个 &lt;code&gt;OnNext&lt;/code&gt; 消息将传递到数据流。然后，可以像其他任何数据流一样操作事件数据流。&lt;/p&gt;
&lt;p&gt;RxJS 不打算取代现有的异步编程模型如 &lt;code&gt;Promises&lt;/code&gt; 或 &lt;code&gt;callbacks&lt;/code&gt;。但是，当你尝试组合事件， RxJS的工厂方法会提供简便的方法给你，你完全感受不到当前使用了何种编程模式。这真的很方便维护（比如取消订阅）和筛选（比如选择合适的数据）数据源。在本节和下节中，你可以尝试 RxJS 的这些特性如何协助你完成异步编程。&lt;/p&gt;
&lt;p&gt;自然，RxJS 支持一批库和他们的勾子函数去使用他们的事件系统，比如 &lt;a href=&quot;http://jquery.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://zeptojs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zepto.js&lt;/a&gt;, &lt;a href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AngularJS&lt;/a&gt;, &lt;a href=&quot;http://emberjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ember.js&lt;/a&gt; 和 &lt;a href=&quot;http://backbonejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Backbone.js&lt;/a&gt;。这种行为，不管怎样只能重写本地绑定。默认情况下， RxJS 也支持 &lt;a href=&quot;http://nodejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt; &lt;code&gt;EventEmitter&lt;/code&gt; 的事件勾子。
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;将一个-DOM-事件转换成-RxJS-数据流&quot;&gt;&lt;a href=&quot;#将一个-DOM-事件转换成-RxJS-数据流&quot; class=&quot;headerlink&quot; title=&quot;将一个 DOM 事件转换成 RxJS 数据流&quot;&gt;&lt;/a&gt;将一个 DOM 事件转换成 RxJS 数据流&lt;/h2&gt;&lt;p&gt;接下来这个例子为鼠标移动事件创建了一个 DOM 事件操作，并且在页面上打印出鼠标的坐标。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;result&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;, e =&amp;gt; result.innerHTML = e.clientX + &lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt; + e.clientY, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;导入一个事件到 RxJS, 你可以使用 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/fromevent.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;fromEvent&lt;/code&gt;&lt;/a&gt; 操作符，并且传入被桥接的事件参数。然后它会将事件转换成数据流。&lt;/p&gt;
&lt;p&gt;下面这个例子，我们将 DOM 的 &lt;code&gt;mousemove&lt;/code&gt; 事件流转换成事件流（可观察对象）。每次鼠标移动事件被触发时，订阅都会接收到一个 &lt;code&gt;onNext&lt;/code&gt; 事件。然后我们可以检查这种通知的事件参数并获得鼠标的坐标。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;result&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.fromEvent(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(e =&amp;gt; result.innerHTML = e.clientX + &lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt; + e.clientY);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中要注意，（鼠标）移动变成一个数据流以便我们进一步操作。 &lt;a href=&quot;querying.md&quot;&gt;Querying Observable Sequences&lt;/a&gt; 这篇文章将会展示如何将该序列投射到点类型集合中并筛选其内容，以便应用程序只接收满足一定条件的值。&lt;/p&gt;
&lt;p&gt;事件处理程序的销毁由 &lt;code&gt;subscribe&lt;/code&gt; 方法返回的 &lt;code&gt;Disposable&lt;/code&gt; 对象处理。调用 &lt;code&gt;dispose&lt;/code&gt; 将会释放由该序列所使用的所有资源，包括底层事件处理程序。这本质上是取消订阅事件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fromEvent&lt;/code&gt; 方法还支持向多个项目添加事件处理程序，比如一整个 DOM 节点列表。下面这个例子将会给列表中的每个元素添加 ‘click’ 事件。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;result&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sources = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span class=&quot;string&quot;&gt;&#39;div&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.fromEvent(sources, &lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(e =&amp;gt; result.innerHTML = e.clientX + &lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt; + e.clientY);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，&lt;code&gt;fromEvent&lt;/code&gt; 也支持类库，像 &lt;a href=&quot;http://jquery.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://zeptojs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zepto.js&lt;/a&gt;, &lt;a href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AngularJS&lt;/a&gt;, &lt;a href=&quot;http://emberjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ember.js&lt;/a&gt; and &lt;a href=&quot;http://backbonejs.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Backbone.js&lt;/a&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $result = $(&lt;span class=&quot;string&quot;&gt;&#39;#result&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $sources = $(&lt;span class=&quot;string&quot;&gt;&#39;div&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.fromEvent($sources, &lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(e =&amp;gt; $result.html(e.clientX + &lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt; + e.clientY));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果表现不如预期，你可以通过设置 &lt;code&gt;Rx.config.useNativeEvents&lt;/code&gt; 为 &lt;code&gt;true&lt;/code&gt; 去重写它，这会无视任何类库。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 只使用原生事件，尽管引用了 jQuery&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Rx.config.useNativeEvents = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 只使用原生事件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;result&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.fromEvent(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(e =&amp;gt; result.innerHTML = e.clientX + &lt;span class=&quot;string&quot;&gt;&#39;, &#39;&lt;/span&gt; + e.clientY);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，您可以轻松地给事件系统的事件添加许多快捷方式，比如 &lt;code&gt;mousemove&lt;/code&gt;， 甚至是 &lt;a href=&quot;http://www.w3.org/TR/pointerevents/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Pointer&lt;/a&gt; and &lt;a href=&quot;http://www.w3.org/TR/touch-events/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Touch&lt;/a&gt; 事件。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Rx.dom = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; events = &lt;span class=&quot;string&quot;&gt;&quot;blur focus focusin focusout load resize scroll unload click dblclick &quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave &quot;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;change select submit keydown keypress keyup error contextmenu&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (root.PointerEvent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  events += &lt;span class=&quot;string&quot;&gt;&quot; pointerdown pointerup pointermove pointerover pointerout pointerenter pointerleave&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (root.TouchEvent) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  events += &lt;span class=&quot;string&quot;&gt;&quot; touchstart touchend touchmove touchcancel&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;events.split(&lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt;).forEach(e =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  Rx.dom[e] = (element, selector) =&amp;gt; Rx.Observable.fromEvent(element, e, selector)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们可以重写单个鼠标拖拽事件：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; draggable = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;draggable&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mousedrag = Rx.dom.mousedown(draggable).flatMap(md =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  md.preventDefault();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; start = getLocation(md);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Rx.dom.mousemove(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .map(mm =&amp;gt; getDelta(start, mm))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .takeUntil(Rx.dom.mouseup(draggable));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意这在 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS-DOM&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxJS-DOM&lt;/a&gt; 项目中已经可用，但你自己实现也只需要很少量的代码。&lt;/p&gt;
&lt;h2 id=&quot;将-Node-js-事件转换成-RxJS-数据流&quot;&gt;&lt;a href=&quot;#将-Node-js-事件转换成-RxJS-数据流&quot; class=&quot;headerlink&quot; title=&quot;将 Node.js 事件转换成 RxJS 数据流&quot;&gt;&lt;/a&gt;将 Node.js 事件转换成 RxJS 数据流&lt;/h2&gt;&lt;p&gt;Node.js 也支持类似 &lt;a href=&quot;http://nodejs.org/api/events.html#events_class_events_eventemitter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;EventEmitter&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Rx = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;rx&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  EventEmitter = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;events&#39;&lt;/span&gt;).EventEmitter;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; eventEmitter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; EventEmitter();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.fromEvent(eventEmitter, &lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(data =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;data: &#39;&lt;/span&gt; + data));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eventEmitter.emit(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;foo&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; data: foo&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用-FromEventPattern-桥接自定义事件&quot;&gt;&lt;a href=&quot;#使用-FromEventPattern-桥接自定义事件&quot; class=&quot;headerlink&quot; title=&quot;使用 FromEventPattern 桥接自定义事件&quot;&gt;&lt;/a&gt;使用 FromEventPattern 桥接自定义事件&lt;/h2&gt;&lt;p&gt;下面有一个使用类库实现事件订阅和退订的实例。&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/fromeventpattern.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;fromEventPattern&lt;/code&gt;&lt;/a&gt; 方法就是为了这个目的而创建的，用来桥接这些自定义事件。&lt;/p&gt;
&lt;p&gt;举个例子，你可以想使用 jQuery &lt;a href=&quot;http://api.jquery.com/on/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;on&lt;/code&gt;&lt;/a&gt; 方法去桥接。我们可以将下列代码转换为基于表格行单击的 alert。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$( &lt;span class=&quot;string&quot;&gt;&quot;#dataTable tbody&quot;&lt;/span&gt; ).on(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;tr&#39;&lt;/span&gt;, e =&amp;gt; alert($( e.target ).text()));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 &lt;code&gt;fromEventPattern&lt;/code&gt; 方法转换后的代码看起来像下面这样。每个函数在处理函数中传递，允许您调用 &lt;code&gt;on&lt;/code&gt; 和 &lt;code&gt;off&lt;/code&gt; 方法来正确处理事件的处理。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $tbody = $(&lt;span class=&quot;string&quot;&gt;&#39;#dataTable tbody&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.fromEventPattern(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addHandler&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;h&lt;/span&gt;) &lt;/span&gt;&amp;#123; $tbody.on(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;tr&#39;&lt;/span&gt;, h); &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;delHandler&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;h&lt;/span&gt;) &lt;/span&gt;&amp;#123; $tbody.off(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;tr&#39;&lt;/span&gt;, h); &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(e =&amp;gt; alert($( e.target ).text()));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;除了这种常用的支持外，我们也支持 &lt;code&gt;addHandler&lt;/code&gt; 返回一个对象，它可以通过 &lt;code&gt;removeHandler&lt;/code&gt; 去完全退订。在这个例子中，我们将使用 &lt;a href=&quot;http://dojotoolkit.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dojo Toolkit&lt;/a&gt; 和 &lt;a href=&quot;http://dojotoolkit.org/api/1.9/dojo/on.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;on&lt;/code&gt;&lt;/a&gt; 模块。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;([&lt;span class=&quot;string&quot;&gt;&#39;dojo/on&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;dojo/dom&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;rx&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;rx.async&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;rx.binding&#39;&lt;/span&gt;], (on, dom, rx) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; input = dom.byId(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.fromEventPattern(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addHandler&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;h&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; on(input, &lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, h);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;delHandler&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;_, signal&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            signal.remove();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Next: Clicked!&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        err =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Error: &#39;&lt;/span&gt; + err),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Completed&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    on.emit(input, &lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Next: Clicked!&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;相关内容&quot;&gt;&lt;a href=&quot;#相关内容&quot; class=&quot;headerlink&quot; title=&quot;相关内容&quot;&gt;&lt;/a&gt;相关内容&lt;/h2&gt;&lt;p&gt;概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;querying_observable_sequences.md&quot;&gt;Querying Observable Sequences&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://robin-front.github.io/RxJS-doc-chinese/content/getting_started_with_rxjs/creating_and_querying_observable_sequences/bridging_to_events.html&quot;&gt;本文翻译在: RxJS中文文档&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;事件桥接&quot;&gt;&lt;a href=&quot;#事件桥接&quot; class=&quot;headerlink&quot; title=&quot;事件桥接&quot;&gt;&lt;/a&gt;事件桥接&lt;/h1&gt;&lt;p&gt;RxJS 提供工厂方法来桥接 DOM 或 Node.js 中已存在的异步数据源，所以，你可以使用丰富的创作、过滤和资源管理功能对RxJS提供的任何类型的数据流进行操作。这篇文章探讨 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/fromevent.md&quot;&gt;&lt;code&gt;fromEvent&lt;/code&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/fromeventpattern.md&quot;&gt;&lt;code&gt;fromEventPattern&lt;/code&gt;&lt;/a&gt;操作符，它允许导入一个 DOM 或者普通事件到 RxJS 的数据流。每次引发事件时，一个 &lt;code&gt;OnNext&lt;/code&gt; 消息将传递到数据流。然后，可以像其他任何数据流一样操作事件数据流。&lt;/p&gt;
&lt;p&gt;RxJS 不打算取代现有的异步编程模型如 &lt;code&gt;Promises&lt;/code&gt; 或 &lt;code&gt;callbacks&lt;/code&gt;。但是，当你尝试组合事件， RxJS的工厂方法会提供简便的方法给你，你完全感受不到当前使用了何种编程模式。这真的很方便维护（比如取消订阅）和筛选（比如选择合适的数据）数据源。在本节和下节中，你可以尝试 RxJS 的这些特性如何协助你完成异步编程。&lt;/p&gt;
&lt;p&gt;自然，RxJS 支持一批库和他们的勾子函数去使用他们的事件系统，比如 &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://zeptojs.com/&quot;&gt;Zepto.js&lt;/a&gt;, &lt;a href=&quot;https://angularjs.org/&quot;&gt;AngularJS&lt;/a&gt;, &lt;a href=&quot;http://emberjs.com/&quot;&gt;Ember.js&lt;/a&gt; 和 &lt;a href=&quot;http://backbonejs.org&quot;&gt;Backbone.js&lt;/a&gt;。这种行为，不管怎样只能重写本地绑定。默认情况下， RxJS 也支持 &lt;a href=&quot;http://nodejs.org&quot;&gt;Node.js&lt;/a&gt; &lt;code&gt;EventEmitter&lt;/code&gt; 的事件勾子。
    
    </summary>
    
      <category term="RxJS" scheme="http://robin-front.github.io/categories/RxJS/"/>
    
    
      <category term="RxJS" scheme="http://robin-front.github.io/tags/RxJS/"/>
    
      <category term="bridging" scheme="http://robin-front.github.io/tags/bridging/"/>
    
      <category term="event" scheme="http://robin-front.github.io/tags/event/"/>
    
  </entry>
  
  <entry>
    <title>使用RxJS创建和订阅单一数据流</title>
    <link href="http://robin-front.github.io/2017/05/04/%E5%88%9B%E5%BB%BA%E5%92%8C%E8%AE%A2%E9%98%85%E5%8D%95%E4%B8%80%E6%95%B0%E6%8D%AE%E6%B5%81/"/>
    <id>http://robin-front.github.io/2017/05/04/创建和订阅单一数据流/</id>
    <published>2017-05-04T10:06:14.000Z</published>
    <updated>2017-05-04T10:06:14.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://robin-front.gitbooks.io/rxjs-doc-chinese/content/content/getting_started_with_rxjs/creating_and_querying_observable_sequences/creating_and_subscribing_to_simple_observable_sequences.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;来自&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;创建和订阅单一可观察序列&quot;&gt;&lt;a href=&quot;#创建和订阅单一可观察序列&quot; class=&quot;headerlink&quot; title=&quot;创建和订阅单一可观察序列&quot;&gt;&lt;/a&gt;创建和订阅单一可观察序列&lt;/h1&gt;&lt;p&gt;你不需要去实现 &lt;code&gt;Observable&lt;/code&gt; 类去创建一个可观察序列。 同样的，你也不需要去实现 &lt;code&gt;Observer&lt;/code&gt; 去订阅数据流。通过安装 Rx 库，你可以利用 &lt;code&gt;Observable&lt;/code&gt;类型，它提供了许多操作符来根据零个，一个或多个元素去创建一个数据流。另外， RxJS 还提供 &lt;code&gt;subscribe&lt;/code&gt; 方法允许你使用 &lt;code&gt;onNext&lt;/code&gt;, &lt;code&gt;onError&lt;/code&gt; 和 &lt;code&gt;onCompleted&lt;/code&gt; 函数。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;从零创建一个数据流&quot;&gt;&lt;a href=&quot;#从零创建一个数据流&quot; class=&quot;headerlink&quot; title=&quot;从零创建一个数据流&quot;&gt;&lt;/a&gt;从零创建一个数据流&lt;/h2&gt;&lt;p&gt;在使用操作符之前，让我们看一看怎样使用 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/create.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Rx.Observable.create&lt;/code&gt;&lt;/a&gt; 方法从零创建 &lt;code&gt;Observable&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;首先， 我们需要确认引用了 &lt;code&gt;rx.js&lt;/code&gt; 核心文件。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;rx.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们使用 &lt;a href=&quot;http://node.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;， 我们可以这样引入:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Rx = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;rx&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中， 我们将只产生一个单一值42，然后标记为完成。 如果不需要清除，返回值是完全可选的。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.create(observer =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 产生一个单一值然后完成。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  observer.onNext(&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  observer.onCompleted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 任何清除的逻辑写在这里&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;disposed&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onNext: %s&#39;&lt;/span&gt;, x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onError: %s&#39;&lt;/span&gt;, e),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onCompleted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;subscription.dispose();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; disposed&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于大多数操作， 这完全是多余的，但这展示了非常基础的大部分 RxJS 操作符是如何工作的。&lt;/p&gt;
&lt;h2 id=&quot;创建及订阅单一数据流&quot;&gt;&lt;a href=&quot;#创建及订阅单一数据流&quot; class=&quot;headerlink&quot; title=&quot;创建及订阅单一数据流&quot;&gt;&lt;/a&gt;创建及订阅单一数据流&lt;/h2&gt;&lt;p&gt;接下来的例子使用 &lt;code&gt;Observable&lt;/code&gt; 类的 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/range.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;range&lt;/code&gt;&lt;/a&gt; 操作符来创建一个包含一些数字的单一数据流。观察者使用 &lt;code&gt;Observable&lt;/code&gt; 类的 &lt;code&gt;Subscribe&lt;/code&gt; 订阅这个数据流集合， 并且处理回调 &lt;code&gt;onNext&lt;/code&gt;, &lt;code&gt;onError&lt;/code&gt; and &lt;code&gt;onCompleted&lt;/code&gt;。在我们的例子中，创建了一个从 x 开始的整数序列，然后接下来产生 y 个。&lt;/p&gt;
&lt;p&gt;只要订阅了数据流，数据就会发送给观察者。&lt;code&gt;onNext&lt;/code&gt;函数会打印出这个值。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个从 1 开始，包含 5 个整数的数据流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 打印每个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onNext: %s&#39;&lt;/span&gt;, x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onError: %s&#39;&lt;/span&gt;, e),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onCompleted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当一个观察者订阅了一个数据流， &lt;code&gt;subscribe&lt;/code&gt; 方法背后使用的异步操作取决于操作符。因些， &lt;code&gt;subscribe&lt;/code&gt; 的调用是异步的，因为调用者在完成序列观察之前不会被阻塞。这篇文章 &lt;a href=&quot;schedulers.md&quot;&gt;Using Schedulers&lt;/a&gt; 提供了更多信息。&lt;/p&gt;
&lt;p&gt;注意 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/susbcribe.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;subscribe&lt;/code&gt;&lt;/a&gt; 方法返回一个 &lt;code&gt;Disposable&lt;/code&gt;，所以你可以很容易地退订和销毁它。当你在可观察对象上调用 &lt;code&gt;dispose&lt;/code&gt; 方法时，观察者将会停止监听数据流。正常来说，你不需要精确地调用 &lt;code&gt;dispose&lt;/code&gt; 除非你需要提前退订，或者当数据流的生命周期比观察者的还长。 Rx 的订阅被设计成 &lt;code&gt;触发-丢弃&lt;/code&gt; 的场景，并不需要终结者。注意到，可观察对象的操作符的默认表现是 只要有可能（比如，&lt;code&gt;onCompleted&lt;/code&gt; 或 &lt;code&gt;onError&lt;/code&gt; 消息被发送时），订阅就会被销毁。举个例子，下面的代码将会订阅 a 和 b 两个数据流。如果 a 抛出一个错误， x 会立即退订 b 。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = Rx.Observable.zip(a, b, (a1, b1) =&amp;gt; a1 + b1).subscribe();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还可以调整代码示例以使用观察者的 &lt;code&gt;Create&lt;/code&gt; 运算符，创建并从指定的 &lt;code&gt;OnNext&lt;/code&gt;, &lt;code&gt;OnError&lt;/code&gt;, 和 &lt;code&gt;OnCompleted&lt;/code&gt; 回调返回一个观察者。然后你可以传递 &lt;code&gt;observer&lt;/code&gt; 给 &lt;code&gt;observable&lt;/code&gt; 的 &lt;code&gt;subscribe&lt;/code&gt; 方法。下面的例子展示了这种写法。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建包含 5个整数的数据流，从 1 开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建观察者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; observer = Rx.Observer.create(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onNext: %s&#39;&lt;/span&gt;, x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onError: %s&#39;&lt;/span&gt;, e),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 打印每个结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(observer);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onCompleted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，从零创建一个数据流，你也可以将已存在的 数据， 事件，回调以及 &lt;code&gt;promise&lt;/code&gt; 转换成数据流。下一节的主题将会教你怎么做。&lt;/p&gt;
&lt;p&gt;注意，这一节只展示了可以从零创建数据流的很少一部分操作符。学习更多其他的  &lt;code&gt;LINQ&lt;/code&gt; 操作符， 可以查看 &lt;a href=&quot;querying_observable_squences.md&quot;&gt;Querying Observable Sequences&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;使用定时器&quot;&gt;&lt;a href=&quot;#使用定时器&quot; class=&quot;headerlink&quot; title=&quot;使用定时器&quot;&gt;&lt;/a&gt;使用定时器&lt;/h2&gt;&lt;p&gt;接下来的例子使用 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/timer.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;timer&lt;/code&gt;&lt;/a&gt; 操作符去创建一个数据流。 这个数据流将在5秒后输出第一个值，接着每1秒输出后面的值。为了说明， 我们配合 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/timestamp.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/a&gt; 操作符去查询，使每一个被推出来的值将在发布时追加时间戳。这样，当我们订阅这个数据源时，我们可以接收到值和时间戳。&lt;/p&gt;
&lt;p&gt;首先，我们需要确认我们是否在浏览器引入了相关的文件。注意 RxJS NPM 包已经默认包含了所有操作符。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;rx.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;rx.time.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面是我们的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Current time: &#39;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.timer(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;/* 5 秒 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 1 秒 */&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   .timestamp();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(x.value + &lt;span class=&quot;string&quot;&gt;&#39;: &#39;&lt;/span&gt; + x.timestamp));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 输出可能像这样子 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Current time: 1382560697820&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 0: 1382560702820&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1: 1382560703820&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2: 1382560704820&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过使用 &lt;code&gt;timestamp&lt;/code&gt; 操作符，我们可以证实，第一个值确实是开始5秒后输出，然后每1秒输出一个值。&lt;/p&gt;
&lt;h2 id=&quot;将数组和可迭代对象转换为数据流&quot;&gt;&lt;a href=&quot;#将数组和可迭代对象转换为数据流&quot; class=&quot;headerlink&quot; title=&quot;将数组和可迭代对象转换为数据流&quot;&gt;&lt;/a&gt;将数组和可迭代对象转换为数据流&lt;/h2&gt;&lt;p&gt;使用 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/from.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Rx.Observable.from&lt;/code&gt;&lt;/a&gt; 操作符，你可以将一个数组转换为数据流。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; array = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将数组转换为数据流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.from(array);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出每个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onNext: %s&#39;&lt;/span&gt;, x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onError: %s&#39;&lt;/span&gt;, e),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onCompleted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以转换类数组结构，比如包含 &lt;code&gt;length&lt;/code&gt; 属性和数字索引的对象。这种情况下，我们只简单有一个包含长度为5的对象。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arrayLike = &amp;#123; length: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 转换数组为数据流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.from(arrayLike, (v, k) =&amp;gt; k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 输出每个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onNext: %s&#39;&lt;/span&gt;, x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onError: %s&#39;&lt;/span&gt;, e),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onCompleted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;另外，我们也可以使用 ES6 可迭代对象，如 &lt;code&gt;Map&lt;/code&gt; 和 &lt;code&gt;Set&lt;/code&gt; 使用 &lt;code&gt;from&lt;/code&gt; 转换成数据流。下面这个例子，我们将获取一个 &lt;code&gt;Set&lt;/code&gt; 对象，并且将它转换成数据流。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; set = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Set&lt;/span&gt;([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 转换 Set 为数据流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.from(set);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 转出每个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onNext: %s&#39;&lt;/span&gt;, x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onError: %s&#39;&lt;/span&gt;, e),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onCompleted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们也可以将它应用在 &lt;code&gt;Map&lt;/code&gt; 对象上面。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; map = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Map&lt;/span&gt;([[&lt;span class=&quot;string&quot;&gt;&#39;key1&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], [&lt;span class=&quot;string&quot;&gt;&#39;key2&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将 Map 转换成数据流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.from(map);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 打印每个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onNext: %s&#39;&lt;/span&gt;, x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onError: %s&#39;&lt;/span&gt;, e),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: key1, 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: key2, 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onCompleted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;from&lt;/code&gt; 方法也支持 ES6 generators，可以你的浏览器已经支持，或将要支持。这允许我们实现一些像 &lt;code&gt;斐波那契序列&lt;/code&gt; 等，并将它们转换成数据流。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;* &lt;span class=&quot;title&quot;&gt;fibonacci&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn1 = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fn2 = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; current = fn2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fn2 = fn1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fn1 = fn1 + current;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; current;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将 generator 转换成数据流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.from(fibonacci()).take(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 打印每个值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onNext: %s&#39;&lt;/span&gt;, x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onError: %s&#39;&lt;/span&gt;, e),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onNext: 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; onCompleted&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;冷（惰性）-vs-热（非惰性）-数据流&quot;&gt;&lt;a href=&quot;#冷（惰性）-vs-热（非惰性）-数据流&quot; class=&quot;headerlink&quot; title=&quot;冷（惰性） vs. 热（非惰性） 数据流&quot;&gt;&lt;/a&gt;冷（惰性） vs. 热（非惰性） 数据流&lt;/h2&gt;&lt;p&gt;冷数据流的开始运行取决于订阅，比如，数据流只有当 &lt;code&gt;subscribe&lt;/code&gt; 调用的时候才开始输出值。用户之间也没有共享值。这些是与热数据流的不同之处，热数据像流鼠标移动事件或股票代码这样的订阅时就已经不断输出值。当观察者订阅热数据流时，它将会获取流的实时值。热数据流是与所有订阅者共享的，每个订阅者按顺序推送下一个值。举个例子，就算没有人订阅一个特定的股票，股票市场也将继续根据市场动向更新其价值。当有注册者对这支股票感兴趣时，它会自动获得股票的最新值。&lt;/p&gt;
&lt;p&gt;下面的示例演示了一个冷数据流。这个例子中，我们使用了 &lt;code&gt;Interval&lt;/code&gt; 操作符去创建一个单一数据流并在特定的时间间隔输出值，这个例子中是间隔1秒。&lt;/p&gt;
&lt;p&gt;两个观察者订阅这个数据流并打印输出值。你会注意到数据流会为每个订阅者重置，第二个订阅者也是从第1个值开始的。&lt;/p&gt;
&lt;p&gt;首先，我们需要确保在浏览器中引入了相关文件。注意 RxJS NPM 包已经默认包含了所有操作符。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;rx.lite.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后是例子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.interval(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription1 = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Observer 1: onNext: &#39;&lt;/span&gt; + x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Observer 1: onError: &#39;&lt;/span&gt; + e.message),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Observer 1: onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription2 = source.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Observer 2: onNext: &#39;&lt;/span&gt; + x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Observer 2: onError: &#39;&lt;/span&gt; + e.message),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Observer 2: onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  subscription1.dispose();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  subscription2.dispose();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 2: onNext: 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 2: onNext: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 2: onNext: 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 2: onNext: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来的例子中，我们使用 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/publish.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;publish&lt;/code&gt;&lt;/a&gt; 操作符将前面的冷数据源转换成热数据源，返回一个 &lt;code&gt;ConnectableObservable&lt;/code&gt; 实例，我们称为 &lt;code&gt;hot&lt;/code&gt;。&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/publish.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;publish&lt;/code&gt;&lt;/a&gt; 操作符通过向多个订阅服务器广播单个订阅来提供共享订阅的机制。&lt;code&gt;hot&lt;/code&gt;变量作为代理订阅 &lt;code&gt;source&lt;/code&gt;，因为它从 &lt;code&gt;source&lt;/code&gt; 接收值，推到自己的用户. 我们使用 &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/api/core/operators/connect.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;ConnectableObservable.prototype.connect&lt;/code&gt;&lt;/a&gt; 建立订阅的备份源，并开始接收值。因为 &lt;code&gt;ConnectableObservable&lt;/code&gt; 继承自 &lt;code&gt;Observable&lt;/code&gt;， 我们可以在它运行之前使用 &lt;code&gt;subscribe&lt;/code&gt; 去订阅这个热数据流。 在这个例子中要注意，当 &lt;code&gt;subscription1&lt;/code&gt;订阅它的时候热数据流还没有开始。因些，没有值输出给订阅者。只有调用 &lt;code&gt;Connect&lt;/code&gt; 之后，输出值才会推送给 &lt;code&gt;subscription1&lt;/code&gt;。3秒的延迟之后，&lt;code&gt;subscription2&lt;/code&gt; 订阅了热数据流，并且立即开始接收当前输出值（当前值是3），一直到最后。输出结果看起来像这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Current time: 1382562433256&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Current Time after 1st subscription: 1382562433260&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Current Time after connect: 1382562436261&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Current Time after 2nd subscription: 1382562439262&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 2: onNext: 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 2: onNext: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 2: onNext: 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先，我们需要确认我们引入了相关文件。注意 RxJS NPM包已经默认包含了所有操作符。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;rx.lite.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来是例子！&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Current time: &#39;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 创建一个数据流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; source = Rx.Observable.interval(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将数据流转换成热数据流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hot = source.publish();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 第一个订阅时没有值输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription1 = hot.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Observer 1: onNext: %s&#39;&lt;/span&gt;, x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Observer 1: onError: %s&#39;&lt;/span&gt;, e),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Observer 1: onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Current Time after 1st subscription: &#39;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 空闲 3 秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setTimeout(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 热数据源连接并开始输出值给订阅者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  hot.connect();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Current Time after connect: &#39;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 又空闲 3 秒&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  setTimeout(() =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Current Time after 2nd subscription: &#39;&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;.now());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subscription2 = hot.subscribe(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      x =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Observer 2: onNext: %s&#39;&lt;/span&gt;, x),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      e =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Observer 2: onError: %s&#39;&lt;/span&gt;, e),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      () =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Observer 2: onCompleted&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Current Time after connect: 1431197578426&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Current Time after 2nd subscription: 1431197581434&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 2: onNext: 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 2: onNext: 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 1: onNext: 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; Observer 2: onNext: 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;类推&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这有助于思考冷热数据源的关系，就像一个人看（&lt;code&gt;subscribe&lt;/code&gt;）电影和表演。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;冷数据流：电影。&lt;/li&gt;
&lt;li&gt;热数据流：现场演出&lt;/li&gt;
&lt;li&gt;重播热数据流：录播现场演出&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你管你何时观看电影，你看电影和别人看都是独立的，尽管所有观看者看的都是相同的内容。另一方面，一个表演是与多个观看都一起分享的。如果你迟到了，你将会错过一部分。不管怎样，如果记录下来了（在 RxJS中可以使用 &lt;code&gt;BehaviorSubject&lt;/code&gt; 或 &lt;code&gt;ReplaySubject&lt;/code&gt;），你也可像看电影一样看现场演出。&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/refcount.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;.publish().refCount()&lt;/code&gt;&lt;/a&gt; 现场表演是艺术家在没有人观看的情况下退出比赛，当观众中至少有一人出现时，他会重新开始演奏。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://robin-front.gitbooks.io/rxjs-doc-chinese/content/content/getting_started_with_rxjs/creating_and_querying_observable_sequences/creating_and_subscribing_to_simple_observable_sequences.html&quot;&gt;来自&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;创建和订阅单一可观察序列&quot;&gt;&lt;a href=&quot;#创建和订阅单一可观察序列&quot; class=&quot;headerlink&quot; title=&quot;创建和订阅单一可观察序列&quot;&gt;&lt;/a&gt;创建和订阅单一可观察序列&lt;/h1&gt;&lt;p&gt;你不需要去实现 &lt;code&gt;Observable&lt;/code&gt; 类去创建一个可观察序列。 同样的，你也不需要去实现 &lt;code&gt;Observer&lt;/code&gt; 去订阅数据流。通过安装 Rx 库，你可以利用 &lt;code&gt;Observable&lt;/code&gt;类型，它提供了许多操作符来根据零个，一个或多个元素去创建一个数据流。另外， RxJS 还提供 &lt;code&gt;subscribe&lt;/code&gt; 方法允许你使用 &lt;code&gt;onNext&lt;/code&gt;, &lt;code&gt;onError&lt;/code&gt; 和 &lt;code&gt;onCompleted&lt;/code&gt; 函数。&lt;/p&gt;
    
    </summary>
    
      <category term="RxJS" scheme="http://robin-front.github.io/categories/RxJS/"/>
    
    
      <category term="RxJS" scheme="http://robin-front.github.io/tags/RxJS/"/>
    
      <category term="Observable" scheme="http://robin-front.github.io/tags/Observable/"/>
    
  </entry>
  
  <entry>
    <title>Coverage针对js和css的代码覆盖检测-Chrome_devtools的新功能</title>
    <link href="http://robin-front.github.io/2017/04/06/Coverage%E9%92%88%E5%AF%B9js%E5%92%8Ccss%E7%9A%84%E4%BB%A3%E7%A0%81%E8%A6%86%E7%9B%96%E6%A3%80%E6%B5%8B-Chrome-devtools%E7%9A%84%E6%96%B0%E5%8A%9F%E8%83%BD/"/>
    <id>http://robin-front.github.io/2017/04/06/Coverage针对js和css的代码覆盖检测-Chrome-devtools的新功能/</id>
    <published>2017-04-06T03:21:26.000Z</published>
    <updated>2017-04-06T03:21:26.000Z</updated>
    
    <content type="html">&lt;p&gt;也许你之前用过一些像 &lt;code&gt;css usage&lt;/code&gt;、&lt;code&gt;css used&lt;/code&gt; 这样的浏览器插件去检测代码覆盖率。但现在，Chrome的实验版本&lt;a href=&quot;https://www.google.com/chrome/browser/canary.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Canary&lt;/a&gt;终于实现了代码覆盖率检测，这意味着它将很快普及到正式版本。这是一个令人兴奋的功能，在使用JavaScript和CSS时非常有用，所以我会做一个快速的演示，并探索它如何使用。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;它做了些什么事情&quot;&gt;&lt;a href=&quot;#它做了些什么事情&quot; class=&quot;headerlink&quot; title=&quot;它做了些什么事情&quot;&gt;&lt;/a&gt;它做了些什么事情&lt;/h2&gt;&lt;p&gt;代码覆盖可以在您运行您的Web应用程序的时候，遍历每个JS / CSS文件，看看哪些代码行运行，哪些代码没有运行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*gD8lX40PSemDOZgvT695Mg.png&quot; alt=&quot;coverage&quot;&gt;&lt;/p&gt;
&lt;p&gt;在这里，我做了一个简单的静态网页，Chrome生成了页面上存在的CSS和JS文件的问题汇总。右侧的栏显示每个文件的相对大小，红色表示未使用的代码，绿色显示运行的代码。&lt;/p&gt;
&lt;p&gt;记录代码覆盖范围与devtools时间轴类似，您点击开始记录，然后在您的站点进行正常的交互。完成后，Chrome会进行一些计算并生成读数。在这里，我很好奇网站上有多少未使用的CSS，所以我导航到各个子页面，以确保我触及到每个css。果然，这里有很多改进的空间，因为我的网站上的css的97％没有使用！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1200/1*1SUTeKlhRee3MyKdxkUGtQ.png&quot; alt=&quot;coverage&quot;&gt;&lt;/p&gt;
&lt;p&gt;Chrome还可让您深入研究单个文件的代码范围。在这里，左边的红色/绿色条显示哪一行执行了，哪一行没有。请注意，当检查最小化的文件时，可以按文件左下角的按钮来“&lt;code&gt;prettify&lt;/code&gt;”代码。&lt;/p&gt;
&lt;h2 id=&quot;这有什么用&quot;&gt;&lt;a href=&quot;#这有什么用&quot; class=&quot;headerlink&quot; title=&quot;这有什么用&quot;&gt;&lt;/a&gt;这有什么用&lt;/h2&gt;&lt;p&gt;在一个复杂的或长期的项目上工作时，很容易积累冗余代码。如果你使用 &lt;code&gt;webpack&lt;/code&gt; 或另一个JS构建系统，可以防止大多数无用的JS代码。但是对于CSS来说，这样做可能会有点棘手。有了这个覆盖工具，在Chrome是一个伟大的方式来快速了解多少冗余的代码在运行，哪些文件需要优化。&lt;/p&gt;
&lt;h2 id=&quot;如何才能使用它&quot;&gt;&lt;a href=&quot;#如何才能使用它&quot; class=&quot;headerlink&quot; title=&quot;如何才能使用它&quot;&gt;&lt;/a&gt;如何才能使用它&lt;/h2&gt;&lt;p&gt;下载Chrome的实验版本&lt;a href=&quot;https://www.google.com/chrome/browser/canary.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Canary&lt;/a&gt;或等待此功能更新到正式版本。&lt;/p&gt;
&lt;p&gt;【译文参考】：&lt;a href=&quot;https://blog.logrocket.com/using-the-chrome-devtools-new-code-coverage-feature-ca96c3dddcaf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.logrocket.com/using-the-chrome-devtools-new-code-coverage-feature-ca96c3dddcaf&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;也许你之前用过一些像 &lt;code&gt;css usage&lt;/code&gt;、&lt;code&gt;css used&lt;/code&gt; 这样的浏览器插件去检测代码覆盖率。但现在，Chrome的实验版本&lt;a href=&quot;https://www.google.com/chrome/browser/canary.html&quot;&gt;Canary&lt;/a&gt;终于实现了代码覆盖率检测，这意味着它将很快普及到正式版本。这是一个令人兴奋的功能，在使用JavaScript和CSS时非常有用，所以我会做一个快速的演示，并探索它如何使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Chrome_devtools" scheme="http://robin-front.github.io/categories/Chrome-devtools/"/>
    
      <category term="javascript" scheme="http://robin-front.github.io/categories/Chrome-devtools/javascript/"/>
    
    
      <category term="coverage" scheme="http://robin-front.github.io/tags/coverage/"/>
    
      <category term="Chrome_devtools" scheme="http://robin-front.github.io/tags/Chrome-devtools/"/>
    
  </entry>
  
  <entry>
    <title>学习RxJS需要知道的奇淫技巧</title>
    <link href="http://robin-front.github.io/2017/04/05/%E5%AD%A6%E4%B9%A0RxJS%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E5%A5%87%E6%B7%AB%E6%8A%80%E5%B7%A7/"/>
    <id>http://robin-front.github.io/2017/04/05/学习RxJS需要知道的奇淫技巧/</id>
    <published>2017-04-05T09:06:03.000Z</published>
    <updated>2017-04-05T09:06:03.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;使用-Rx-的奇淫技巧&quot;&gt;&lt;a href=&quot;#使用-Rx-的奇淫技巧&quot; class=&quot;headerlink&quot; title=&quot;使用 Rx 的奇淫技巧&quot;&gt;&lt;/a&gt;使用 Rx 的奇淫技巧&lt;/h1&gt;&lt;h3 id=&quot;尝试画珠宝图&quot;&gt;&lt;a href=&quot;#尝试画珠宝图&quot; class=&quot;headerlink&quot; title=&quot;尝试画珠宝图&quot;&gt;&lt;/a&gt;尝试画珠宝图&lt;/h3&gt;&lt;p&gt;为你想创建的流画一个珠宝图。 通过画珠宝图，你将会很清楚你应该使用哪些操作符。&lt;/p&gt;
&lt;p&gt;珠宝图就是每个珠宝表示当前的一个事件或状态。珠宝图需要包含输入和输出流。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Reactive-Extensions/RxJS/master/doc/designguidelines/images/throttleWithTimeout.png&quot; alt=&quot;throttleWithSelector&quot;&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;通过画珠宝图，我们可以看到，我们在异步调用事件回调之前，需要延迟检测用户的输入。在这个例图里展示的是&lt;code&gt;throttle&lt;/code&gt;操作符的延迟。从一个流创建另一个流，我们会使用 &lt;code&gt;flatMap&lt;/code&gt; 或 &lt;code&gt;selectMany&lt;/code&gt; 操作符。然后就有了下面的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; dictionarySuggest = userInput.throttle(&lt;span class=&quot;number&quot;&gt;250&lt;/span&gt;).flatMap(input =&amp;gt; serverCall(input));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;何时忽略这条指南&quot;&gt;&lt;a href=&quot;#何时忽略这条指南&quot; class=&quot;headerlink&quot; title=&quot;何时忽略这条指南&quot;&gt;&lt;/a&gt;何时忽略这条指南&lt;/h4&gt;&lt;p&gt;如果你感觉你已经可以很熟练地编写出你想要的流，你可以省去画珠宝图这一步。不管怎样，就算是 Rx 团队的成员在写代码的时候也仍然会先画一画珠宝图。&lt;/p&gt;
&lt;h3 id=&quot;调用-subscribe-时传递多个参数&quot;&gt;&lt;a href=&quot;#调用-subscribe-时传递多个参数&quot; class=&quot;headerlink&quot; title=&quot;调用 subscribe 时传递多个参数&quot;&gt;&lt;/a&gt;调用 &lt;code&gt;subscribe&lt;/code&gt; 时传递多个参数&lt;/h3&gt;&lt;p&gt;为了方便， Rx 提供一个&lt;code&gt;subscribe&lt;/code&gt;方法来加载观察者的回调函数。&lt;/p&gt;
&lt;p&gt;观察者只需要实现这三个方法（&lt;code&gt;onNext&lt;/code&gt;, &lt;code&gt;onError&lt;/code&gt; &amp;amp; &lt;code&gt;onCompleted&lt;/code&gt;）。 &lt;code&gt;subscribe&lt;/code&gt;方法的扩展允许开发人员使用这些方法的默认选项。&lt;/p&gt;
&lt;p&gt;比如： 当调用&lt;code&gt;subscribe&lt;/code&gt;方法时只有一个&lt;code&gt;onNext&lt;/code&gt;参数，&lt;code&gt;onError&lt;/code&gt;将捕获来自事件流的异常。&lt;code&gt;onCompleted&lt;/code&gt;在这里什么也不会做。&lt;/p&gt;
&lt;p&gt;大部分情况下，处理异常是很重要的（不管是对于恢复还是中断应用程序）。&lt;/p&gt;
&lt;p&gt;知道事件流是否完成也经常是很重要的。举个例子，告诉用户他的操作是否完成了。&lt;/p&gt;
&lt;p&gt;所以，最好提供完整的三个参数给 &lt;code&gt;subscribe&lt;/code&gt; 操作符。&lt;/p&gt;
&lt;p&gt;RxJS还提供了三种方便的方法，其仅订阅所期望的序列的一部分。其他的处理程序会默认为原来的行为。有三个这样的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;subscribeOnNext&lt;/code&gt;: 只对应 &lt;code&gt;onNext&lt;/code&gt; 消息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subscribeOnError&lt;/code&gt;: 只对应 &lt;code&gt;onError&lt;/code&gt; 消息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subscribeOnCompleted&lt;/code&gt;: 只对应 &lt;code&gt;onCompleted&lt;/code&gt; 消息.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;何时忽略这条指南-1&quot;&gt;&lt;a href=&quot;#何时忽略这条指南-1&quot; class=&quot;headerlink&quot; title=&quot;何时忽略这条指南&quot;&gt;&lt;/a&gt;何时忽略这条指南&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;当流确定不会有完成状态，比如 &lt;code&gt;keyup&lt;/code&gt;事件。&lt;/li&gt;
&lt;li&gt;当流确定不会抛出异常，比如一个事件，一个完全确定的流。&lt;/li&gt;
&lt;li&gt;当默认行为是符合预期的时候。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;考虑通过特定的调度程序并发引入操作符&quot;&gt;&lt;a href=&quot;#考虑通过特定的调度程序并发引入操作符&quot; class=&quot;headerlink&quot; title=&quot;考虑通过特定的调度程序并发引入操作符&quot;&gt;&lt;/a&gt;考虑通过特定的调度程序并发引入操作符&lt;/h3&gt;&lt;p&gt;相比使用&lt;code&gt;observeon&lt;/code&gt;操作符来改变可观察序列产生消息的执行上下文，更好的做法是在正确的地方开始创建并发。 通过正确的调度器将会减少 &lt;code&gt;ObserveOn&lt;/code&gt;操作符的使用。&lt;/p&gt;
&lt;h4 id=&quot;例&quot;&gt;&lt;a href=&quot;#例&quot; class=&quot;headerlink&quot; title=&quot;例&quot;&gt;&lt;/a&gt;例&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Rx.Observable.range(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;90000&lt;/span&gt;, Rx.Scheduler.requestAnimationFrame).subscribe(draw);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这个例子中，来自&lt;code&gt;range&lt;/code&gt;操作符的回调将会通过&lt;code&gt;window.requestAnimationFrame&lt;/code&gt;传递。在这个例子中， &lt;code&gt;range&lt;/code&gt;操作符的回调将被调用。默认情况下，当递归调用立即执行时，&lt;code&gt;range&lt;/code&gt;过载将会代替 &lt;code&gt;onNext&lt;/code&gt;在&lt;code&gt;Rx.Scheduler.currentThread&lt;/code&gt;上的调用。 通过提供&lt;code&gt;Rx.Scheduler.requestAnimationFrame&lt;/code&gt;调度程序， 所有来自observable的消息都将会在 &lt;code&gt;window.requestAnimationFrame&lt;/code&gt;回调中产生。&lt;/p&gt;
&lt;h4 id=&quot;何时忽略这条指南-2&quot;&gt;&lt;a href=&quot;#何时忽略这条指南-2&quot; class=&quot;headerlink&quot; title=&quot;何时忽略这条指南&quot;&gt;&lt;/a&gt;何时忽略这条指南&lt;/h4&gt;&lt;p&gt;当结合来自不同执行上下文的几个事件时，使用指南4.4将所有消息尽可能晚地放在特定的执行上下文。&lt;/p&gt;
&lt;h3 id=&quot;尽可能少且尽可能迟地调用observeOn-操作符&quot;&gt;&lt;a href=&quot;#尽可能少且尽可能迟地调用observeOn-操作符&quot; class=&quot;headerlink&quot; title=&quot;尽可能少且尽可能迟地调用observeOn 操作符&quot;&gt;&lt;/a&gt;尽可能少且尽可能迟地调用&lt;code&gt;observeOn&lt;/code&gt; 操作符&lt;/h3&gt;&lt;p&gt;通过使用 &lt;code&gt;observeOn&lt;/code&gt; 操作符， 一个预定的功能是通过原始的消息流来获取信息。这可能会改变时序信息以及对系统施加额外的压力。在查询中延迟使用这个操作符可以改善这两个问题。&lt;/p&gt;
&lt;h4 id=&quot;Sample&quot;&gt;&lt;a href=&quot;#Sample&quot; class=&quot;headerlink&quot; title=&quot;Sample&quot;&gt;&lt;/a&gt;Sample&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = xs.throttle(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .flatMap(x =&amp;gt; ys.takeUntil(zs).sample(&lt;span class=&quot;number&quot;&gt;250&lt;/span&gt;).map(y =&amp;gt; x + y))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .merge(ws)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .filter(x =&amp;gt; x &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .observeOn(Rx.Scheduler.requestAnimationFrame);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子合并了多个 运行在不同上下文的 observable 。这个查询筛选掉了大部分信息。将&lt;code&gt;observeOn&lt;/code&gt;操作符放在查询中的前面会对筛选出来的消息做额外的工作。最后才调用 &lt;code&gt;observeOn&lt;/code&gt; 将会最大限度地提高性能。&lt;/p&gt;
&lt;h4 id=&quot;何时忽略这条指南-3&quot;&gt;&lt;a href=&quot;#何时忽略这条指南-3&quot; class=&quot;headerlink&quot; title=&quot;何时忽略这条指南&quot;&gt;&lt;/a&gt;何时忽略这条指南&lt;/h4&gt;&lt;p&gt;如果你使用的 observable 并没有指定不同的上下文环境。这种情况下可以不必使用 &lt;code&gt;observeOn&lt;/code&gt; 操作符。&lt;/p&gt;
&lt;h3 id=&quot;关注内存限制&quot;&gt;&lt;a href=&quot;#关注内存限制&quot; class=&quot;headerlink&quot; title=&quot;关注内存限制&quot;&gt;&lt;/a&gt;关注内存限制&lt;/h3&gt;&lt;p&gt;RxJS 有很多操作符和类可以在内存中创建 observable, 比如：&lt;code&gt;replay&lt;/code&gt; 操作符。当这些内存存储着 observable 时，这些缓存的大小将取决于 observable 的操作。如果缓存过大，将会造成内存溢出。有许多缓冲操作符提供策略来限制缓冲区，不管是从时间方面还是大小。提供这个限制将解决内存压力问题。&lt;/p&gt;
&lt;h4 id=&quot;例子&quot;&gt;&lt;a href=&quot;#例子&quot; class=&quot;headerlink&quot; title=&quot;例子&quot;&gt;&lt;/a&gt;例子&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = xs.replay(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* 1 hr */&lt;/span&gt;).refCount();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子中，&lt;code&gt;replay&lt;/code&gt; 操作符创建了一个 buffer. 我们有限制这个 buffer 最多包含 10,000 条信息以及最多保留这些信息1小时。&lt;/p&gt;
&lt;h4 id=&quot;何时忽略这条指南-4&quot;&gt;&lt;a href=&quot;#何时忽略这条指南-4&quot; class=&quot;headerlink&quot; title=&quot;何时忽略这条指南&quot;&gt;&lt;/a&gt;何时忽略这条指南&lt;/h4&gt;&lt;p&gt;当 observable 创建了大量的信息只填充了一小块 buffer， 或者当 buffer本身有大小限制。&lt;/p&gt;
&lt;h3 id=&quot;使用-do-tap-操作符的副作用很明显&quot;&gt;&lt;a href=&quot;#使用-do-tap-操作符的副作用很明显&quot; class=&quot;headerlink&quot; title=&quot;使用 do/tap 操作符的副作用很明显&quot;&gt;&lt;/a&gt;使用 &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;tap&lt;/code&gt; 操作符的副作用很明显&lt;/h3&gt;&lt;p&gt;有很多 Rx 操作符使用函数作为参数，这可以在这些参数中传递任何有效的用户代码。这些代码可以改变全局状态（比如改变全局变量，读写硬盘等等）。&lt;/p&gt;
&lt;p&gt;Rx 是通过每个操作符组合起来运行的（除了共享操作符，例如“publish”）。这将使副作用发生在每个订阅。&lt;/p&gt;
&lt;p&gt;如果这种表现是期望的行为，最好弄清楚在 &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;tap&lt;/code&gt; 操作符中有副作用的这部分代码。这些方法会过载，只能调用指定的方法，比如 &lt;code&gt;doOnNext&lt;/code&gt;/&lt;code&gt;tapOnNext&lt;/code&gt;，&lt;code&gt;doOnError&lt;/code&gt;/&lt;code&gt;tapOnError&lt;/code&gt;,&lt;code&gt;doOnCompleted&lt;/code&gt;/&lt;code&gt;tapOnCompleted&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;例-1&quot;&gt;&lt;a href=&quot;#例-1&quot; class=&quot;headerlink&quot; title=&quot;例&quot;&gt;&lt;/a&gt;例&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = xs.filter(x =&amp;gt; x.failed).tap(x =&amp;gt; log(x));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子中，过滤失败的消息。将它们分发到订阅observable的代码之前记录该消息。此记录有一个副作用（比如：将消息放置在计算机的事件日志中）并明确地通过调用&lt;code&gt;do&lt;/code&gt;/&lt;code&gt;tap&lt;/code&gt;操作符。&lt;/p&gt;
&lt;h3 id=&quot;假设消息可以传达，直到退订完成&quot;&gt;&lt;a href=&quot;#假设消息可以传达，直到退订完成&quot; class=&quot;headerlink&quot; title=&quot;假设消息可以传达，直到退订完成&quot;&gt;&lt;/a&gt;假设消息可以传达，直到退订完成&lt;/h3&gt;&lt;p&gt;由于RxJS 使用推模式，消息可以通过不同的上下文环境发送。 当退订的时候，消息可能还在路上。当退订还没有完成的时候，这些消息仍然可以被传达。当控制权被返回时，消息将不能再传达。退订过程可以是在一个不同的上下文环境中进行。&lt;/p&gt;
&lt;h4 id=&quot;何时忽略这条指南-5&quot;&gt;&lt;a href=&quot;#何时忽略这条指南-5&quot; class=&quot;headerlink&quot; title=&quot;何时忽略这条指南&quot;&gt;&lt;/a&gt;何时忽略这条指南&lt;/h4&gt;&lt;p&gt;一旦 &lt;code&gt;onCompleted&lt;/code&gt; 或 &lt;code&gt;onError&lt;/code&gt; 方法被调用，RxJS语法可以保证订阅已结束。&lt;/p&gt;
&lt;h3 id=&quot;使用-publish-操作符分享副作用&quot;&gt;&lt;a href=&quot;#使用-publish-操作符分享副作用&quot; class=&quot;headerlink&quot; title=&quot;使用 publish 操作符分享副作用&quot;&gt;&lt;/a&gt;使用 &lt;code&gt;publish&lt;/code&gt; 操作符分享副作用&lt;/h3&gt;&lt;p&gt;因为许多 observable是冷门的&lt;a href=&quot;http://channel9.msdn.com/Blogs/J.Van.Gogh/Rx-API-in-depth-Hot-and-Cold-observables&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;(see cold vs. hot on Channel 9)&lt;/a&gt;, 每个订阅都有单独的副作用。 某些情况下，这些副作用只发生一次。&lt;code&gt;publish&lt;/code&gt; 操作符通过向多个用户广播单个订阅来提供共享订阅的机制。&lt;/p&gt;
&lt;p&gt;有几个过载&lt;code&gt;publish&lt;/code&gt;运算符。最方便的过载是那些提供了一个函数封装 observable 共享的副作用的参数。&lt;/p&gt;
&lt;h4 id=&quot;例-2&quot;&gt;&lt;a href=&quot;#例-2&quot; class=&quot;headerlink&quot; title=&quot;例&quot;&gt;&lt;/a&gt;例&lt;/h4&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; xs = Rx.Observable.create(observer =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Side effect&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  observer.onNext(&lt;span class=&quot;string&quot;&gt;&#39;hi!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  observer.onCompleted();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;xs.publish(sharedXs =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sharedXs.subscribe(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sharedXs.subscribe(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; sharedXs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).subscribe();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个例子中，&lt;code&gt;xs&lt;/code&gt; 是一个有副作用的（写入console） observable。正常情况下，每个单独的订阅都会触发这些副作用。 &lt;code&gt;publish&lt;/code&gt; 操作符使用&lt;code&gt;xs&lt;/code&gt;单独给所有订阅者 &lt;code&gt;sharedXs&lt;/code&gt; 变量去订阅。&lt;/p&gt;
&lt;h4 id=&quot;何时忽略这条指南-6&quot;&gt;&lt;a href=&quot;#何时忽略这条指南-6&quot; class=&quot;headerlink&quot; title=&quot;何时忽略这条指南&quot;&gt;&lt;/a&gt;何时忽略这条指南&lt;/h4&gt;&lt;p&gt;只有当 &lt;code&gt;publish&lt;/code&gt; 操作符需要共享副作用时才使用这条指南。在大多数情况下，您可以创建单独的订阅，没有任何问题：不管是订阅没有副作用的或是副作用可以执行多次没有任何问题的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS/tree/master/doc/designguidelines#4-using-rx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考&lt;/a&gt;
&lt;a href=&quot;https://robin-front.gitbooks.io/rxjs-doc-chinese/content/content/guidelines/using.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;同步翻译至RxJS中文文档&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用-Rx-的奇淫技巧&quot;&gt;&lt;a href=&quot;#使用-Rx-的奇淫技巧&quot; class=&quot;headerlink&quot; title=&quot;使用 Rx 的奇淫技巧&quot;&gt;&lt;/a&gt;使用 Rx 的奇淫技巧&lt;/h1&gt;&lt;h3 id=&quot;尝试画珠宝图&quot;&gt;&lt;a href=&quot;#尝试画珠宝图&quot; class=&quot;headerlink&quot; title=&quot;尝试画珠宝图&quot;&gt;&lt;/a&gt;尝试画珠宝图&lt;/h3&gt;&lt;p&gt;为你想创建的流画一个珠宝图。 通过画珠宝图，你将会很清楚你应该使用哪些操作符。&lt;/p&gt;
&lt;p&gt;珠宝图就是每个珠宝表示当前的一个事件或状态。珠宝图需要包含输入和输出流。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Reactive-Extensions/RxJS/master/doc/designguidelines/images/throttleWithTimeout.png&quot; alt=&quot;throttleWithSelector&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="RxJS" scheme="http://robin-front.github.io/categories/RxJS/"/>
    
    
      <category term="RxJS" scheme="http://robin-front.github.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title>为什么选择 RxJS?</title>
    <link href="http://robin-front.github.io/2017/04/04/why-rxjs/"/>
    <id>http://robin-front.github.io/2017/04/04/why-rxjs/</id>
    <published>2017-04-04T09:48:15.000Z</published>
    <updated>2017-04-04T09:48:15.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Why-RxJS&quot;&gt;&lt;a href=&quot;#Why-RxJS&quot; class=&quot;headerlink&quot; title=&quot;Why RxJS?&quot;&gt;&lt;/a&gt;Why RxJS?&lt;/h2&gt;&lt;p&gt;你可能会问，为什么选择 RxJS?  为什么不是 Promises? Promises 可以很好地解决异步操作，像使用 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XMLHttpRequest&lt;/a&gt; 去查询服务器, 它预期会返回值并且最终完成请求。  &lt;code&gt;The Reactive Extensions&lt;/code&gt; 统一了 &lt;code&gt;JavaScript&lt;/code&gt; 中的 &lt;code&gt;Promises&lt;/code&gt;, &lt;code&gt;callbacks&lt;/code&gt; 以及事件数据，比如 DOM输入, &lt;code&gt;Web Workers&lt;/code&gt;, &lt;code&gt;Web Sockets&lt;/code&gt;. 一旦我们统一了这些概念，就可以进行各种各样的组合.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;为了让您了解丰富的组合，我们可以创建一个自动完成功能，它从文本输入中接收用户输入，然后查询服务，确保不会对每个键盘输入的进行泛滥地调用，而是以一种更自然的方式调用。&lt;/p&gt;
&lt;p&gt;首先，我们将引用JavaScript文件，包括jQuery，尽管RxJS没有依赖于jQuery …
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;http://code.jquery.com/jquery.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;rx.lite.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们将从输入框获取用户输入，使用&lt;a href=&quot;content/observable/observable_methods/fromevent.html&quot;&gt;&lt;code&gt;Rx.Observable.fromEvent&lt;/code&gt;&lt;/a&gt; 方法监听 &lt;code&gt;keyup&lt;/code&gt; 事件.  如果 &lt;a href=&quot;http://jquery.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery&lt;/a&gt;, &lt;a href=&quot;http://zeptojs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Zepto&lt;/a&gt;, &lt;a href=&quot;https://angularjs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AngularJS&lt;/a&gt; and &lt;a href=&quot;http://emberjs.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ember.js&lt;/a&gt; 可用，将会使用它们来绑定事件, 否则将使用原生事件绑定. 这跟您的框架思考事件的一致方式，因此没有任何惊喜。
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; $input = $(&lt;span class=&quot;string&quot;&gt;&#39;#input&#39;&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $results = $(&lt;span class=&quot;string&quot;&gt;&#39;#results&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 只从 keyup 事件获得输入值 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; keyups = Rx.Observable.fromEvent($input, &lt;span class=&quot;string&quot;&gt;&#39;keyup&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .map(e =&amp;gt; e.target.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .filter(text =&amp;gt; text.length &amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 函数节流输出设置为 500ms */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; throttled = keyups.throttle(&lt;span class=&quot;number&quot;&gt;500&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* ms */&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 现在判断值是否有改变，只获取不同的值 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; distinct = throttled.distinctUntilChanged();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在，让我们来查询维基百科！在RxJS中，我们可以立即通过&lt;code&gt;Rx.Observable.fromPromise&lt;/code&gt;方法绑定到任何&lt;a href=&quot;https://github.com/promises-aplus/promises-spec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Promises A+&lt;/a&gt;的实现上，或者直接返回它，并将其封装。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;searchWikipedia&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;term&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; $.ajax(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        url: &lt;span class=&quot;string&quot;&gt;&#39;http://en.wikipedia.org/w/api.php&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataType: &lt;span class=&quot;string&quot;&gt;&#39;jsonp&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            action: &lt;span class=&quot;string&quot;&gt;&#39;opensearch&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            format: &lt;span class=&quot;string&quot;&gt;&#39;json&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            search: term&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;).promise();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一旦创建，现在我们可以将不同的节流输入绑定在一起，然后查询服务。在这种情况下，我们将调用&lt;code&gt;flatMapLatest&lt;/code&gt;获取该值，并确保我们不会有任何混乱的调用。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; suggestions = distinct.flatMapLatest(searchWikipedia);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，我们将在可观察对象上调用&lt;code&gt;subscribe&lt;/code&gt;方法开始拉数据。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;suggestions.subscribe(data =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; res = data[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* Do something 像数据绑定 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $results.empty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $.each(res, (_, value) =&amp;gt; $(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;li&amp;gt;&#39;&lt;/span&gt; + value + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/li&amp;gt;&#39;&lt;/span&gt;).appendTo($results));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, error =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* handle any errors */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $results.empty();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;li&amp;gt;Error: &#39;&lt;/span&gt; + error + &lt;span class=&quot;string&quot;&gt;&#39;&amp;lt;/li&amp;gt;&#39;&lt;/span&gt;).appendTo($results);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS#why-rxjs&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;翻译参考&lt;/a&gt;
&lt;a href=&quot;https://robin-front.gitbooks.io/rxjs-doc-chinese/content/why_rxjs.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;同步发布RxJS中文文档&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Why-RxJS&quot;&gt;&lt;a href=&quot;#Why-RxJS&quot; class=&quot;headerlink&quot; title=&quot;Why RxJS?&quot;&gt;&lt;/a&gt;Why RxJS?&lt;/h2&gt;&lt;p&gt;你可能会问，为什么选择 RxJS?  为什么不是 Promises? Promises 可以很好地解决异步操作，像使用 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;XMLHttpRequest&lt;/a&gt; 去查询服务器, 它预期会返回值并且最终完成请求。  &lt;code&gt;The Reactive Extensions&lt;/code&gt; 统一了 &lt;code&gt;JavaScript&lt;/code&gt; 中的 &lt;code&gt;Promises&lt;/code&gt;, &lt;code&gt;callbacks&lt;/code&gt; 以及事件数据，比如 DOM输入, &lt;code&gt;Web Workers&lt;/code&gt;, &lt;code&gt;Web Sockets&lt;/code&gt;. 一旦我们统一了这些概念，就可以进行各种各样的组合.&lt;/p&gt;
    
    </summary>
    
      <category term="RxJS" scheme="http://robin-front.github.io/categories/RxJS/"/>
    
    
      <category term="RxJS" scheme="http://robin-front.github.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title>Lerp的应用-利用简单线性插值来平滑动画效果</title>
    <link href="http://robin-front.github.io/2017/03/20/Lerp%E7%9A%84%E5%BA%94%E7%94%A8-%E5%88%A9%E7%94%A8%E7%AE%80%E5%8D%95%E7%BA%BF%E6%80%A7%E6%8F%92%E5%80%BC%E6%9D%A5%E5%B9%B3%E6%BB%91%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    <id>http://robin-front.github.io/2017/03/20/Lerp的应用-利用简单线性插值来平滑动画效果/</id>
    <published>2017-03-20T03:04:39.000Z</published>
    <updated>2017-03-20T03:04:39.000Z</updated>
    
    <content type="html">&lt;p&gt;上一篇的 &lt;a href=&quot;http://robin-front.github.io/2017/03/19/RxJS%E7%9A%84%E5%8A%A8%E7%94%BB%E7%AE%80%E4%BB%8B/&quot;&gt;RxJS的动画简介&lt;/a&gt; 里提到一个动画平滑的小技巧, 这里展示几个例子，它真的很简单却很有用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Lerp&lt;/code&gt;是两点之间的线性插值的别称。这是一个实现起来相当简单的效果，但可以真正改善你的动画的外观，如果你将一个对象从点A移动到点B.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;它是如何工作的？&quot;&gt;&lt;a href=&quot;#它是如何工作的？&quot; class=&quot;headerlink&quot; title=&quot;它是如何工作的？&quot;&gt;&lt;/a&gt;它是如何工作的？&lt;/h1&gt;&lt;p&gt;如果您有一个对象的当前位置和目标的位置，您可以线性内插这些点之间的距离的百分比，并在每个动画帧上更新该位置。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lerp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;position, targetPosition&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 计算当前位置与目标位置差值的 20%&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  position.x += (targetPosition.x - position.x)*&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  position.y += (targetPosition.y - position.y)*&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过这样做，对象移动的量随着位置和目标之间的距离减小而变小。这意味着对象将越来越接近它的目标，速度将减慢，这创造一个很好的缓和效果。&lt;/p&gt;
&lt;h1 id=&quot;一些例子&quot;&gt;&lt;a href=&quot;#一些例子&quot; class=&quot;headerlink&quot; title=&quot;一些例子&quot;&gt;&lt;/a&gt;一些例子&lt;/h1&gt;&lt;p&gt;这里有一个球跟随用户的鼠标或触摸运动的例子。如果我们使球移动到鼠标移动的地方，球的移动可以非常快但看起来有点脱节。如果我们快速移动鼠标，我们也可以看到单独的“球影”。&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//codepen.io/anon/embed/avXmyV?slug-hash=avXmyV&amp;default-tab=result&amp;height=300&amp;theme-id=1970&amp;user=anon&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;这里是同样的演示，除了这次我们使用lerp。不是将球立即向右移动到鼠标位置，我们每次将它移动10％的距离。&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//codepen.io/anon/embed/yYZapV?slug-hash=yYZapV&amp;default-tab=result&amp;height=300&amp;theme-id=1970&amp;user=anon&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;注意球的运动很平滑，整体更令人愉快的效果。&lt;/p&gt;
&lt;p&gt;这里是使用lerp的另一个例子。这次我们有一个滚动指示器，当您向下滚动“页面”时更新。&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//codepen.io/anon/embed/rOPMvz?slug-hash=rOPMvz&amp;default-tab=result&amp;height=300&amp;theme-id=1970&amp;user=anon&quot;&gt;&lt;/iframe&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//codepen.io/anon/embed/epxdxe?slug-hash=epxdxe&amp;default-tab=result&amp;height=300&amp;theme-id=1970&amp;user=anon&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;所以，lerp“把戏”是一个伟大的工具，我们的网络动画套路，以对抗线性或锯齿状的运动。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇的 &lt;a href=&quot;http://robin-front.github.io/2017/03/19/RxJS%E7%9A%84%E5%8A%A8%E7%94%BB%E7%AE%80%E4%BB%8B/&quot;&gt;RxJS的动画简介&lt;/a&gt; 里提到一个动画平滑的小技巧, 这里展示几个例子，它真的很简单却很有用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Lerp&lt;/code&gt;是两点之间的线性插值的别称。这是一个实现起来相当简单的效果，但可以真正改善你的动画的外观，如果你将一个对象从点A移动到点B.&lt;br&gt;
    
    </summary>
    
      <category term="animate" scheme="http://robin-front.github.io/categories/animate/"/>
    
    
      <category term="animate" scheme="http://robin-front.github.io/tags/animate/"/>
    
  </entry>
  
  <entry>
    <title>RxJS的动画简介</title>
    <link href="http://robin-front.github.io/2017/03/19/RxJS%E7%9A%84%E5%8A%A8%E7%94%BB%E7%AE%80%E4%BB%8B/"/>
    <id>http://robin-front.github.io/2017/03/19/RxJS的动画简介/</id>
    <published>2017-03-19T06:40:21.000Z</published>
    <updated>2017-03-19T06:40:21.000Z</updated>
    
    <content type="html">&lt;p&gt;本文译自 &lt;a href=&quot;https://css-tricks.com/animated-intro-rxjs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;An Animated Intro to RxJS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你可能听说过RxJS，ReactiveX，或反应式编程，或者甚至只听过函数式编程。这些术语在谈论最新和最前沿的前端技术时变得越来越突出。如果你像我一样，当你第一次尝试学习它时，你感到很困惑。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据&lt;a href=&quot;http://reactivex.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactiveX.io&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ReactiveX是一个库，用于通过使用可观察序列来组成异步和基于事件的程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话包含了很多要消化的内容。在本文中，我们将采用一种不同的方法来学习RxJS（ReactiveX的JavaScript实现）和&lt;code&gt;Observables&lt;/code&gt;，通过创建反应式动画。&lt;/p&gt;
&lt;h1 id=&quot;理解Observable&quot;&gt;&lt;a href=&quot;#理解Observable&quot; class=&quot;headerlink&quot; title=&quot;理解Observable&quot;&gt;&lt;/a&gt;理解Observable&lt;/h1&gt;&lt;p&gt;数组是元素的集合，例如[1, 2, 3, 4, 5]。你可以立即得到所有的元素，你可以做的事情像&lt;code&gt;map&lt;/code&gt;，&lt;code&gt;filter&lt;/code&gt;和映射他们。这允许你以任何你想要的方式转换元素的集合。&lt;/p&gt;
&lt;p&gt;现在假设阵列中的每个元素随时间发生; 也就是说，你不是立即得到所有的元素，而是一次一个。你可能得到第一个元素在第1秒，下一个在第3秒，依此类推。以下是如何表示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/02/rx-article-1.svg&quot; alt=&quot;a steam of values&quot;&gt;&lt;/p&gt;
&lt;p&gt;这可以被描述为值的流，或事件序列，或更确切地，称为&lt;code&gt;observable&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;observable&lt;/code&gt;是随时间的值的集合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就像使用数组一样，您可以对这些值进行映射，过滤等操作，以创建和组合新的&lt;code&gt;observable&lt;/code&gt;。最后，你可以订阅这些&lt;code&gt;observable&lt;/code&gt;，并在&lt;code&gt;steam&lt;/code&gt;的值之后执行你想要做的事。这是RxJS的源。&lt;/p&gt;
&lt;h1 id=&quot;RxJS起步&quot;&gt;&lt;a href=&quot;#RxJS起步&quot; class=&quot;headerlink&quot; title=&quot;RxJS起步&quot;&gt;&lt;/a&gt;RxJS起步&lt;/h1&gt;&lt;p&gt;开始使用RxJS的最简单的方法是使用CDN，虽然有&lt;a href=&quot;http://reactivex.io/rxjs/manual/installation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;很多方法可以安装&lt;/a&gt;，这取决于项目的需要。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- the latest, minified version of RxJS --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://unpkg.com/@reactivex/rxjs@latest/dist/global/Rx.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一旦你的项目中有RxJS，你可以从任何东西中创建一个observable ：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; aboutAnything = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从变量创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The observable emits that value, then completes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; meaningOfLife$ = Rx.Observable.just(aboutAnything);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从数组或可遍历的结构中创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The observable emits each item from the array, then completes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; myNumber$ = Rx.Observable.from([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// From a promise.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The observable emits the result eventually, then completes (or errors).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; myData$ = Rx.Observable.fromPromise(fetch(&lt;span class=&quot;string&quot;&gt;&#39;http://example.com/users&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从事件中创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The observable continuously emits events from the event listener.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mouseMove$ = Rx.Observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .fromEvent(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement, &lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：变量末尾的美元符号&lt;code&gt;$&lt;/code&gt;是一个约定，表示该变量是一个可观察者。&lt;code&gt;Observable&lt;/code&gt;可以用来对任何可以表示为随时间变化的值的流进行建模，例如事件，Promises，计时器，间隔和动画。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为，这些可观察的东西不做任何事情，至少直到你实际观察他们。一个简单的订阅将做到这一点，使用创建&lt;code&gt;.subscribe()&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;myNumber$.subscribe(number =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(number));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Result:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;gt; 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;gt; 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;gt; 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;gt; 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们实践看看：&lt;/p&gt;
&lt;iframe height=&quot;400&quot; width=&quot;100%&quot; src=&quot;//codepen.io/davidkpiano/embed/d6f5fa72a9b7b6c2c9141de6fa1ab93f?height=400&amp;theme-id=1&amp;slug-hash=d6f5fa72a9b7b6c2c9141de6fa1ab93f&amp;default-tab=js%2Cresult&amp;user=davidkpiano&amp;embed-version=2&amp;pen-title=&quot;&gt;&lt;/iframe&gt;

&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; docElm = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; cardElm = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#card&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; titleElm = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#title&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mouseMove$ = Rx.Observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .fromEvent(docElm, &lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mouseMove$.subscribe(event =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  titleElm.innerHTML = &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;event.clientX&amp;#125;&lt;/span&gt;, &lt;span class=&quot;subst&quot;&gt;$&amp;#123;event.clientY&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从&lt;code&gt;mouseMove$&lt;/code&gt;观察到的，每次&lt;code&gt;mousemove&lt;/code&gt;事件发生时，订阅改变&lt;code&gt;titleElm&lt;/code&gt;的&lt;code&gt;.innerHTML&lt;/code&gt;的鼠标的位置。该&lt;a href=&quot;http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-map&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;.map&lt;/code&gt;&lt;/a&gt;操作（据工作原理类似&lt;code&gt;Array.prototype.map&lt;/code&gt;方法）可帮助简化事情：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Produces e.g., &amp;#123;x: 42, y: 100&amp;#125; instead of the entire event&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mouseMove$ = Rx.Observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .fromEvent(docElm, &lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .map(event =&amp;gt; (&amp;#123; x: event.clientX, y: event.clientY &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用一些数学和内联样式，您可以使卡片朝向鼠标旋转。&lt;code&gt;pos.y / clientHeight&lt;/code&gt;和&lt;code&gt;pos.x / clientWidth&lt;/code&gt;计算为0和1之间的值，所以乘以由50减去一半（25）产生的值从-25到25，这正是我们需要为我们的旋转值：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;500&quot; src=&quot;//codepen.io/davidkpiano/embed/55cb38a26b9166c41017c6512ea00209?height=500&amp;theme-id=1&amp;slug-hash=55cb38a26b9166c41017c6512ea00209&amp;default-tab=js%2Cresult&amp;user=davidkpiano&amp;embed-version=2&amp;pen-title=&quot;&gt;&lt;/iframe&gt;

&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; docElm = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; cardElm = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#card&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; titleElm = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#title&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; clientWidth, clientHeight &amp;#125; = docElm;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mouseMove$ = Rx.Observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .fromEvent(docElm, &lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .map(event =&amp;gt; (&amp;#123; x: event.clientX, y: event.clientY &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mouseMove$.subscribe(pos =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; rotX = (pos.y / clientHeight * &lt;span class=&quot;number&quot;&gt;-50&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; rotY = (pos.x / clientWidth * &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cardElm.style = &lt;span class=&quot;string&quot;&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transform: rotateX(&lt;span class=&quot;subst&quot;&gt;$&amp;#123;rotX&amp;#125;&lt;/span&gt;deg) rotateY(&lt;span class=&quot;subst&quot;&gt;$&amp;#123;rotY&amp;#125;&lt;/span&gt;deg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;使用-merge-合并&quot;&gt;&lt;a href=&quot;#使用-merge-合并&quot; class=&quot;headerlink&quot; title=&quot;使用 .merge 合并&quot;&gt;&lt;/a&gt;使用 &lt;code&gt;.merge&lt;/code&gt; 合并&lt;/h1&gt;&lt;p&gt;现在让我们假设你想让这个适应触摸设备，不管是鼠标事件或是触摸动作。没有任何混乱的回调，你可以通过RxJS使用很多方法来结合&lt;code&gt;Observable&lt;/code&gt;。在这个例子中，可以使用&lt;code&gt;.merge&lt;/code&gt;实现。就像交通多条车道合并成一个单一的车道，这将返回一个包含所有数据的&lt;code&gt;Observable&lt;/code&gt;通过合并多个&lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/02/merge.png&quot; alt=&quot;来源：http://rxmarbles.com/#merge&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; touchMove$ = Rx.Observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .fromEvent(docElm, &lt;span class=&quot;string&quot;&gt;&#39;touchmove&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .map(event =&amp;gt; (&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x: event.touches[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].clientX,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y: event.touches[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].clientY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; move$ = Rx.Observable.merge(mouseMove$, touchMove$);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;move$.subscribe(pos =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;继续，尝试在触摸屏设备上平移左右：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;500&quot; src=&quot;//codepen.io/davidkpiano/embed/4a430c13f4faae099e5a34cb2a82ce6d?height=500&amp;theme-id=1&amp;slug-hash=4a430c13f4faae099e5a34cb2a82ce6d&amp;default-tab=js%2Cresult&amp;user=davidkpiano&amp;embed-version=2&amp;pen-title=&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;还有很多其他有用的&lt;code&gt;Observable&lt;/code&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators.html#combining&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;合并方法&lt;/a&gt;，如&lt;code&gt;.switch()&lt;/code&gt;，&lt;code&gt;.combineLatest()&lt;/code&gt;和&lt;code&gt;.withLatestFrom()&lt;/code&gt;，我们继续关注下一个点。&lt;/p&gt;
&lt;h1 id=&quot;添加平滑的运动&quot;&gt;&lt;a href=&quot;#添加平滑的运动&quot; class=&quot;headerlink&quot; title=&quot;添加平滑的运动&quot;&gt;&lt;/a&gt;添加平滑的运动&lt;/h1&gt;&lt;p&gt;旋转卡动作有点太死板。只要鼠标（或手指）停止，旋转即刻停止。为了解决这个问题，线性内插（线性插值）都可以使用。一般技术中描述这个&lt;a href=&quot;https://codepen.io/rachsmith/post/animation-tip-lerp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;伟大的教程由雷切尔·史密斯&lt;/a&gt;。本质上，而不是从A点跳到B，线性插值会在每一个动画运行一小部分。这将产生一个平滑的过渡，甚至当鼠标/触摸移动已停止。&lt;/p&gt;
&lt;p&gt;让我们创建一个函数实现这个功能：计算给定初始值和终值下一个值，采用线性插值：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lerp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;start, end&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dx = end.x - start.x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dy = end.y - start.y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x: start.x + dx * &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y: start.y + dy * &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;非常简约。我们有一个纯函数每次返回一个新的，线性内插的位置值，通过移动当前的（开始）接近每个动画帧上的下一个（完）位置10％的位置。&lt;/p&gt;
&lt;h1 id=&quot;调度和-interval&quot;&gt;&lt;a href=&quot;#调度和-interval&quot; class=&quot;headerlink&quot; title=&quot;调度和.interval&quot;&gt;&lt;/a&gt;调度和.interval&lt;/h1&gt;&lt;p&gt;问题是，我们如何在RxJS中表示动画帧？原来，RxJS有一个叫做&lt;code&gt;Schedulers&lt;/code&gt;的东西，它控制什么时候从一个&lt;code&gt;observable&lt;/code&gt;发出数据，当订阅都开始接收值。&lt;/p&gt;
&lt;p&gt;使用&lt;a href=&quot;http://reactivex.io/documentation/operators/interval.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Rx.Observable.interval()&lt;/code&gt;&lt;/a&gt;，您可以创建一个&lt;code&gt;observable&lt;/code&gt;，它在固定的时间间隔发出值，例如每隔一秒（Rx.Observable.interval(1000)）。如果创建一个非常微小的时间间隔，例如&lt;code&gt;Rx.Observable.interval(0)&lt;/code&gt;，并希望它只在每个动画帧上发出值，那么在动画帧内&lt;code&gt;Rx.Scheduler.animationFrame&lt;/code&gt;每隔16到17ms就会发出一个值，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; animationFrame$ = Rx.Observable.interval(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, Rx.Scheduler.animationFrame);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;结合-withLatestFrom&quot;&gt;&lt;a href=&quot;#结合-withLatestFrom&quot; class=&quot;headerlink&quot; title=&quot;结合.withLatestFrom&quot;&gt;&lt;/a&gt;结合&lt;code&gt;.withLatestFrom&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;要创建平滑线性插值，您只需要关心每个动画帧的最新鼠标或触摸位置。要做到这一点，有一个操作符叫&lt;code&gt;.withLatestFrom()&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; smoothMove$ = animationFrame$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .withLatestFrom(move$, (frame, move) =&amp;gt; move);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，&lt;code&gt;smoothMove$&lt;/code&gt;是一个新的&lt;code&gt;observable&lt;/code&gt;，&lt;code&gt;move$&lt;/code&gt; 只有当&lt;code&gt;animationFrame$&lt;/code&gt;发出一个值时，才会发出最新的值。这是必须的 - 你并不想要的动画帧外发出的值（除非你真的喜欢jank）。第二个参数是描述当组合来自每个可观察的最新值时要做什么的函数。在这种情况下，唯一重要的值是&lt;code&gt;move&lt;/code&gt;值，这是所有返回的值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/02/with-latest-from.png&quot; alt=&quot;withLatestFrom&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;与过渡-scan&quot;&gt;&lt;a href=&quot;#与过渡-scan&quot; class=&quot;headerlink&quot; title=&quot;与过渡.scan&quot;&gt;&lt;/a&gt;与过渡&lt;code&gt;.scan&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;现在你有一个&lt;code&gt;observable&lt;/code&gt;从&lt;code&gt;move$&lt;/code&gt;每个动画帧发出最新的值，是时候添加线性插值了。&lt;a href=&quot;http://reactivex.io/documentation/operators/scan.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;.scan()&lt;/code&gt;&lt;/a&gt;运算符“积累”从可观察到的当前值和下一个值，提供给需要这些值的函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/02/scan.png&quot; alt=&quot;#scan&quot;&gt;&lt;/p&gt;
&lt;p&gt;这对于我们的线性插值用例是完美的。记住，我们的&lt;code&gt;lerp(start, end)&lt;/code&gt;函数有两个参数：&lt;code&gt;start（current）&lt;/code&gt;值和&lt;code&gt;end（next）&lt;/code&gt;值。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; smoothMove$ = animationFrame$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .withLatestFrom(move$, (frame, move) =&amp;gt; move)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .scan((current, next) =&amp;gt; lerp(current, next));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// or simplified: .scan(lerp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，您可以订阅&lt;code&gt;smoothMove$&lt;/code&gt;代替&lt;code&gt;move$&lt;/code&gt;在操作中查看线性插值：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;500&quot; src=&quot;//codepen.io/davidkpiano/embed/127ee82ad742b4dddd657703e2259852?height=500&amp;theme-id=1&amp;slug-hash=127ee82ad742b4dddd657703e2259852&amp;default-tab=js%2Cresult&amp;user=davidkpiano&amp;embed-version=2&amp;pen-title=&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h1&gt;&lt;p&gt;&lt;code&gt;RxJS&lt;/code&gt; 不是一个动画库，当然，但对于处理随时间变化的值，它的可组合以及声明性的方式是&lt;code&gt;ReactiveX&lt;/code&gt;演示动画的核心概念。反应式编程是考虑编程的另类方式，具有许多优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它是声明性的，可组合的和不可变的，避免回调地狱，并使你的代码更简洁，可重用和模块化。&lt;/li&gt;
&lt;li&gt;它在处理所有类型的异步数据时非常有用，无论是获取数据，通过&lt;code&gt;WebSockets&lt;/code&gt;进行通信，监听来自多个源的外部事件，甚至是动画。&lt;/li&gt;
&lt;li&gt;“关注的分离” - 您使用&lt;code&gt;Observable&lt;/code&gt;和运算符声明性地表示您期望的数据，然后在一个单独的上下文环境中处理&lt;code&gt;.subscribe()&lt;/code&gt;，而不会在您的原代码上产生副作用。&lt;/li&gt;
&lt;li&gt;有这么多语言的实现了它 - &lt;code&gt;Java&lt;/code&gt;，&lt;code&gt;PHP&lt;/code&gt;，&lt;code&gt;Python&lt;/code&gt;，&lt;code&gt;Ruby&lt;/code&gt;，&lt;code&gt;C＃&lt;/code&gt;，&lt;code&gt;Swift&lt;/code&gt;和其他你可能没有听说过的。&lt;/li&gt;
&lt;li&gt;它不是一个框架，它与许多流行的框架（如React，Angular和Vue）可以非常好地融合在一起。&lt;/li&gt;
&lt;li&gt;你可以得到行家指点，如果你想要，但&lt;code&gt;ReactiveX&lt;/code&gt;从被提出到现在实施了近十年前（2009年），由创意所产生的&lt;a href=&quot;http://conal.net/papers/icfp97/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Conal Elliott&lt;/code&gt;和保罗·胡达克&lt;/a&gt; 2年前（1997年），在描述功能性反应的动画（惊喜惊喜）。不用说，它经过了足够的测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文探讨了一些有用的部分和&lt;code&gt;RxJS&lt;/code&gt;的概念-创建与订阅&lt;code&gt;.fromEvent()&lt;/code&gt;和&lt;code&gt;.interval()&lt;/code&gt;，对订阅操作&lt;code&gt;.map()&lt;/code&gt;和&lt;code&gt;.scan()&lt;/code&gt;，多个订阅相结合&lt;code&gt;.merge()&lt;/code&gt;和&lt;code&gt;.withLatestFrom()&lt;/code&gt;，并与引入调度&lt;code&gt;Rx.Scheduler.animationFrame&lt;/code&gt;。有很多其他有用的资源学习RxJS：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://reactivex.io/rxjs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactiveX：RxJS&lt;/a&gt; - 官方文档&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rxmarbles.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxMarbles&lt;/a&gt; - 用于可视化观察&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactive编程的介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你想进一步深入&lt;code&gt;RxJS动画&lt;/code&gt;（和使用更多的CSS变量），请查看&lt;a href=&quot;http://slides.com/davidkhourshid/reactanim#/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的幻灯片从&lt;code&gt;CSS Dev Conf 2016&lt;/code&gt;&lt;/a&gt;和&lt;a href=&quot;https://www.youtube.com/watch?v=lTCukb6Zn3g&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我2016年的演讲从JSConf冰岛&lt;/a&gt;关于反应式动画与CSS变量。这里有一些使用RxJS创建的动画可能对触发灵感有帮助：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/davidkpiano/pen/Vmyyzd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3D数字时钟&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/davidkpiano/pen/mAoaxP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;心脏app概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/Enki/pen/eBwKgO&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;透视使用RxJS拖动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文译自 &lt;a href=&quot;https://css-tricks.com/animated-intro-rxjs/&quot;&gt;An Animated Intro to RxJS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你可能听说过RxJS，ReactiveX，或反应式编程，或者甚至只听过函数式编程。这些术语在谈论最新和最前沿的前端技术时变得越来越突出。如果你像我一样，当你第一次尝试学习它时，你感到很困惑。&lt;br&gt;
    
    </summary>
    
      <category term="RxJS" scheme="http://robin-front.github.io/categories/RxJS/"/>
    
    
      <category term="RxJS" scheme="http://robin-front.github.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title>通过动图简单通俗地了解Flexbox的工作原理</title>
    <link href="http://robin-front.github.io/2017/03/13/%E9%80%9A%E8%BF%87%E5%8A%A8%E5%9B%BE%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%97%E5%9C%B0%E4%BA%86%E8%A7%A3Flexbox%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://robin-front.github.io/2017/03/13/通过动图简单通俗地了解Flexbox的工作原理/</id>
    <published>2017-03-13T03:31:42.000Z</published>
    <updated>2017-03-13T03:31:42.000Z</updated>
    
    <content type="html">&lt;p&gt;本文译自 &lt;a href=&quot;https://medium.freecodecamp.com/even-more-about-how-flexbox-works-explained-in-big-colorful-animated-gifs-a5a74812b053#.iwqlenuqq&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scott Domes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Flex属性是一个复合属性，而大部分教程中都只设置一个值，但其实它包含了 &lt;code&gt;flex-basis&lt;/code&gt;、&lt;code&gt;flex-grow&lt;/code&gt;、&lt;code&gt;flex-shrink&lt;/code&gt;.&lt;br&gt;让我们深入了解Flexbox - 以及如何利用它来构建适应性强和漂亮的布局.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;属性一：-Flex-Basis&quot;&gt;&lt;a href=&quot;#属性一：-Flex-Basis&quot; class=&quot;headerlink&quot; title=&quot;属性一： Flex-Basis&quot;&gt;&lt;/a&gt;属性一： Flex-Basis&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;https://medium.freecodecamp.com/an-animated-guide-to-flexbox-d280cf6afc35#.s7qtdlnbf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上一篇文章&lt;/a&gt;中，我们主要把它用于外部容器中。这一次，我们试着把它用在容器内的子元素中。&lt;/p&gt;
&lt;p&gt;这是一个很不起眼的属性，但也很直接。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Flex-basis&lt;/code&gt; 控制着一个元素的默认大小，在其他 flex 属性应用之前。&lt;/p&gt;
&lt;p&gt;在下面的 GIF 看来，它的作用和 &lt;code&gt;width&lt;/code&gt; 的作用一样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*S3LKFr_BICUtAWA5LOFxVw.gif&quot; alt=&quot;flex-basis&quot;&gt;&lt;/p&gt;
&lt;p&gt;是什么让 &lt;code&gt;flex-basis&lt;/code&gt; 表现得和 &lt;code&gt;width&lt;/code&gt; 一样？事实上，它对应着 flex 的坐标轴。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*_Ruy6jFG7gUpSf76IUcJTQ.png&quot; alt=&quot;flex axes&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;flex-basis 影响无素在主轴上的大小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们看看保持 &lt;code&gt;flex-basis&lt;/code&gt; 的值不变，但是改变主轴方向会有什么变化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*W4QU1Fw9kDLEH2m-J9VGyw.gif&quot; alt=&quot;flex direction&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意到，我从手动设置高度变成手动设置宽度。 &lt;code&gt;Flex-basis&lt;/code&gt; 影响宽度还是高度取决于 &lt;code&gt;flex-direction&lt;/code&gt; 的值。&lt;/p&gt;
&lt;h3 id=&quot;属性二：Flex-Grow&quot;&gt;&lt;a href=&quot;#属性二：Flex-Grow&quot; class=&quot;headerlink&quot; title=&quot;属性二：Flex Grow&quot;&gt;&lt;/a&gt;属性二：Flex Grow&lt;/h3&gt;&lt;p&gt;现在，我们来点更复杂的。&lt;/p&gt;
&lt;p&gt;首先，让我们设置给所有方块设置相同的宽度，120px:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*dON3-0RooiPyfDr0DBEOmA.png&quot; alt=&quot;same width&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在，当它加上属性 &lt;code&gt;flex-grow&lt;/code&gt;（默认值为0）.这意味着，不允许方块自动充满容器。&lt;/p&gt;
&lt;p&gt;没理解？现在给每个方块的 &lt;code&gt;flex-grow&lt;/code&gt; 属性设置为 &lt;code&gt;1&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*cK-yB4z_L6bmEqoG5qDoRA.png&quot; alt=&quot;flex-grow&quot;&gt;&lt;/p&gt;
&lt;p&gt;所有方块共同充满了容器的整个宽度，并且是平均分。 &lt;code&gt;flex-grow&lt;/code&gt; 属性覆盖了 &lt;code&gt;width&lt;/code&gt; 属性。&lt;/p&gt;
&lt;p&gt;让人困惑的是 &lt;code&gt;flex-grow&lt;/code&gt; 的值到底是什么意思？ &lt;code&gt;flex-grow: 1&lt;/code&gt; 意味着什么？&lt;/p&gt;
&lt;p&gt;好吧，下图是给每个方块设置 &lt;code&gt;flex-grow&lt;/code&gt; 值为 &lt;code&gt;999&lt;/code&gt; 的表现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*p2fLcy13xFU9GjtM4cbHEw.png&quot; alt=&quot;flex-grow:999&quot;&gt;&lt;/p&gt;
&lt;p&gt;这真是。。完全一样。&lt;/p&gt;
&lt;p&gt;那是因为 &lt;code&gt;flex-grow&lt;/code&gt; 不是一个绝对的值，而是一个相对的值。&lt;/p&gt;
&lt;p&gt;重要的不是一个方块 &lt;code&gt;flex-grow&lt;/code&gt; 值的本身，而是这个值和其他方块的值的关系。&lt;/p&gt;
&lt;p&gt;如果给每个方块设置 &lt;code&gt;flex-grow: 1&lt;/code&gt;， 然后调整第3个方块的 &lt;code&gt;flex-grow&lt;/code&gt; 属性，可以看到如下变化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*gHyLHG52cySgLmy0x-edZA.gif&quot; alt=&quot;flex-grow change&quot;&gt;&lt;/p&gt;
&lt;p&gt;想要真正明白这里发生了什么，让我们快速略过一个简单的数学计算。&lt;/p&gt;
&lt;p&gt;每个正方形都以flex-grow为1开始。如果我们将每个正方形的flex-grow相加，则总和为6。因此，容器被分成6个单独的部分。&lt;em&gt;每个正方形增长到可用空间的1/6以填满容器。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当设置第3个方块的&lt;code&gt;flex-grow&lt;/code&gt; 为 2， 现在容器被分成7份，因为 &lt;code&gt;flex-grow&lt;/code&gt; 属性的值的总和为 &lt;code&gt;1+1+2+1+1+1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;方块3获得 2/7 的宽度，剩下的获得 1/7。&lt;/p&gt;
&lt;p&gt;当设置第3个方块为 &lt;code&gt;flex-grow: 3&lt;/code&gt;， 容器被分成8份（1+1+3+1+1+1）, 方块3占 3/8, 剩下的占 1/8.&lt;/p&gt;
&lt;p&gt;以此类推。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flex-grow&lt;/code&gt;是占所有值总和的比例。如果给所有方块设置&lt;code&gt;flex-grow: 4&lt;/code&gt;, 方块3设置 &lt;code&gt;flex-grow: 12&lt;/code&gt;, 效果和给它们分别设置 1 和 3 是一样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*JnjR4ULs8de0so1bdUPogw.png&quot; alt=&quot;flex-grow&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后一点，&lt;code&gt;flex-grow&lt;/code&gt; 和 &lt;code&gt;flex-basis&lt;/code&gt; 都和主轴对应。我们的方块只会增长宽度，除非设置 &lt;code&gt;flex-direction&lt;/code&gt; 为 &lt;code&gt;column&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;属性三：-Flex-Shrink&quot;&gt;&lt;a href=&quot;#属性三：-Flex-Shrink&quot; class=&quot;headerlink&quot; title=&quot;属性三： Flex Shrink&quot;&gt;&lt;/a&gt;属性三： Flex Shrink&lt;/h3&gt;&lt;p&gt;&lt;code&gt;flex-shrink&lt;/code&gt; 和 &lt;code&gt;flex-grow&lt;/code&gt;正好相反，决定每个方块可以收缩多少。&lt;/p&gt;
&lt;p&gt;它只有在元素必须收缩以适应其容器时才起作用 - 即当容器太小时。&lt;/p&gt;
&lt;p&gt;它的主要用途是指定哪些元素要缩小，哪些元素不用缩小。默认情况下，每个方块的 &lt;code&gt;flex-shrink&lt;/code&gt; 值为1 - 这意味着它会随着容器的收缩而收缩。&lt;/p&gt;
&lt;p&gt;让我们看看它的表现。在下面的GIFS中，正方形的&lt;code&gt;flex-grow&lt;/code&gt;为1，因此它们填充了容器，并且&lt;code&gt;flex-shrink&lt;/code&gt;为1，因此它们被允许收缩.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*FVO9kX3wwqakhcT9JWS2Ww.gif&quot; alt=&quot;flex-shrink&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在让我们将方块3的&lt;code&gt;flex-shrink&lt;/code&gt;设置为0.它禁止收缩，所以它会增长以适应容器，但它拒绝收缩到其设置的120px宽度以下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*GrLzJ4jH3v2Z5Va_TMOXkQ.gif&quot; alt=&quot;flex-shrink&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flex-shrink&lt;/code&gt;的默认值是1 - 这意味着你的元素会收缩，除非设置为0去禁止它。&lt;/p&gt;
&lt;p&gt;同样，&lt;code&gt;flex-shrink&lt;/code&gt; 是按比例的。如果一个盒子的&lt;code&gt;flex-shrink&lt;/code&gt;为6，其余的&lt;code&gt;flex-shrink&lt;/code&gt;为2，一个盒子将以3倍的速度缩减，当空间被压缩。&lt;/p&gt;
&lt;p&gt;注意这里说的是：具有3x弹性收缩的方块将比其他方块缩短3倍。&lt;em&gt;这并不意味着它将收缩1/3的宽度。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;稍后，我们会深入了解这到底会收缩或增长多少，在此之前，先来看一下最后一个属性，并把所有混在一起。&lt;/p&gt;
&lt;h3 id=&quot;属性四：-Flex&quot;&gt;&lt;a href=&quot;#属性四：-Flex&quot; class=&quot;headerlink&quot; title=&quot;属性四： Flex&quot;&gt;&lt;/a&gt;属性四： Flex&lt;/h3&gt;&lt;p&gt;flex 是 grow, shrink 以及 basis 的缩写，复合属性。&lt;/p&gt;
&lt;p&gt;它的默认值是 0(grow) 1（shrink）auto(basis).&lt;/p&gt;
&lt;p&gt;最后一个例子，让我们简化到两个 boxs&lt;/p&gt;
&lt;p&gt;这是它们的属性：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.square&lt;/span&gt;&lt;span class=&quot;selector-id&quot;&gt;#one&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.square&lt;/span&gt;&lt;span class=&quot;selector-id&quot;&gt;#two&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两者都有相同的 &lt;code&gt;flex-basis&lt;/code&gt;属性。这意味着如果它们都有足够的空间（容器是600px加上边距和填充空间），它们都将是300px宽度。&lt;/p&gt;
&lt;p&gt;但随着容器的增长，Square 1（具有更高的flex-grow）将增长两倍。随着盒子的收缩，Square 2（具有更高的flex-shrink）将缩短两倍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*BKZt7AT5eFee4KRhe82gew.gif&quot; alt=&quot;all together&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;它是如何增长和收缩的&quot;&gt;&lt;a href=&quot;#它是如何增长和收缩的&quot; class=&quot;headerlink&quot; title=&quot;它是如何增长和收缩的&quot;&gt;&lt;/a&gt;它是如何增长和收缩的&lt;/h4&gt;&lt;p&gt;这里有可能会混淆：当Square 1增长时，它不会增长到Square 2的两倍。同样，当Square 2缩小时，它不会缩小到Square 1的一半大小 - 即使比率的收缩率为2比1。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这不是他们的大小 2比1或1比2.这是他们的收缩和增长的速度的比例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一点数学计算&quot;&gt;&lt;a href=&quot;#一点数学计算&quot; class=&quot;headerlink&quot; title=&quot;一点数学计算&quot;&gt;&lt;/a&gt;一点数学计算&lt;/h4&gt;&lt;p&gt;容器的起始大小为640像素。在容器的每一边占用20px的填充后，这留下了足够的空间，两个方块恢复到它们的&lt;code&gt;flex-basis&lt;/code&gt;的300px.&lt;/p&gt;
&lt;p&gt;当容器设置为430px时，我们丢失了210px的空间。正方形1，flex-shrink:1，失去70px。方形2，flex-shrink: 2，失去140px。&lt;/p&gt;
&lt;p&gt;当容器缩小到340px时，我们现在已经失去了300像素的空间。方块1损失100像素，方块2损失200像素.&lt;/p&gt;
&lt;p&gt;损失的空间根据它们各自的收缩率（2:1）的比率来分割。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flex-grow&lt;/code&gt;同样。当容器增长到940px，我们获得了300px的空间，Square 1获得了额外的200px，Square 2获得了额外的100px。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*70-KTWYpA2LnLjqi0xDrJA.gif&quot; alt=&quot;grow and shrink&quot;&gt;&lt;/p&gt;
&lt;p&gt;在上面的GIF中，您可以看到宽度如何根据比率进行调整，增量（Δ）显示与基于&lt;code&gt;flex-basis&lt;/code&gt;的差异。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文译自 &lt;a href=&quot;https://medium.freecodecamp.com/even-more-about-how-flexbox-works-explained-in-big-colorful-animated-gifs-a5a74812b053#.iwqlenuqq&quot;&gt;Scott Domes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Flex属性是一个复合属性，而大部分教程中都只设置一个值，但其实它包含了 &lt;code&gt;flex-basis&lt;/code&gt;、&lt;code&gt;flex-grow&lt;/code&gt;、&lt;code&gt;flex-shrink&lt;/code&gt;.&lt;br&gt;让我们深入了解Flexbox - 以及如何利用它来构建适应性强和漂亮的布局.&lt;br&gt;
    
    </summary>
    
      <category term="Flexbox" scheme="http://robin-front.github.io/categories/Flexbox/"/>
    
    
      <category term="Flexbox" scheme="http://robin-front.github.io/tags/Flexbox/"/>
    
  </entry>
  
  <entry>
    <title>js遍历Object对象可枚举属性、不可枚举属性、原型链属性和自身属性</title>
    <link href="http://robin-front.github.io/2017/01/13/js%E9%81%8D%E5%8E%86Object%E5%8F%AF%E6%9E%9A%E4%B8%BE%E5%B1%9E%E6%80%A7%E3%80%81%E4%B8%8D%E5%8F%AF%E6%9E%9A%E4%B8%BE%E5%B1%9E%E6%80%A7%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%B1%9E%E6%80%A7%E5%92%8C%E8%87%AA%E8%BA%AB%E5%B1%9E%E6%80%A7/"/>
    <id>http://robin-front.github.io/2017/01/13/js遍历Object可枚举属性、不可枚举属性、原型链属性和自身属性/</id>
    <published>2017-01-13T02:19:27.000Z</published>
    <updated>2017-01-13T02:19:27.000Z</updated>
    
    <content type="html">&lt;p&gt;利用hasOwnProperty、getOwnPropertyNames、Object.keys、for…in遍历对象的可枚举属性、不可枚举属性、原型链上的属性和自身属性。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先来看看各种方法的用法及兼容性。&lt;/p&gt;
&lt;h3 id=&quot;hasOwnProperty-NaN&quot;&gt;&lt;a href=&quot;#hasOwnProperty-NaN&quot; class=&quot;headerlink&quot; title=&quot;hasOwnProperty&quot;&gt;&lt;/a&gt;hasOwnProperty&lt;/h3&gt;&lt;p&gt;Object.prototype.hasOwnProperty(name) 方法用来判断某个对象是否含有指定的自身属性，它本身是对象原型链上的默认方法。&lt;/p&gt;
&lt;p&gt;hasOwnProperty 方法是 ES3 就标准化了，所以不用担心兼容性问题。&lt;/p&gt;
&lt;p&gt;但由于 hasOwnProperty 是原型链上的方法，所以有可能被对象的自身方法所屏蔽。如：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; foo = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;hasOwnProperty&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;bar&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Here be dragons&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.hasOwnProperty(&lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 始终返回 false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果担心这种情况，可以直接使用原型链上真正的 hasOwnProperty 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&amp;#123;&amp;#125;).hasOwnProperty.call(foo, &lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.hasOwnProperty.call(foo, &lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;getOwnPropertyNames&quot;&gt;&lt;a href=&quot;#getOwnPropertyNames&quot; class=&quot;headerlink&quot; title=&quot;getOwnPropertyNames&quot;&gt;&lt;/a&gt;getOwnPropertyNames&lt;/h3&gt;&lt;p&gt;Object.getOwnPropertyNames(obj)方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性）组成的数组, 该方法不会获取到原型链上的属性。如：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 父类构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ParentClass&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ParentClass.prototype.inheritedMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 继承&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; ChildClass = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(ParentClass.prototype, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 不可枚举属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;getFoo&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.foo; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自身可枚举属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChildClass.foo = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 再定义一个原型链属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChildClass.prototype.prototypeMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyNames(my_obj).sort()); &lt;span class=&quot;comment&quot;&gt;// [&quot;foo&quot;, &quot;getFoo&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;兼容性到 IE9, es 5标准。&lt;/p&gt;
&lt;h3 id=&quot;Object-keys&quot;&gt;&lt;a href=&quot;#Object-keys&quot; class=&quot;headerlink&quot; title=&quot;Object.keys()&quot;&gt;&lt;/a&gt;Object.keys()&lt;/h3&gt;&lt;p&gt;返回该对象的所有可枚举自身属性的属性名。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//具有随机键排序的数组类对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; an_obj = &amp;#123; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(an_obj)); &lt;span class=&quot;comment&quot;&gt;// console: [&#39;2&#39;, &#39;7&#39;, &#39;100&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些属性的顺序与手动遍历（如for..in）该对象属性时的一致。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：Object.keys 和 getOwnPropertyNames ，在ES5，如果此方法的参数不是一个对象（原始的），那么它会造成 TypeError。在ES6，非对象的参数将被强制转换为一个对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Object.keys(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object.getOwnPropertyNames(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;TypeError:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; is &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; an object (ES5 code)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object.keys(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;]                   (ES6 code)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object.getOwnPropertyNames(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;length&quot;&lt;/span&gt;]                   (ES6 code)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;兼容性到 IE9, es 5标准。&lt;/p&gt;
&lt;h3 id=&quot;for-in&quot;&gt;&lt;a href=&quot;#for-in&quot; class=&quot;headerlink&quot; title=&quot;for..in&quot;&gt;&lt;/a&gt;for..in&lt;/h3&gt;&lt;p&gt;手动遍历，可以遍历到自身和原型链上所有可枚举的属性。&lt;/p&gt;
&lt;h3 id=&quot;只获取自身可枚举属性&quot;&gt;&lt;a href=&quot;#只获取自身可枚举属性&quot; class=&quot;headerlink&quot; title=&quot;只获取自身可枚举属性&quot;&gt;&lt;/a&gt;只获取自身可枚举属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;直接用 &lt;code&gt;Object.keys()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;IE9 以下可以通过&lt;code&gt;hasOwnProperty&lt;/code&gt;实现：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys) &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;o&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o !== &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;(o))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Object.keys called on a non-object&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k=[],p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; o) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.hasOwnProperty.call(o,p)) k.push(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;只获取自身不可枚举属性&quot;&gt;&lt;a href=&quot;#只获取自身不可枚举属性&quot; class=&quot;headerlink&quot; title=&quot;只获取自身不可枚举属性&quot;&gt;&lt;/a&gt;只获取自身不可枚举属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;Object.keys()&lt;/code&gt; 排除可枚举属性&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; target = myObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; enum_and_nonenum = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyNames(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 排除可枚举属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; enum_only = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; nonenum_only = enum_and_nonenum.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; indexInEnum = enum_only.indexOf(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (indexInEnum == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// not found in enum_only keys mean the key is non-enumerable,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// so return true so we keep this in the filter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;decorator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(nonenum_only);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;propertyIsEnumerable&lt;/code&gt;判断，该方法返回Boolean值，不可枚举返回false。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; target = myObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; enum_and_nonenum = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyNames(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; enum_only = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nonenum_only = enum_and_nonenum.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 筛选不可枚举属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !target.propertyIsEnumerable(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(nonenum_only);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;只获取原型链上的可枚举属性&quot;&gt;&lt;a href=&quot;#只获取原型链上的可枚举属性&quot; class=&quot;headerlink&quot; title=&quot;只获取原型链上的可枚举属性&quot;&gt;&lt;/a&gt;只获取原型链上的可枚举属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;直接用 for..in&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getPrototypeOf(targetObj); &lt;span class=&quot;comment&quot;&gt;// 跳过遍历自身属性，直接从原型上开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k=[],p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; o) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.hasOwnProperty.call(o,p)) k.push(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; k;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，这样遍历出来的属性也不一定能访问， 因为自身属性可能会屏蔽掉原型上的属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;只获取原型链上的不可枚举属性&quot;&gt;&lt;a href=&quot;#只获取原型链上的不可枚举属性&quot; class=&quot;headerlink&quot; title=&quot;只获取原型链上的不可枚举属性&quot;&gt;&lt;/a&gt;只获取原型链上的不可枚举属性&lt;/h3&gt;&lt;p&gt;比较麻烦，如果使用 getOwnPropertyNames，只能单独获取一层原型链，必须一级一级遍历往上找，而且这也不一定有场景，因为原型链上的方法重名是会被屏蔽的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;利用hasOwnProperty、getOwnPropertyNames、Object.keys、for…in遍历对象的可枚举属性、不可枚举属性、原型链上的属性和自身属性。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://robin-front.github.io/categories/javascript/"/>
    
    
      <category term="getOwnPropertyNames" scheme="http://robin-front.github.io/tags/getOwnPropertyNames/"/>
    
      <category term="hasOwnProperty" scheme="http://robin-front.github.io/tags/hasOwnProperty/"/>
    
      <category term="Object.keys" scheme="http://robin-front.github.io/tags/Object-keys/"/>
    
  </entry>
  
  <entry>
    <title>比较instanceof与isPrototypeOf</title>
    <link href="http://robin-front.github.io/2017/01/12/%E6%AF%94%E8%BE%83instanceof%E4%B8%8EisPrototypeof/"/>
    <id>http://robin-front.github.io/2017/01/12/比较instanceof与isPrototypeof/</id>
    <published>2017-01-12T09:49:14.000Z</published>
    <updated>2017-01-12T09:49:14.000Z</updated>
    
    <content type="html">&lt;p&gt;在javascript中，instanceof 和 isPrototypeOf 都可以判断一个原型是否在另一个实例的原型链中，那他们有什么区别呢，为什么说 isPrototypeOf 可以替代 instanceof 。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;instanceof-用法&quot;&gt;&lt;a href=&quot;#instanceof-用法&quot; class=&quot;headerlink&quot; title=&quot;instanceof 用法&quot;&gt;&lt;/a&gt;instanceof 用法&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Super&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// init code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sub&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Super.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// other init code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sub.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Super();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sub = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Sub();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于上面的代码，用 instanceof 可以像这样确定他们的关系：&lt;/p&gt;
&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Super&lt;/span&gt;&lt;/span&gt;; // true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;isPrototypeOf-用法&quot;&gt;&lt;a href=&quot;#isPrototypeOf-用法&quot; class=&quot;headerlink&quot; title=&quot;isPrototypeOf 用法&quot;&gt;&lt;/a&gt;isPrototypeOf 用法&lt;/h3&gt;&lt;p&gt;复用上面的代码，用 isPrototypeOf 可以这样写：&lt;/p&gt;
&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Super.&lt;span class=&quot;keyword&quot;&gt;prototype&lt;/span&gt;.isPrototypeOf(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt;)&lt;/span&gt;; // true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h3&gt;&lt;p&gt;乍一看，都可以用，但某种情况下是有区别的，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var super = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; some super properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;/span&gt;(super);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;someProp&lt;/span&gt; = 5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;/span&gt;(sub);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(super.isPrototypeOf(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt;))&lt;/span&gt;;  // true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;super&lt;/span&gt;)&lt;/span&gt;;      // TypeError&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时候 super 并不是构造函数，无法使用 instanceof, 只能使用 isPrototypeOf.&lt;/p&gt;
&lt;h3 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h3&gt;&lt;p&gt;结论就是 isPrototypeOf 能使用的场景更广，完全可以替代 instanceof， 只是写起来没那么简洁。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在javascript中，instanceof 和 isPrototypeOf 都可以判断一个原型是否在另一个实例的原型链中，那他们有什么区别呢，为什么说 isPrototypeOf 可以替代 instanceof 。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://robin-front.github.io/categories/javascript/"/>
    
    
      <category term="instanceof" scheme="http://robin-front.github.io/tags/instanceof/"/>
    
      <category term="isPrototypeOf" scheme="http://robin-front.github.io/tags/isPrototypeOf/"/>
    
  </entry>
  
  <entry>
    <title>javascript通过Vibration API实现手机振动反馈提高用户体验</title>
    <link href="http://robin-front.github.io/2017/01/10/javascript%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E6%8C%AF%E5%8A%A8%E5%8F%8D%E9%A6%88%E6%8F%90%E9%AB%98%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    <id>http://robin-front.github.io/2017/01/10/javascript实现手机振动反馈提高用户体验/</id>
    <published>2017-01-10T05:35:00.000Z</published>
    <updated>2017-01-11T01:13:00.000Z</updated>
    
    <content type="html">&lt;p&gt;目前大多数的移动设备均具备硬件能力支持振动，让软件代码通过使设备摇晃来向用户提供物理反馈。Vibration API 为 Web应用程序提供访问此硬件的能力。如果设备不支持，则不会产生任何效果。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;振动描述&quot;&gt;&lt;a href=&quot;#振动描述&quot; class=&quot;headerlink&quot; title=&quot;振动描述&quot;&gt;&lt;/a&gt;振动描述&lt;/h3&gt;&lt;p&gt;振动被抽象成【开-关】脉冲的模式，且可以具有变化的长度。参数可以是单个整数，表示持续振动的毫秒数 (ms)；或可由多个整数组成的数组，达到振动和暂停循环的效果。只要单一 window.navigator.vibrate() 函式即可控制振动。&lt;/p&gt;
&lt;h3 id=&quot;单次振动&quot;&gt;&lt;a href=&quot;#单次振动&quot; class=&quot;headerlink&quot; title=&quot;单次振动&quot;&gt;&lt;/a&gt;单次振动&lt;/h3&gt;&lt;p&gt;你可指定单一数值，或用只有一个数值成员的数组，让设备振动 1 次：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.navigator&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.vibrate&lt;/span&gt;(200);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.navigator&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.vibrate&lt;/span&gt;(&lt;span class=&quot;selector-attr&quot;&gt;[200]&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上两个例子都可以使设备振动 200 ms.&lt;/p&gt;
&lt;h3 id=&quot;多次振动&quot;&gt;&lt;a href=&quot;#多次振动&quot; class=&quot;headerlink&quot; title=&quot;多次振动&quot;&gt;&lt;/a&gt;多次振动&lt;/h3&gt;&lt;p&gt;一个数组的值描述了装置振动与不振动的交替时间段。数组中的每个值都转换为整数，然后交替解释为设备应该振动的毫秒数和不振动的毫秒数。例如:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.navigator&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.vibrate&lt;/span&gt;(&lt;span class=&quot;selector-attr&quot;&gt;[200, 100, 200]&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这会使设备振动200 ms，然后暂停100 ms，然后再次振动设备200 ms。&lt;/p&gt;
&lt;p&gt;您可以根据需要设定多个振动/暂停对，数组的值可以是偶数或奇数个； 值得注意的是，由于振动在每个振动周期结束时自动停止，因此您不必提供最后一个值去暂停，换句话说，数组长度只需要设置奇数个。&lt;/p&gt;
&lt;h3 id=&quot;停止振动&quot;&gt;&lt;a href=&quot;#停止振动&quot; class=&quot;headerlink&quot; title=&quot;停止振动&quot;&gt;&lt;/a&gt;停止振动&lt;/h3&gt;&lt;p&gt;当调用 window.navigator.vibrate() 的参数为「0」、空白数组，或数组全为「0」时，即可取消目前进行中的振动。&lt;/p&gt;
&lt;h3 id=&quot;持续振动&quot;&gt;&lt;a href=&quot;#持续振动&quot; class=&quot;headerlink&quot; title=&quot;持续振动&quot;&gt;&lt;/a&gt;持续振动&lt;/h3&gt;&lt;p&gt;一些基于setInterval和clearInterval操作将允许您创建持续的振动：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vibrateInterval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Starts vibration at passed in level&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;startVibrate&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;duration&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    navigator.vibrate(duration);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Stops vibration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stopVibrate&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Clear interval and stop persistent vibrating&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(vibrateInterval) clearInterval(vibrateInterval);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    navigator.vibrate(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Start persistent vibration at given duration and interval&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Assumes a number value is given&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;startPeristentVibrate&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;duration, interval&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vibrateInterval = setInterval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        startVibrate(duration);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, interval);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然上面的代码片段没有考虑到振动参数为数组情况; 基于阵列的持久性振动将需要计算数组项的和，并基于该数量创建周期（可能具有额外的延迟）。&lt;/p&gt;
&lt;h3 id=&quot;生成振动节奏&quot;&gt;&lt;a href=&quot;#生成振动节奏&quot; class=&quot;headerlink&quot; title=&quot;生成振动节奏&quot;&gt;&lt;/a&gt;生成振动节奏&lt;/h3&gt;&lt;p&gt;可以通过&lt;a href=&quot;https://naschq.github.io/vibe.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vibe.js tool&lt;/a&gt;这个工具来生成你需要的振动频率，然后复制它到你的代码里。&lt;/p&gt;
&lt;h3 id=&quot;lib&quot;&gt;&lt;a href=&quot;#lib&quot; class=&quot;headerlink&quot; title=&quot;lib&quot;&gt;&lt;/a&gt;lib&lt;/h3&gt;&lt;p&gt;我写了一个小lib，方便使用&lt;a href=&quot;https://github.com/Robin-front/vibrate.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vibrate.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;demo: &lt;a href=&quot;https://robin-front.github.io/vibrate.js/example/demo.html&quot;&gt;DEMO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译自： &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN Vibration API&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;目前大多数的移动设备均具备硬件能力支持振动，让软件代码通过使设备摇晃来向用户提供物理反馈。Vibration API 为 Web应用程序提供访问此硬件的能力。如果设备不支持，则不会产生任何效果。&lt;br&gt;
    
    </summary>
    
      <category term="Vibration" scheme="http://robin-front.github.io/categories/Vibration/"/>
    
      <category term="html5" scheme="http://robin-front.github.io/categories/Vibration/html5/"/>
    
    
      <category term="Vibration" scheme="http://robin-front.github.io/tags/Vibration/"/>
    
  </entry>
  
  <entry>
    <title>由lodash引出数组Array的slice方法性能探究</title>
    <link href="http://robin-front.github.io/2016/11/25/%E7%94%B1lodash%E5%BC%95%E5%87%BA%E6%95%B0%E7%BB%84Array%E7%9A%84slice%E6%96%B9%E6%B3%95%E6%80%A7%E8%83%BD%E6%8E%A2%E7%A9%B6/"/>
    <id>http://robin-front.github.io/2016/11/25/由lodash引出数组Array的slice方法性能探究/</id>
    <published>2016-11-25T03:05:19.000Z</published>
    <updated>2016-11-25T03:05:19.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;lodash&lt;/code&gt; 源码中，发现数组截取操作并没有直接使用&lt;code&gt;array&lt;/code&gt;的&lt;code&gt;slice&lt;/code&gt;方法，而是写了个 &lt;code&gt;baseSlice&lt;/code&gt; 方法，更重要的是 &lt;code&gt;baseSlice&lt;/code&gt; 方法里，也并没有使用 &lt;code&gt;slice&lt;/code&gt; 方法，而是使用循环索引的方式去实现。这让我陷入思考，难道原生Array的&lt;code&gt;slice&lt;/code&gt;方法还不如循环快？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;code&gt;lodash&lt;/code&gt; 源码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;baseSlice&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array, start, end&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      length = array.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (start &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start = -start &amp;gt; length ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : (length + start);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  end = end &amp;gt; length ? length : end;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (end &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end += length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  length = start &amp;gt; end ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : ((end - start) &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  start &amp;gt;&amp;gt;&amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (++index &amp;lt; length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result[index] = array[index + start];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;于是就开始写代码比较：&lt;/p&gt;
&lt;p&gt;  操作长度为100的数组，执行10000次：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; baseArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (++ i &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 定义一个10000长度的数组以供使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baseArray[i] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;slice with no args&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baseArray.slice();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;slice with no args&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;slice with args&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baseArray.slice(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;slice with args&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;index&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; length = baseArray.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (++index &amp;lt; length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result[index] = baseArray[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;index&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;index with no init array&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; length = baseArray.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (++index &amp;lt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result[index] = baseArray[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;index with no init array&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对比结果：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// chrome 版本 54.0.2840.98 (64-bit)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;93.3&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;175&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;365&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no init &lt;span class=&quot;attribute&quot;&gt;array&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;546&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// safari 版本 9.0.2 (11601.3.9)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;122.152&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;117.181&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;60076.301&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no init &lt;span class=&quot;attribute&quot;&gt;array&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;62055.406&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//firefox 50.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;462.07&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;442.25&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;194206.08&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no init &lt;span class=&quot;attribute&quot;&gt;array&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;184714.59&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于mac ox无法测试IE,&lt;br&gt;可以看出，chrome总体要比safafi、firefox快很多；&lt;br&gt;slice方法上，safari和chrome差不多， chrome下slice有参数比无参数慢；&lt;br&gt;新建数组Array()和 []性能差不多；&lt;/p&gt;
&lt;p&gt;这么看来，那用原生 slice 明显会更好，为什么 lodash 要用循环索引呢？难道是因为一般应用数组都不会这么大，那改成长度为100的数组进行操作；&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// chrome&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4.12&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5.82&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no init &lt;span class=&quot;attribute&quot;&gt;array&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;7.96&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// safari&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;9.158&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;8.432&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;640.311&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no init &lt;span class=&quot;attribute&quot;&gt;array&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;643.174&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//firefox&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;17.56&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;17.53&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2174.15&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no init &lt;span class=&quot;attribute&quot;&gt;array&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2198.15&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;发现结论并没有改变。&lt;br&gt;然后就向lodash提了question, 回复是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The perf wins of Array#slice vs. baseSlice depends on the size of the array. That is a minor point though as the perf of that method is not likely to be an issue. The reason we use baseSlice is because we treat arrays as dense while Array#slice will respect sparse arrays.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概意思是，他觉得性能没有太大的差别，Array#slice和baseSlice性能强弱取决于数组的大小。这里采用baseSlice是因为他们要视所有为密集数据，而Array#slice会处理稀疏数组。&lt;/p&gt;
&lt;p&gt;然后就有下面的测试：&lt;/p&gt;
&lt;p&gt;使用 Array#slice和baseSlice 分别截取数组其中一段，循环1000000次：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; baseArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (++ i &amp;lt; &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 定义一个10000长度的数组以供使用,这里数组长度并不影响性能，性能影响主要在于截取的长度。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baseArray[i] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;slice with args&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baseArray.slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;slice with args&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;index&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (++index &amp;lt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result[index] = baseArray[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;index&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不同截取长度在chrome下的效果：&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 截取长度 20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;78.9&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 截取长度 30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;114&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;112&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 截取长度 30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;132&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;146&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由此看出，截取长度为30左右时，Array#slice和loop方式性能基本一样，而 Array#slice 基本不受截取长度的影响。&lt;br&gt;所以结论是，当长度为30以下时，lodash的方法是比较高效的，当然，这影响微乎其微。像_.chunk方法，一般场景分组都不会太长。&lt;/p&gt;
&lt;p&gt;疑惑是，对我的回复的后半句我没怎么看懂，密集数据和稀疏数据对这有什么影响呢？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;lodash&lt;/code&gt; 源码中，发现数组截取操作并没有直接使用&lt;code&gt;array&lt;/code&gt;的&lt;code&gt;slice&lt;/code&gt;方法，而是写了个 &lt;code&gt;baseSlice&lt;/code&gt; 方法，更重要的是 &lt;code&gt;baseSlice&lt;/code&gt; 方法里，也并没有使用 &lt;code&gt;slice&lt;/code&gt; 方法，而是使用循环索引的方式去实现。这让我陷入思考，难道原生Array的&lt;code&gt;slice&lt;/code&gt;方法还不如循环快？&lt;/p&gt;
    
    </summary>
    
      <category term="lodash" scheme="http://robin-front.github.io/categories/lodash/"/>
    
      <category term="array" scheme="http://robin-front.github.io/categories/lodash/array/"/>
    
      <category term="slice" scheme="http://robin-front.github.io/categories/lodash/array/slice/"/>
    
    
      <category term="lodash" scheme="http://robin-front.github.io/tags/lodash/"/>
    
      <category term="array" scheme="http://robin-front.github.io/tags/array/"/>
    
      <category term="slice" scheme="http://robin-front.github.io/tags/slice/"/>
    
  </entry>
  
</feed>
