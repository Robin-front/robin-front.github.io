<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>三寸稚笔</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://robin-front.github.io/"/>
  <updated>2017-06-14T15:28:54.000Z</updated>
  <id>http://robin-front.github.io/</id>
  
  <author>
    <name>robin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flow和TypeScript之间的区别和优劣</title>
    <link href="http://robin-front.github.io/2017/06/14/Flow%E5%92%8CTypeScript%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E4%BC%98%E5%8A%A3/"/>
    <id>http://robin-front.github.io/2017/06/14/Flow和TypeScript之间的区别和优劣/</id>
    <published>2017-06-14T15:28:54.000Z</published>
    <updated>2017-06-14T15:28:54.000Z</updated>
    
    <content type="html">&lt;p&gt;采用Flow＆TypeScript, 两者上手流程之间的比较。&lt;/p&gt;
&lt;p&gt;让我们想象一下我们想要采用一种类型检查器的场景…&lt;/p&gt;
&lt;p&gt;本文译自： &lt;a href=&quot;http://thejameskyle.com/adopting-flow-and-typescript.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;adopting flow and typescript&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最近我们已经注意到了我们的应用程序中的很多NaN的出现。我们搜索源代码并找到以下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// math.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们对自己叹了口气，也许决定添加一个类型检查器。我们退后一步，查看我们的选项： &lt;a href=&quot;https://flow.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flow&lt;/a&gt; 或 &lt;a href=&quot;http://www.typescriptlang.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TypeScript&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这两个工具都有相当简单的方法给逐个文件应用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flow: &lt;code&gt;// @flow&lt;/code&gt; 向文件顶部添加注释&lt;/li&gt;
&lt;li&gt;TypeScript：将扩展名更改为&lt;code&gt;.js&lt;/code&gt;扩展&lt;code&gt;.ts&lt;/code&gt; 名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是让我们比较一下这里面发生了什么。&lt;/p&gt;
&lt;h3 id=&quot;采用TypeScript&quot;&gt;&lt;a href=&quot;#采用TypeScript&quot; class=&quot;headerlink&quot; title=&quot;采用TypeScript&quot;&gt;&lt;/a&gt;采用TypeScript&lt;/h3&gt;&lt;p&gt;要采用TypeScript，我们首先重命名&lt;code&gt;math.js&lt;/code&gt;为 &lt;code&gt;math.ts&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// math.ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们将运行typescript：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(no errors)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;没有错误，是因为TypeScript要求我们给函数键入注释，然后才会根据注释检查类型。如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n: number&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;number&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果没有这些类型，TypeScript将根据您的配置执行下面两件事情之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;隐含地将每个未知类型转换为&lt;code&gt;any&lt;/code&gt;。这种任何类型将让您退出所有类型检查。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;或者如果您使用了&lt;code&gt;--noImplicitAny&lt;/code&gt;选项，它会为任何未知类型抛出错误，指明需要添加类型注释。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这意味着TypeScript 覆盖的代码量与您所写的类型相关。写入类型时，类型coverage将线性上升。&lt;/p&gt;
&lt;h3 id=&quot;类型覆盖（type-coverage）&quot;&gt;&lt;a href=&quot;#类型覆盖（type-coverage）&quot; class=&quot;headerlink&quot; title=&quot;类型覆盖（type coverage）&quot;&gt;&lt;/a&gt;类型覆盖（type coverage）&lt;/h3&gt;&lt;p&gt;在我们进一步讲解之前，我应该解释一下什么是类型覆盖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://thejameskyle.com/img/type-coverage.png&quot; alt=&quot;未有类型覆盖的代码用红色显示&quot;&gt;&lt;/p&gt;
&lt;p&gt;未有类型覆盖的代码用红色显示&lt;/p&gt;
&lt;p&gt;如果你看到你的代码中的值和表达式，并问类型检查器“你知道这是什么类型吗”。&lt;/p&gt;
&lt;p&gt;如果类型检查器知道它类型，则覆盖该值或表达式。如果类型检查器不知道类型，那么它没有被覆盖。&lt;/p&gt;
&lt;p&gt;您希望您的程序尽可能多地提供类型覆盖，因为这样可以在更多地方抛出错误时提前告诉您。&lt;/p&gt;
&lt;p&gt;没有类型覆盖，类型检查器什么都不是。&lt;/p&gt;
&lt;h3 id=&quot;采用Flow&quot;&gt;&lt;a href=&quot;#采用Flow&quot; class=&quot;headerlink&quot; title=&quot;采用Flow&quot;&gt;&lt;/a&gt;采用Flow&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// @flow&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们将运行Flow并查看结果：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ^   ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt; (x2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt; (x2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string. The operand &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; an arithmetic operation must be a number.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;紧接着就抛出了类型错误，告诉我们代码出了问题。&lt;/p&gt;
&lt;p&gt;Flow 只需要我们键入文件和外部模块的导出。可以推测出其他一切。&lt;/p&gt;
&lt;p&gt;这使得类型覆盖率快得多。只需几种类型，您可以快速获取具有非常高类型覆盖率的文件。&lt;/p&gt;
&lt;p&gt;根据我的经验，我可以在短短几分钟内将文件覆盖约70-90％。&lt;/p&gt;
&lt;p&gt;这是一个非常科学的差异图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://thejameskyle.com/img/adopting-flow-and-typescript-graph.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这不是我一家之言，你可以自己尝试一下，看看几种类型的区别。&lt;/p&gt;
&lt;p&gt;要查看Flow中文件的类型覆盖，可以运行：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;flow coverage path/to/file.js --color&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;您还可以使用 &lt;a href=&quot;https://github.com/rpl/flow-coverage-report&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;流量报告&lt;/a&gt; 来帮助您。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：我没有注意到TypeScript 有任何的类型报告工具（如果您知道一个，请给我发送一个链接）。但是，您可以测试代码是否覆盖，以确定当您出现错误时是否会报告错误。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;这个的工作原理是什么&quot;&gt;&lt;a href=&quot;#这个的工作原理是什么&quot; class=&quot;headerlink&quot; title=&quot;这个的工作原理是什么&quot;&gt;&lt;/a&gt;这个的工作原理是什么&lt;/h3&gt;&lt;p&gt;这两种工具具有不同行为的原因归结于其架构之间的区别。&lt;/p&gt;
&lt;h4 id=&quot;TypeScript体系结构：AST导向&quot;&gt;&lt;a href=&quot;#TypeScript体系结构：AST导向&quot; class=&quot;headerlink&quot; title=&quot;TypeScript体系结构：AST导向&quot;&gt;&lt;/a&gt;TypeScript体系结构：AST导向&lt;/h4&gt;&lt;p&gt;TypeScript将遍历您的程序并构建已知类型的表。当它发现值和表达式时，它会立即为其分配类型。当TypeScript发现一个未知的类型时，它必须立即作出决定，这意味着将其分配给&lt;code&gt;any&lt;/code&gt;或抛出错误。&lt;/p&gt;
&lt;h4 id=&quot;Flow-架构：图形导向&quot;&gt;&lt;a href=&quot;#Flow-架构：图形导向&quot; class=&quot;headerlink&quot; title=&quot;Flow 架构：图形导向&quot;&gt;&lt;/a&gt;Flow 架构：图形导向&lt;/h4&gt;&lt;p&gt;Flow 将建立一个你所有的值和表达式及其彼此之间的关系的图表。然后，它将开始为每个值和表达式分配类型。如果它找到一个未知的类型，它将使它成为一个“开放”类型，稍后再回来判断。&lt;/p&gt;
&lt;p&gt;一旦Flow具有您的程序的完整蓝图，它将开始连接所有点，从一个值连接到另一个值地跟踪类型。打开类型接受流入它们的所有值的类型 - 生成的类型称为 “推断类型”。&lt;/p&gt;
&lt;p&gt;你可以看这个是怎么回事。来看看我们在之前的类型错误：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         ^   ^&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt; (x2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt; (x2)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string. The operand &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; an arithmetic operation must be a number.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意错误是指向&lt;code&gt;n * n&lt;/code&gt;而不是 &lt;code&gt;square(&amp;quot;oops&amp;quot;)&lt;/code&gt;。因为我们没有写入一个类型为n的 “oops”字符串流入它，并且Flow开始检查n，就好像它是一个字符串。&lt;/p&gt;
&lt;p&gt;添加类型注释我们可以看到错误点移动了：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;square&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n: number&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n * n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;square(&lt;span class=&quot;string&quot;&gt;&quot;oops&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       ^ &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;: string.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This type is incompatible &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; the expected param type &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; number.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这提出了一个重要的一点：Flow可以在任何地方自动推断类型并不意味着你不应该添加类型注释你的代码。&lt;/p&gt;
&lt;h3 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h3&gt;&lt;p&gt;TypeScript和Flow都有非常好的上手过程。一个个文件地尝试是一个很好的经历。&lt;/p&gt;
&lt;p&gt;但是，如果使用Flow，你就会有更高以及更快的覆盖类型，你就可以安心睡觉。&lt;/p&gt;
&lt;p&gt;使用Flow，您可以添加类型以使错误更友好，而不仅只是发现它们。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;采用Flow＆TypeScript, 两者上手流程之间的比较。&lt;/p&gt;
&lt;p&gt;让我们想象一下我们想要采用一种类型检查器的场景…&lt;/p&gt;
&lt;p&gt;本文译自： &lt;a href=&quot;http://thejameskyle.com/adopting-flow-and-typescript.html&quot;&gt;adopting flow and typescript&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Flow" scheme="http://robin-front.github.io/categories/Flow/"/>
    
      <category term="TypeScript" scheme="http://robin-front.github.io/categories/Flow/TypeScript/"/>
    
    
      <category term="Flow" scheme="http://robin-front.github.io/tags/Flow/"/>
    
      <category term="TypeScript" scheme="http://robin-front.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Lerp的应用-利用简单线性插值来平滑动画效果</title>
    <link href="http://robin-front.github.io/2017/03/20/Lerp%E7%9A%84%E5%BA%94%E7%94%A8-%E5%88%A9%E7%94%A8%E7%AE%80%E5%8D%95%E7%BA%BF%E6%80%A7%E6%8F%92%E5%80%BC%E6%9D%A5%E5%B9%B3%E6%BB%91%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    <id>http://robin-front.github.io/2017/03/20/Lerp的应用-利用简单线性插值来平滑动画效果/</id>
    <published>2017-03-20T03:04:39.000Z</published>
    <updated>2017-03-20T03:04:39.000Z</updated>
    
    <content type="html">&lt;p&gt;上一篇的 &lt;a href=&quot;http://robin-front.github.io/2017/03/19/RxJS%E7%9A%84%E5%8A%A8%E7%94%BB%E7%AE%80%E4%BB%8B/&quot;&gt;RxJS的动画简介&lt;/a&gt; 里提到一个动画平滑的小技巧, 这里展示几个例子，它真的很简单却很有用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Lerp&lt;/code&gt;是两点之间的线性插值的别称。这是一个实现起来相当简单的效果，但可以真正改善你的动画的外观，如果你将一个对象从点A移动到点B.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;它是如何工作的？&quot;&gt;&lt;a href=&quot;#它是如何工作的？&quot; class=&quot;headerlink&quot; title=&quot;它是如何工作的？&quot;&gt;&lt;/a&gt;它是如何工作的？&lt;/h1&gt;&lt;p&gt;如果您有一个对象的当前位置和目标的位置，您可以线性内插这些点之间的距离的百分比，并在每个动画帧上更新该位置。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lerp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;position, targetPosition&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 计算当前位置与目标位置差值的 20%&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  position.x += (targetPosition.x - position.x)*&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  position.y += (targetPosition.y - position.y)*&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过这样做，对象移动的量随着位置和目标之间的距离减小而变小。这意味着对象将越来越接近它的目标，速度将减慢，这创造一个很好的缓和效果。&lt;/p&gt;
&lt;h1 id=&quot;一些例子&quot;&gt;&lt;a href=&quot;#一些例子&quot; class=&quot;headerlink&quot; title=&quot;一些例子&quot;&gt;&lt;/a&gt;一些例子&lt;/h1&gt;&lt;p&gt;这里有一个球跟随用户的鼠标或触摸运动的例子。如果我们使球移动到鼠标移动的地方，球的移动可以非常快但看起来有点脱节。如果我们快速移动鼠标，我们也可以看到单独的“球影”。&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//codepen.io/anon/embed/avXmyV?slug-hash=avXmyV&amp;default-tab=result&amp;height=300&amp;theme-id=1970&amp;user=anon&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;这里是同样的演示，除了这次我们使用lerp。不是将球立即向右移动到鼠标位置，我们每次将它移动10％的距离。&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//codepen.io/anon/embed/yYZapV?slug-hash=yYZapV&amp;default-tab=result&amp;height=300&amp;theme-id=1970&amp;user=anon&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;注意球的运动很平滑，整体更令人愉快的效果。&lt;/p&gt;
&lt;p&gt;这里是使用lerp的另一个例子。这次我们有一个滚动指示器，当您向下滚动“页面”时更新。&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//codepen.io/anon/embed/rOPMvz?slug-hash=rOPMvz&amp;default-tab=result&amp;height=300&amp;theme-id=1970&amp;user=anon&quot;&gt;&lt;/iframe&gt;

&lt;iframe width=&quot;100%&quot; height=&quot;300&quot; src=&quot;//codepen.io/anon/embed/epxdxe?slug-hash=epxdxe&amp;default-tab=result&amp;height=300&amp;theme-id=1970&amp;user=anon&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;所以，lerp“把戏”是一个伟大的工具，我们的网络动画套路，以对抗线性或锯齿状的运动。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇的 &lt;a href=&quot;http://robin-front.github.io/2017/03/19/RxJS%E7%9A%84%E5%8A%A8%E7%94%BB%E7%AE%80%E4%BB%8B/&quot;&gt;RxJS的动画简介&lt;/a&gt; 里提到一个动画平滑的小技巧, 这里展示几个例子，它真的很简单却很有用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Lerp&lt;/code&gt;是两点之间的线性插值的别称。这是一个实现起来相当简单的效果，但可以真正改善你的动画的外观，如果你将一个对象从点A移动到点B.&lt;br&gt;
    
    </summary>
    
      <category term="animate" scheme="http://robin-front.github.io/categories/animate/"/>
    
    
      <category term="animate" scheme="http://robin-front.github.io/tags/animate/"/>
    
  </entry>
  
  <entry>
    <title>RxJS的动画简介</title>
    <link href="http://robin-front.github.io/2017/03/19/RxJS%E7%9A%84%E5%8A%A8%E7%94%BB%E7%AE%80%E4%BB%8B/"/>
    <id>http://robin-front.github.io/2017/03/19/RxJS的动画简介/</id>
    <published>2017-03-19T06:40:21.000Z</published>
    <updated>2017-03-19T06:40:21.000Z</updated>
    
    <content type="html">&lt;p&gt;本文译自 &lt;a href=&quot;https://css-tricks.com/animated-intro-rxjs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;An Animated Intro to RxJS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你可能听说过RxJS，ReactiveX，或反应式编程，或者甚至只听过函数式编程。这些术语在谈论最新和最前沿的前端技术时变得越来越突出。如果你像我一样，当你第一次尝试学习它时，你感到很困惑。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据&lt;a href=&quot;http://reactivex.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactiveX.io&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ReactiveX是一个库，用于通过使用可观察序列来组成异步和基于事件的程序。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这句话包含了很多要消化的内容。在本文中，我们将采用一种不同的方法来学习RxJS（ReactiveX的JavaScript实现）和&lt;code&gt;Observables&lt;/code&gt;，通过创建反应式动画。&lt;/p&gt;
&lt;h1 id=&quot;理解Observable&quot;&gt;&lt;a href=&quot;#理解Observable&quot; class=&quot;headerlink&quot; title=&quot;理解Observable&quot;&gt;&lt;/a&gt;理解Observable&lt;/h1&gt;&lt;p&gt;数组是元素的集合，例如[1, 2, 3, 4, 5]。你可以立即得到所有的元素，你可以做的事情像&lt;code&gt;map&lt;/code&gt;，&lt;code&gt;filter&lt;/code&gt;和映射他们。这允许你以任何你想要的方式转换元素的集合。&lt;/p&gt;
&lt;p&gt;现在假设阵列中的每个元素随时间发生; 也就是说，你不是立即得到所有的元素，而是一次一个。你可能得到第一个元素在第1秒，下一个在第3秒，依此类推。以下是如何表示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/02/rx-article-1.svg&quot; alt=&quot;a steam of values&quot;&gt;&lt;/p&gt;
&lt;p&gt;这可以被描述为值的流，或事件序列，或更确切地，称为&lt;code&gt;observable&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;observable&lt;/code&gt;是随时间的值的集合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就像使用数组一样，您可以对这些值进行映射，过滤等操作，以创建和组合新的&lt;code&gt;observable&lt;/code&gt;。最后，你可以订阅这些&lt;code&gt;observable&lt;/code&gt;，并在&lt;code&gt;steam&lt;/code&gt;的值之后执行你想要做的事。这是RxJS的源。&lt;/p&gt;
&lt;h1 id=&quot;RxJS起步&quot;&gt;&lt;a href=&quot;#RxJS起步&quot; class=&quot;headerlink&quot; title=&quot;RxJS起步&quot;&gt;&lt;/a&gt;RxJS起步&lt;/h1&gt;&lt;p&gt;开始使用RxJS的最简单的方法是使用CDN，虽然有&lt;a href=&quot;http://reactivex.io/rxjs/manual/installation.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;很多方法可以安装&lt;/a&gt;，这取决于项目的需要。&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- the latest, minified version of RxJS --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;src&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;https://unpkg.com/@reactivex/rxjs@latest/dist/global/Rx.min.js&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一旦你的项目中有RxJS，你可以从任何东西中创建一个observable ：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; aboutAnything = &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从变量创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The observable emits that value, then completes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; meaningOfLife$ = Rx.Observable.just(aboutAnything);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从数组或可遍历的结构中创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The observable emits each item from the array, then completes.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; myNumber$ = Rx.Observable.from([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// From a promise.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The observable emits the result eventually, then completes (or errors).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; myData$ = Rx.Observable.fromPromise(fetch(&lt;span class=&quot;string&quot;&gt;&#39;http://example.com/users&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 从事件中创建&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The observable continuously emits events from the event listener.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mouseMove$ = Rx.Observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .fromEvent(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement, &lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：变量末尾的美元符号&lt;code&gt;$&lt;/code&gt;是一个约定，表示该变量是一个可观察者。&lt;code&gt;Observable&lt;/code&gt;可以用来对任何可以表示为随时间变化的值的流进行建模，例如事件，Promises，计时器，间隔和动画。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;因为，这些可观察的东西不做任何事情，至少直到你实际观察他们。一个简单的订阅将做到这一点，使用创建&lt;code&gt;.subscribe()&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;myNumber$.subscribe(number =&amp;gt; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(number));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Result:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;gt; 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;gt; 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;gt; 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;gt; 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;gt; 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;让我们实践看看：&lt;/p&gt;
&lt;iframe height=&quot;400&quot; width=&quot;100%&quot; src=&quot;//codepen.io/davidkpiano/embed/d6f5fa72a9b7b6c2c9141de6fa1ab93f?height=400&amp;theme-id=1&amp;slug-hash=d6f5fa72a9b7b6c2c9141de6fa1ab93f&amp;default-tab=js%2Cresult&amp;user=davidkpiano&amp;embed-version=2&amp;pen-title=&quot;&gt;&lt;/iframe&gt;

&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; docElm = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; cardElm = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#card&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; titleElm = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#title&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mouseMove$ = Rx.Observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .fromEvent(docElm, &lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mouseMove$.subscribe(event =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  titleElm.innerHTML = &lt;span class=&quot;string&quot;&gt;`&lt;span class=&quot;subst&quot;&gt;$&amp;#123;event.clientX&amp;#125;&lt;/span&gt;, &lt;span class=&quot;subst&quot;&gt;$&amp;#123;event.clientY&amp;#125;&lt;/span&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从&lt;code&gt;mouseMove$&lt;/code&gt;观察到的，每次&lt;code&gt;mousemove&lt;/code&gt;事件发生时，订阅改变&lt;code&gt;titleElm&lt;/code&gt;的&lt;code&gt;.innerHTML&lt;/code&gt;的鼠标的位置。该&lt;a href=&quot;http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-map&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;.map&lt;/code&gt;&lt;/a&gt;操作（据工作原理类似&lt;code&gt;Array.prototype.map&lt;/code&gt;方法）可帮助简化事情：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Produces e.g., &amp;#123;x: 42, y: 100&amp;#125; instead of the entire event&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mouseMove$ = Rx.Observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .fromEvent(docElm, &lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .map(event =&amp;gt; (&amp;#123; x: event.clientX, y: event.clientY &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用一些数学和内联样式，您可以使卡片朝向鼠标旋转。&lt;code&gt;pos.y / clientHeight&lt;/code&gt;和&lt;code&gt;pos.x / clientWidth&lt;/code&gt;计算为0和1之间的值，所以乘以由50减去一半（25）产生的值从-25到25，这正是我们需要为我们的旋转值：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;500&quot; src=&quot;//codepen.io/davidkpiano/embed/55cb38a26b9166c41017c6512ea00209?height=500&amp;theme-id=1&amp;slug-hash=55cb38a26b9166c41017c6512ea00209&amp;default-tab=js%2Cresult&amp;user=davidkpiano&amp;embed-version=2&amp;pen-title=&quot;&gt;&lt;/iframe&gt;

&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; docElm = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; cardElm = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#card&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; titleElm = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.querySelector(&lt;span class=&quot;string&quot;&gt;&#39;#title&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &amp;#123; clientWidth, clientHeight &amp;#125; = docElm;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mouseMove$ = Rx.Observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .fromEvent(docElm, &lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .map(event =&amp;gt; (&amp;#123; x: event.clientX, y: event.clientY &amp;#125;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mouseMove$.subscribe(pos =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; rotX = (pos.y / clientHeight * &lt;span class=&quot;number&quot;&gt;-50&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; rotY = (pos.x / clientWidth * &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;) - &lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  cardElm.style = &lt;span class=&quot;string&quot;&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transform: rotateX(&lt;span class=&quot;subst&quot;&gt;$&amp;#123;rotX&amp;#125;&lt;/span&gt;deg) rotateY(&lt;span class=&quot;subst&quot;&gt;$&amp;#123;rotY&amp;#125;&lt;/span&gt;deg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;使用-merge-合并&quot;&gt;&lt;a href=&quot;#使用-merge-合并&quot; class=&quot;headerlink&quot; title=&quot;使用 .merge 合并&quot;&gt;&lt;/a&gt;使用 &lt;code&gt;.merge&lt;/code&gt; 合并&lt;/h1&gt;&lt;p&gt;现在让我们假设你想让这个适应触摸设备，不管是鼠标事件或是触摸动作。没有任何混乱的回调，你可以通过RxJS使用很多方法来结合&lt;code&gt;Observable&lt;/code&gt;。在这个例子中，可以使用&lt;code&gt;.merge&lt;/code&gt;实现。就像交通多条车道合并成一个单一的车道，这将返回一个包含所有数据的&lt;code&gt;Observable&lt;/code&gt;通过合并多个&lt;code&gt;Observable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/02/merge.png&quot; alt=&quot;来源：http://rxmarbles.com/#merge&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; touchMove$ = Rx.Observable&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .fromEvent(docElm, &lt;span class=&quot;string&quot;&gt;&#39;touchmove&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .map(event =&amp;gt; (&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x: event.touches[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].clientX,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y: event.touches[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].clientY&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; move$ = Rx.Observable.merge(mouseMove$, touchMove$);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;move$.subscribe(pos =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;继续，尝试在触摸屏设备上平移左右：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;500&quot; src=&quot;//codepen.io/davidkpiano/embed/4a430c13f4faae099e5a34cb2a82ce6d?height=500&amp;theme-id=1&amp;slug-hash=4a430c13f4faae099e5a34cb2a82ce6d&amp;default-tab=js%2Cresult&amp;user=davidkpiano&amp;embed-version=2&amp;pen-title=&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;还有很多其他有用的&lt;code&gt;Observable&lt;/code&gt;&lt;a href=&quot;http://reactivex.io/documentation/operators.html#combining&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;合并方法&lt;/a&gt;，如&lt;code&gt;.switch()&lt;/code&gt;，&lt;code&gt;.combineLatest()&lt;/code&gt;和&lt;code&gt;.withLatestFrom()&lt;/code&gt;，我们继续关注下一个点。&lt;/p&gt;
&lt;h1 id=&quot;添加平滑的运动&quot;&gt;&lt;a href=&quot;#添加平滑的运动&quot; class=&quot;headerlink&quot; title=&quot;添加平滑的运动&quot;&gt;&lt;/a&gt;添加平滑的运动&lt;/h1&gt;&lt;p&gt;旋转卡动作有点太死板。只要鼠标（或手指）停止，旋转即刻停止。为了解决这个问题，线性内插（线性插值）都可以使用。一般技术中描述这个&lt;a href=&quot;https://codepen.io/rachsmith/post/animation-tip-lerp&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;伟大的教程由雷切尔·史密斯&lt;/a&gt;。本质上，而不是从A点跳到B，线性插值会在每一个动画运行一小部分。这将产生一个平滑的过渡，甚至当鼠标/触摸移动已停止。&lt;/p&gt;
&lt;p&gt;让我们创建一个函数实现这个功能：计算给定初始值和终值下一个值，采用线性插值：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;lerp&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;start, end&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dx = end.x - start.x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dy = end.y - start.y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    x: start.x + dx * &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    y: start.y + dy * &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;非常简约。我们有一个纯函数每次返回一个新的，线性内插的位置值，通过移动当前的（开始）接近每个动画帧上的下一个（完）位置10％的位置。&lt;/p&gt;
&lt;h1 id=&quot;调度和-interval&quot;&gt;&lt;a href=&quot;#调度和-interval&quot; class=&quot;headerlink&quot; title=&quot;调度和.interval&quot;&gt;&lt;/a&gt;调度和.interval&lt;/h1&gt;&lt;p&gt;问题是，我们如何在RxJS中表示动画帧？原来，RxJS有一个叫做&lt;code&gt;Schedulers&lt;/code&gt;的东西，它控制什么时候从一个&lt;code&gt;observable&lt;/code&gt;发出数据，当订阅都开始接收值。&lt;/p&gt;
&lt;p&gt;使用&lt;a href=&quot;http://reactivex.io/documentation/operators/interval.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Rx.Observable.interval()&lt;/code&gt;&lt;/a&gt;，您可以创建一个&lt;code&gt;observable&lt;/code&gt;，它在固定的时间间隔发出值，例如每隔一秒（Rx.Observable.interval(1000)）。如果创建一个非常微小的时间间隔，例如&lt;code&gt;Rx.Observable.interval(0)&lt;/code&gt;，并希望它只在每个动画帧上发出值，那么在动画帧内&lt;code&gt;Rx.Scheduler.animationFrame&lt;/code&gt;每隔16到17ms就会发出一个值，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; animationFrame$ = Rx.Observable.interval(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, Rx.Scheduler.animationFrame);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;结合-withLatestFrom&quot;&gt;&lt;a href=&quot;#结合-withLatestFrom&quot; class=&quot;headerlink&quot; title=&quot;结合.withLatestFrom&quot;&gt;&lt;/a&gt;结合&lt;code&gt;.withLatestFrom&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;要创建平滑线性插值，您只需要关心每个动画帧的最新鼠标或触摸位置。要做到这一点，有一个操作符叫&lt;code&gt;.withLatestFrom()&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; smoothMove$ = animationFrame$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .withLatestFrom(move$, (frame, move) =&amp;gt; move);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，&lt;code&gt;smoothMove$&lt;/code&gt;是一个新的&lt;code&gt;observable&lt;/code&gt;，&lt;code&gt;move$&lt;/code&gt; 只有当&lt;code&gt;animationFrame$&lt;/code&gt;发出一个值时，才会发出最新的值。这是必须的 - 你并不想要的动画帧外发出的值（除非你真的喜欢jank）。第二个参数是描述当组合来自每个可观察的最新值时要做什么的函数。在这种情况下，唯一重要的值是&lt;code&gt;move&lt;/code&gt;值，这是所有返回的值。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/02/with-latest-from.png&quot; alt=&quot;withLatestFrom&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;与过渡-scan&quot;&gt;&lt;a href=&quot;#与过渡-scan&quot; class=&quot;headerlink&quot; title=&quot;与过渡.scan&quot;&gt;&lt;/a&gt;与过渡&lt;code&gt;.scan&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;现在你有一个&lt;code&gt;observable&lt;/code&gt;从&lt;code&gt;move$&lt;/code&gt;每个动画帧发出最新的值，是时候添加线性插值了。&lt;a href=&quot;http://reactivex.io/documentation/operators/scan.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;.scan()&lt;/code&gt;&lt;/a&gt;运算符“积累”从可观察到的当前值和下一个值，提供给需要这些值的函数。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.css-tricks.com/wp-content/uploads/2017/02/scan.png&quot; alt=&quot;#scan&quot;&gt;&lt;/p&gt;
&lt;p&gt;这对于我们的线性插值用例是完美的。记住，我们的&lt;code&gt;lerp(start, end)&lt;/code&gt;函数有两个参数：&lt;code&gt;start（current）&lt;/code&gt;值和&lt;code&gt;end（next）&lt;/code&gt;值。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; smoothMove$ = animationFrame$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .withLatestFrom(move$, (frame, move) =&amp;gt; move)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .scan((current, next) =&amp;gt; lerp(current, next));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// or simplified: .scan(lerp)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在，您可以订阅&lt;code&gt;smoothMove$&lt;/code&gt;代替&lt;code&gt;move$&lt;/code&gt;在操作中查看线性插值：&lt;/p&gt;
&lt;iframe width=&quot;100%&quot; height=&quot;500&quot; src=&quot;//codepen.io/davidkpiano/embed/127ee82ad742b4dddd657703e2259852?height=500&amp;theme-id=1&amp;slug-hash=127ee82ad742b4dddd657703e2259852&amp;default-tab=js%2Cresult&amp;user=davidkpiano&amp;embed-version=2&amp;pen-title=&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h1&gt;&lt;p&gt;&lt;code&gt;RxJS&lt;/code&gt; 不是一个动画库，当然，但对于处理随时间变化的值，它的可组合以及声明性的方式是&lt;code&gt;ReactiveX&lt;/code&gt;演示动画的核心概念。反应式编程是考虑编程的另类方式，具有许多优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它是声明性的，可组合的和不可变的，避免回调地狱，并使你的代码更简洁，可重用和模块化。&lt;/li&gt;
&lt;li&gt;它在处理所有类型的异步数据时非常有用，无论是获取数据，通过&lt;code&gt;WebSockets&lt;/code&gt;进行通信，监听来自多个源的外部事件，甚至是动画。&lt;/li&gt;
&lt;li&gt;“关注的分离” - 您使用&lt;code&gt;Observable&lt;/code&gt;和运算符声明性地表示您期望的数据，然后在一个单独的上下文环境中处理&lt;code&gt;.subscribe()&lt;/code&gt;，而不会在您的原代码上产生副作用。&lt;/li&gt;
&lt;li&gt;有这么多语言的实现了它 - &lt;code&gt;Java&lt;/code&gt;，&lt;code&gt;PHP&lt;/code&gt;，&lt;code&gt;Python&lt;/code&gt;，&lt;code&gt;Ruby&lt;/code&gt;，&lt;code&gt;C＃&lt;/code&gt;，&lt;code&gt;Swift&lt;/code&gt;和其他你可能没有听说过的。&lt;/li&gt;
&lt;li&gt;它不是一个框架，它与许多流行的框架（如React，Angular和Vue）可以非常好地融合在一起。&lt;/li&gt;
&lt;li&gt;你可以得到行家指点，如果你想要，但&lt;code&gt;ReactiveX&lt;/code&gt;从被提出到现在实施了近十年前（2009年），由创意所产生的&lt;a href=&quot;http://conal.net/papers/icfp97/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Conal Elliott&lt;/code&gt;和保罗·胡达克&lt;/a&gt; 2年前（1997年），在描述功能性反应的动画（惊喜惊喜）。不用说，它经过了足够的测试。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文探讨了一些有用的部分和&lt;code&gt;RxJS&lt;/code&gt;的概念-创建与订阅&lt;code&gt;.fromEvent()&lt;/code&gt;和&lt;code&gt;.interval()&lt;/code&gt;，对订阅操作&lt;code&gt;.map()&lt;/code&gt;和&lt;code&gt;.scan()&lt;/code&gt;，多个订阅相结合&lt;code&gt;.merge()&lt;/code&gt;和&lt;code&gt;.withLatestFrom()&lt;/code&gt;，并与引入调度&lt;code&gt;Rx.Scheduler.animationFrame&lt;/code&gt;。有很多其他有用的资源学习RxJS：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://reactivex.io/rxjs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ReactiveX：RxJS&lt;/a&gt; - 官方文档&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rxmarbles.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxMarbles&lt;/a&gt; - 用于可视化观察&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Reactive编程的介绍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你想进一步深入&lt;code&gt;RxJS动画&lt;/code&gt;（和使用更多的CSS变量），请查看&lt;a href=&quot;http://slides.com/davidkhourshid/reactanim#/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我的幻灯片从&lt;code&gt;CSS Dev Conf 2016&lt;/code&gt;&lt;/a&gt;和&lt;a href=&quot;https://www.youtube.com/watch?v=lTCukb6Zn3g&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;我2016年的演讲从JSConf冰岛&lt;/a&gt;关于反应式动画与CSS变量。这里有一些使用RxJS创建的动画可能对触发灵感有帮助：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/davidkpiano/pen/Vmyyzd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;3D数字时钟&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/davidkpiano/pen/mAoaxP&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;心脏app概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://codepen.io/Enki/pen/eBwKgO&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;透视使用RxJS拖动&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文译自 &lt;a href=&quot;https://css-tricks.com/animated-intro-rxjs/&quot;&gt;An Animated Intro to RxJS&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你可能听说过RxJS，ReactiveX，或反应式编程，或者甚至只听过函数式编程。这些术语在谈论最新和最前沿的前端技术时变得越来越突出。如果你像我一样，当你第一次尝试学习它时，你感到很困惑。&lt;br&gt;
    
    </summary>
    
      <category term="RxJS" scheme="http://robin-front.github.io/categories/RxJS/"/>
    
    
      <category term="RxJS" scheme="http://robin-front.github.io/tags/RxJS/"/>
    
  </entry>
  
  <entry>
    <title>通过动图简单通俗地了解Flexbox的工作原理</title>
    <link href="http://robin-front.github.io/2017/03/13/%E9%80%9A%E8%BF%87%E5%8A%A8%E5%9B%BE%E7%AE%80%E5%8D%95%E9%80%9A%E4%BF%97%E5%9C%B0%E4%BA%86%E8%A7%A3Flexbox%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
    <id>http://robin-front.github.io/2017/03/13/通过动图简单通俗地了解Flexbox的工作原理/</id>
    <published>2017-03-13T03:31:42.000Z</published>
    <updated>2017-03-13T03:31:42.000Z</updated>
    
    <content type="html">&lt;p&gt;本文译自 &lt;a href=&quot;https://medium.freecodecamp.com/even-more-about-how-flexbox-works-explained-in-big-colorful-animated-gifs-a5a74812b053#.iwqlenuqq&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scott Domes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Flex属性是一个复合属性，而大部分教程中都只设置一个值，但其实它包含了 &lt;code&gt;flex-basis&lt;/code&gt;、&lt;code&gt;flex-grow&lt;/code&gt;、&lt;code&gt;flex-shrink&lt;/code&gt;.&lt;br&gt;让我们深入了解Flexbox - 以及如何利用它来构建适应性强和漂亮的布局.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;属性一：-Flex-Basis&quot;&gt;&lt;a href=&quot;#属性一：-Flex-Basis&quot; class=&quot;headerlink&quot; title=&quot;属性一： Flex-Basis&quot;&gt;&lt;/a&gt;属性一： Flex-Basis&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;https://medium.freecodecamp.com/an-animated-guide-to-flexbox-d280cf6afc35#.s7qtdlnbf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;上一篇文章&lt;/a&gt;中，我们主要把它用于外部容器中。这一次，我们试着把它用在容器内的子元素中。&lt;/p&gt;
&lt;p&gt;这是一个很不起眼的属性，但也很直接。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Flex-basis&lt;/code&gt; 控制着一个元素的默认大小，在其他 flex 属性应用之前。&lt;/p&gt;
&lt;p&gt;在下面的 GIF 看来，它的作用和 &lt;code&gt;width&lt;/code&gt; 的作用一样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*S3LKFr_BICUtAWA5LOFxVw.gif&quot; alt=&quot;flex-basis&quot;&gt;&lt;/p&gt;
&lt;p&gt;是什么让 &lt;code&gt;flex-basis&lt;/code&gt; 表现得和 &lt;code&gt;width&lt;/code&gt; 一样？事实上，它对应着 flex 的坐标轴。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/800/1*_Ruy6jFG7gUpSf76IUcJTQ.png&quot; alt=&quot;flex axes&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;flex-basis 影响无素在主轴上的大小&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;让我们看看保持 &lt;code&gt;flex-basis&lt;/code&gt; 的值不变，但是改变主轴方向会有什么变化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*W4QU1Fw9kDLEH2m-J9VGyw.gif&quot; alt=&quot;flex direction&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意到，我从手动设置高度变成手动设置宽度。 &lt;code&gt;Flex-basis&lt;/code&gt; 影响宽度还是高度取决于 &lt;code&gt;flex-direction&lt;/code&gt; 的值。&lt;/p&gt;
&lt;h3 id=&quot;属性二：Flex-Grow&quot;&gt;&lt;a href=&quot;#属性二：Flex-Grow&quot; class=&quot;headerlink&quot; title=&quot;属性二：Flex Grow&quot;&gt;&lt;/a&gt;属性二：Flex Grow&lt;/h3&gt;&lt;p&gt;现在，我们来点更复杂的。&lt;/p&gt;
&lt;p&gt;首先，让我们设置给所有方块设置相同的宽度，120px:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*dON3-0RooiPyfDr0DBEOmA.png&quot; alt=&quot;same width&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在，当它加上属性 &lt;code&gt;flex-grow&lt;/code&gt;（默认值为0）.这意味着，不允许方块自动充满容器。&lt;/p&gt;
&lt;p&gt;没理解？现在给每个方块的 &lt;code&gt;flex-grow&lt;/code&gt; 属性设置为 &lt;code&gt;1&lt;/code&gt;：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*cK-yB4z_L6bmEqoG5qDoRA.png&quot; alt=&quot;flex-grow&quot;&gt;&lt;/p&gt;
&lt;p&gt;所有方块共同充满了容器的整个宽度，并且是平均分。 &lt;code&gt;flex-grow&lt;/code&gt; 属性覆盖了 &lt;code&gt;width&lt;/code&gt; 属性。&lt;/p&gt;
&lt;p&gt;让人困惑的是 &lt;code&gt;flex-grow&lt;/code&gt; 的值到底是什么意思？ &lt;code&gt;flex-grow: 1&lt;/code&gt; 意味着什么？&lt;/p&gt;
&lt;p&gt;好吧，下图是给每个方块设置 &lt;code&gt;flex-grow&lt;/code&gt; 值为 &lt;code&gt;999&lt;/code&gt; 的表现：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*p2fLcy13xFU9GjtM4cbHEw.png&quot; alt=&quot;flex-grow:999&quot;&gt;&lt;/p&gt;
&lt;p&gt;这真是。。完全一样。&lt;/p&gt;
&lt;p&gt;那是因为 &lt;code&gt;flex-grow&lt;/code&gt; 不是一个绝对的值，而是一个相对的值。&lt;/p&gt;
&lt;p&gt;重要的不是一个方块 &lt;code&gt;flex-grow&lt;/code&gt; 值的本身，而是这个值和其他方块的值的关系。&lt;/p&gt;
&lt;p&gt;如果给每个方块设置 &lt;code&gt;flex-grow: 1&lt;/code&gt;， 然后调整第3个方块的 &lt;code&gt;flex-grow&lt;/code&gt; 属性，可以看到如下变化：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*gHyLHG52cySgLmy0x-edZA.gif&quot; alt=&quot;flex-grow change&quot;&gt;&lt;/p&gt;
&lt;p&gt;想要真正明白这里发生了什么，让我们快速略过一个简单的数学计算。&lt;/p&gt;
&lt;p&gt;每个正方形都以flex-grow为1开始。如果我们将每个正方形的flex-grow相加，则总和为6。因此，容器被分成6个单独的部分。&lt;em&gt;每个正方形增长到可用空间的1/6以填满容器。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;当设置第3个方块的&lt;code&gt;flex-grow&lt;/code&gt; 为 2， 现在容器被分成7份，因为 &lt;code&gt;flex-grow&lt;/code&gt; 属性的值的总和为 &lt;code&gt;1+1+2+1+1+1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;方块3获得 2/7 的宽度，剩下的获得 1/7。&lt;/p&gt;
&lt;p&gt;当设置第3个方块为 &lt;code&gt;flex-grow: 3&lt;/code&gt;， 容器被分成8份（1+1+3+1+1+1）, 方块3占 3/8, 剩下的占 1/8.&lt;/p&gt;
&lt;p&gt;以此类推。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flex-grow&lt;/code&gt;是占所有值总和的比例。如果给所有方块设置&lt;code&gt;flex-grow: 4&lt;/code&gt;, 方块3设置 &lt;code&gt;flex-grow: 12&lt;/code&gt;, 效果和给它们分别设置 1 和 3 是一样的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*JnjR4ULs8de0so1bdUPogw.png&quot; alt=&quot;flex-grow&quot;&gt;&lt;/p&gt;
&lt;p&gt;最后一点，&lt;code&gt;flex-grow&lt;/code&gt; 和 &lt;code&gt;flex-basis&lt;/code&gt; 都和主轴对应。我们的方块只会增长宽度，除非设置 &lt;code&gt;flex-direction&lt;/code&gt; 为 &lt;code&gt;column&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&quot;属性三：-Flex-Shrink&quot;&gt;&lt;a href=&quot;#属性三：-Flex-Shrink&quot; class=&quot;headerlink&quot; title=&quot;属性三： Flex Shrink&quot;&gt;&lt;/a&gt;属性三： Flex Shrink&lt;/h3&gt;&lt;p&gt;&lt;code&gt;flex-shrink&lt;/code&gt; 和 &lt;code&gt;flex-grow&lt;/code&gt;正好相反，决定每个方块可以收缩多少。&lt;/p&gt;
&lt;p&gt;它只有在元素必须收缩以适应其容器时才起作用 - 即当容器太小时。&lt;/p&gt;
&lt;p&gt;它的主要用途是指定哪些元素要缩小，哪些元素不用缩小。默认情况下，每个方块的 &lt;code&gt;flex-shrink&lt;/code&gt; 值为1 - 这意味着它会随着容器的收缩而收缩。&lt;/p&gt;
&lt;p&gt;让我们看看它的表现。在下面的GIFS中，正方形的&lt;code&gt;flex-grow&lt;/code&gt;为1，因此它们填充了容器，并且&lt;code&gt;flex-shrink&lt;/code&gt;为1，因此它们被允许收缩.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*FVO9kX3wwqakhcT9JWS2Ww.gif&quot; alt=&quot;flex-shrink&quot;&gt;&lt;/p&gt;
&lt;p&gt;现在让我们将方块3的&lt;code&gt;flex-shrink&lt;/code&gt;设置为0.它禁止收缩，所以它会增长以适应容器，但它拒绝收缩到其设置的120px宽度以下。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*GrLzJ4jH3v2Z5Va_TMOXkQ.gif&quot; alt=&quot;flex-shrink&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flex-shrink&lt;/code&gt;的默认值是1 - 这意味着你的元素会收缩，除非设置为0去禁止它。&lt;/p&gt;
&lt;p&gt;同样，&lt;code&gt;flex-shrink&lt;/code&gt; 是按比例的。如果一个盒子的&lt;code&gt;flex-shrink&lt;/code&gt;为6，其余的&lt;code&gt;flex-shrink&lt;/code&gt;为2，一个盒子将以3倍的速度缩减，当空间被压缩。&lt;/p&gt;
&lt;p&gt;注意这里说的是：具有3x弹性收缩的方块将比其他方块缩短3倍。&lt;em&gt;这并不意味着它将收缩1/3的宽度。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;稍后，我们会深入了解这到底会收缩或增长多少，在此之前，先来看一下最后一个属性，并把所有混在一起。&lt;/p&gt;
&lt;h3 id=&quot;属性四：-Flex&quot;&gt;&lt;a href=&quot;#属性四：-Flex&quot; class=&quot;headerlink&quot; title=&quot;属性四： Flex&quot;&gt;&lt;/a&gt;属性四： Flex&lt;/h3&gt;&lt;p&gt;flex 是 grow, shrink 以及 basis 的缩写，复合属性。&lt;/p&gt;
&lt;p&gt;它的默认值是 0(grow) 1（shrink）auto(basis).&lt;/p&gt;
&lt;p&gt;最后一个例子，让我们简化到两个 boxs&lt;/p&gt;
&lt;p&gt;这是它们的属性：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.square&lt;/span&gt;&lt;span class=&quot;selector-id&quot;&gt;#one&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.square&lt;/span&gt;&lt;span class=&quot;selector-id&quot;&gt;#two&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;flex&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;300px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;两者都有相同的 &lt;code&gt;flex-basis&lt;/code&gt;属性。这意味着如果它们都有足够的空间（容器是600px加上边距和填充空间），它们都将是300px宽度。&lt;/p&gt;
&lt;p&gt;但随着容器的增长，Square 1（具有更高的flex-grow）将增长两倍。随着盒子的收缩，Square 2（具有更高的flex-shrink）将缩短两倍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*BKZt7AT5eFee4KRhe82gew.gif&quot; alt=&quot;all together&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;它是如何增长和收缩的&quot;&gt;&lt;a href=&quot;#它是如何增长和收缩的&quot; class=&quot;headerlink&quot; title=&quot;它是如何增长和收缩的&quot;&gt;&lt;/a&gt;它是如何增长和收缩的&lt;/h4&gt;&lt;p&gt;这里有可能会混淆：当Square 1增长时，它不会增长到Square 2的两倍。同样，当Square 2缩小时，它不会缩小到Square 1的一半大小 - 即使比率的收缩率为2比1。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这不是他们的大小 2比1或1比2.这是他们的收缩和增长的速度的比例。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;一点数学计算&quot;&gt;&lt;a href=&quot;#一点数学计算&quot; class=&quot;headerlink&quot; title=&quot;一点数学计算&quot;&gt;&lt;/a&gt;一点数学计算&lt;/h4&gt;&lt;p&gt;容器的起始大小为640像素。在容器的每一边占用20px的填充后，这留下了足够的空间，两个方块恢复到它们的&lt;code&gt;flex-basis&lt;/code&gt;的300px.&lt;/p&gt;
&lt;p&gt;当容器设置为430px时，我们丢失了210px的空间。正方形1，flex-shrink:1，失去70px。方形2，flex-shrink: 2，失去140px。&lt;/p&gt;
&lt;p&gt;当容器缩小到340px时，我们现在已经失去了300像素的空间。方块1损失100像素，方块2损失200像素.&lt;/p&gt;
&lt;p&gt;损失的空间根据它们各自的收缩率（2:1）的比率来分割。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;flex-grow&lt;/code&gt;同样。当容器增长到940px，我们获得了300px的空间，Square 1获得了额外的200px，Square 2获得了额外的100px。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1000/1*70-KTWYpA2LnLjqi0xDrJA.gif&quot; alt=&quot;grow and shrink&quot;&gt;&lt;/p&gt;
&lt;p&gt;在上面的GIF中，您可以看到宽度如何根据比率进行调整，增量（Δ）显示与基于&lt;code&gt;flex-basis&lt;/code&gt;的差异。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;本文译自 &lt;a href=&quot;https://medium.freecodecamp.com/even-more-about-how-flexbox-works-explained-in-big-colorful-animated-gifs-a5a74812b053#.iwqlenuqq&quot;&gt;Scott Domes&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Flex属性是一个复合属性，而大部分教程中都只设置一个值，但其实它包含了 &lt;code&gt;flex-basis&lt;/code&gt;、&lt;code&gt;flex-grow&lt;/code&gt;、&lt;code&gt;flex-shrink&lt;/code&gt;.&lt;br&gt;让我们深入了解Flexbox - 以及如何利用它来构建适应性强和漂亮的布局.&lt;br&gt;
    
    </summary>
    
      <category term="Flexbox" scheme="http://robin-front.github.io/categories/Flexbox/"/>
    
    
      <category term="Flexbox" scheme="http://robin-front.github.io/tags/Flexbox/"/>
    
  </entry>
  
  <entry>
    <title>js遍历Object对象可枚举属性、不可枚举属性、原型链属性和自身属性</title>
    <link href="http://robin-front.github.io/2017/01/13/js%E9%81%8D%E5%8E%86Object%E5%8F%AF%E6%9E%9A%E4%B8%BE%E5%B1%9E%E6%80%A7%E3%80%81%E4%B8%8D%E5%8F%AF%E6%9E%9A%E4%B8%BE%E5%B1%9E%E6%80%A7%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE%E5%B1%9E%E6%80%A7%E5%92%8C%E8%87%AA%E8%BA%AB%E5%B1%9E%E6%80%A7/"/>
    <id>http://robin-front.github.io/2017/01/13/js遍历Object可枚举属性、不可枚举属性、原型链属性和自身属性/</id>
    <published>2017-01-13T02:19:27.000Z</published>
    <updated>2017-01-13T02:19:27.000Z</updated>
    
    <content type="html">&lt;p&gt;利用hasOwnProperty、getOwnPropertyNames、Object.keys、for…in遍历对象的可枚举属性、不可枚举属性、原型链上的属性和自身属性。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先来看看各种方法的用法及兼容性。&lt;/p&gt;
&lt;h3 id=&quot;hasOwnProperty-NaN&quot;&gt;&lt;a href=&quot;#hasOwnProperty-NaN&quot; class=&quot;headerlink&quot; title=&quot;hasOwnProperty&quot;&gt;&lt;/a&gt;hasOwnProperty&lt;/h3&gt;&lt;p&gt;Object.prototype.hasOwnProperty(name) 方法用来判断某个对象是否含有指定的自身属性，它本身是对象原型链上的默认方法。&lt;/p&gt;
&lt;p&gt;hasOwnProperty 方法是 ES3 就标准化了，所以不用担心兼容性问题。&lt;/p&gt;
&lt;p&gt;但由于 hasOwnProperty 是原型链上的方法，所以有可能被对象的自身方法所屏蔽。如：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; foo = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;hasOwnProperty&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;bar&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;Here be dragons&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo.hasOwnProperty(&lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 始终返回 false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果担心这种情况，可以直接使用原型链上真正的 hasOwnProperty 方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(&amp;#123;&amp;#125;).hasOwnProperty.call(foo, &lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.hasOwnProperty.call(foo, &lt;span class=&quot;string&quot;&gt;&#39;bar&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;getOwnPropertyNames&quot;&gt;&lt;a href=&quot;#getOwnPropertyNames&quot; class=&quot;headerlink&quot; title=&quot;getOwnPropertyNames&quot;&gt;&lt;/a&gt;getOwnPropertyNames&lt;/h3&gt;&lt;p&gt;Object.getOwnPropertyNames(obj)方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性）组成的数组, 该方法不会获取到原型链上的属性。如：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 父类构造函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ParentClass&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ParentClass.prototype.inheritedMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 继承&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; ChildClass = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(ParentClass.prototype, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 不可枚举属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;getFoo&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.foo; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;enumerable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 自身可枚举属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChildClass.foo = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 再定义一个原型链属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ChildClass.prototype.prototypeMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyNames(my_obj).sort()); &lt;span class=&quot;comment&quot;&gt;// [&quot;foo&quot;, &quot;getFoo&quot;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;兼容性到 IE9, es 5标准。&lt;/p&gt;
&lt;h3 id=&quot;Object-keys&quot;&gt;&lt;a href=&quot;#Object-keys&quot; class=&quot;headerlink&quot; title=&quot;Object.keys()&quot;&gt;&lt;/a&gt;Object.keys()&lt;/h3&gt;&lt;p&gt;返回该对象的所有可枚举自身属性的属性名。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//具有随机键排序的数组类对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; an_obj = &amp;#123; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(an_obj)); &lt;span class=&quot;comment&quot;&gt;// console: [&#39;2&#39;, &#39;7&#39;, &#39;100&#39;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些属性的顺序与手动遍历（如for..in）该对象属性时的一致。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：Object.keys 和 getOwnPropertyNames ，在ES5，如果此方法的参数不是一个对象（原始的），那么它会造成 TypeError。在ES6，非对象的参数将被强制转换为一个对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Object.keys(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object.getOwnPropertyNames(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;TypeError:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt; is &lt;span class=&quot;keyword&quot;&gt;not&lt;/span&gt; an object (ES5 code)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object.keys(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;]                   (ES6 code)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Object.getOwnPropertyNames(&lt;span class=&quot;string&quot;&gt;&quot;foo&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;2&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;length&quot;&lt;/span&gt;]                   (ES6 code)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;兼容性到 IE9, es 5标准。&lt;/p&gt;
&lt;h3 id=&quot;for-in&quot;&gt;&lt;a href=&quot;#for-in&quot; class=&quot;headerlink&quot; title=&quot;for..in&quot;&gt;&lt;/a&gt;for..in&lt;/h3&gt;&lt;p&gt;手动遍历，可以遍历到自身和原型链上所有可枚举的属性。&lt;/p&gt;
&lt;h3 id=&quot;只获取自身可枚举属性&quot;&gt;&lt;a href=&quot;#只获取自身可枚举属性&quot; class=&quot;headerlink&quot; title=&quot;只获取自身可枚举属性&quot;&gt;&lt;/a&gt;只获取自身可枚举属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;直接用 &lt;code&gt;Object.keys()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;IE9 以下可以通过&lt;code&gt;hasOwnProperty&lt;/code&gt;实现：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys) &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;o&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (o !== &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;(o))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Object.keys called on a non-object&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k=[],p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; o) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.hasOwnProperty.call(o,p)) k.push(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; k;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;只获取自身不可枚举属性&quot;&gt;&lt;a href=&quot;#只获取自身不可枚举属性&quot; class=&quot;headerlink&quot; title=&quot;只获取自身不可枚举属性&quot;&gt;&lt;/a&gt;只获取自身不可枚举属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通过 &lt;code&gt;Object.keys()&lt;/code&gt; 排除可枚举属性&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; target = myObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; enum_and_nonenum = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyNames(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 排除可枚举属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; enum_only = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; nonenum_only = enum_and_nonenum.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;var&lt;/span&gt; indexInEnum = enum_only.indexOf(key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (indexInEnum == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// not found in enum_only keys mean the key is non-enumerable,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// so return true so we keep this in the filter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;decorator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(nonenum_only);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;propertyIsEnumerable&lt;/code&gt;判断，该方法返回Boolean值，不可枚举返回false。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; target = myObject;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; enum_and_nonenum = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyNames(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; enum_only = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.keys(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nonenum_only = enum_and_nonenum.filter(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;key&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 筛选不可枚举属性&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !target.propertyIsEnumerable(key)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(nonenum_only);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;只获取原型链上的可枚举属性&quot;&gt;&lt;a href=&quot;#只获取原型链上的可枚举属性&quot; class=&quot;headerlink&quot; title=&quot;只获取原型链上的可枚举属性&quot;&gt;&lt;/a&gt;只获取原型链上的可枚举属性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;直接用 for..in&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getPrototypeOf(targetObj); &lt;span class=&quot;comment&quot;&gt;// 跳过遍历自身属性，直接从原型上开始&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; k=[],p;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (p &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; o) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.hasOwnProperty.call(o,p)) k.push(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; k;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;注意，这样遍历出来的属性也不一定能访问， 因为自身属性可能会屏蔽掉原型上的属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;只获取原型链上的不可枚举属性&quot;&gt;&lt;a href=&quot;#只获取原型链上的不可枚举属性&quot; class=&quot;headerlink&quot; title=&quot;只获取原型链上的不可枚举属性&quot;&gt;&lt;/a&gt;只获取原型链上的不可枚举属性&lt;/h3&gt;&lt;p&gt;比较麻烦，如果使用 getOwnPropertyNames，只能单独获取一层原型链，必须一级一级遍历往上找，而且这也不一定有场景，因为原型链上的方法重名是会被屏蔽的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;利用hasOwnProperty、getOwnPropertyNames、Object.keys、for…in遍历对象的可枚举属性、不可枚举属性、原型链上的属性和自身属性。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://robin-front.github.io/categories/javascript/"/>
    
    
      <category term="getOwnPropertyNames" scheme="http://robin-front.github.io/tags/getOwnPropertyNames/"/>
    
      <category term="hasOwnProperty" scheme="http://robin-front.github.io/tags/hasOwnProperty/"/>
    
      <category term="Object.keys" scheme="http://robin-front.github.io/tags/Object-keys/"/>
    
  </entry>
  
  <entry>
    <title>比较instanceof与isPrototypeOf</title>
    <link href="http://robin-front.github.io/2017/01/12/%E6%AF%94%E8%BE%83instanceof%E4%B8%8EisPrototypeof/"/>
    <id>http://robin-front.github.io/2017/01/12/比较instanceof与isPrototypeof/</id>
    <published>2017-01-12T09:49:14.000Z</published>
    <updated>2017-01-12T09:49:14.000Z</updated>
    
    <content type="html">&lt;p&gt;在javascript中，instanceof 和 isPrototypeOf 都可以判断一个原型是否在另一个实例的原型链中，那他们有什么区别呢，为什么说 isPrototypeOf 可以替代 instanceof 。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;instanceof-用法&quot;&gt;&lt;a href=&quot;#instanceof-用法&quot; class=&quot;headerlink&quot; title=&quot;instanceof 用法&quot;&gt;&lt;/a&gt;instanceof 用法&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Super&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// init code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Sub&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Super.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// other init code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sub.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Super();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sub = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Sub();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于上面的代码，用 instanceof 可以像这样确定他们的关系：&lt;/p&gt;
&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Super&lt;/span&gt;&lt;/span&gt;; // true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;isPrototypeOf-用法&quot;&gt;&lt;a href=&quot;#isPrototypeOf-用法&quot; class=&quot;headerlink&quot; title=&quot;isPrototypeOf 用法&quot;&gt;&lt;/a&gt;isPrototypeOf 用法&lt;/h3&gt;&lt;p&gt;复用上面的代码，用 isPrototypeOf 可以这样写：&lt;/p&gt;
&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Super.&lt;span class=&quot;keyword&quot;&gt;prototype&lt;/span&gt;.isPrototypeOf(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt;)&lt;/span&gt;; // true&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h3&gt;&lt;p&gt;乍一看，都可以用，但某种情况下是有区别的，例如：&lt;/p&gt;
&lt;figure class=&quot;highlight perl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var super = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt; some super properties&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;/span&gt;(super);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;someProp&lt;/span&gt; = 5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;Object&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;create&lt;/span&gt;&lt;/span&gt;(sub);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(super.isPrototypeOf(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt;))&lt;/span&gt;;  // true&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;super&lt;/span&gt;)&lt;/span&gt;;      // TypeError&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时候 super 并不是构造函数，无法使用 instanceof, 只能使用 isPrototypeOf.&lt;/p&gt;
&lt;h3 id=&quot;结论&quot;&gt;&lt;a href=&quot;#结论&quot; class=&quot;headerlink&quot; title=&quot;结论&quot;&gt;&lt;/a&gt;结论&lt;/h3&gt;&lt;p&gt;结论就是 isPrototypeOf 能使用的场景更广，完全可以替代 instanceof， 只是写起来没那么简洁。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在javascript中，instanceof 和 isPrototypeOf 都可以判断一个原型是否在另一个实例的原型链中，那他们有什么区别呢，为什么说 isPrototypeOf 可以替代 instanceof 。&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://robin-front.github.io/categories/javascript/"/>
    
    
      <category term="instanceof" scheme="http://robin-front.github.io/tags/instanceof/"/>
    
      <category term="isPrototypeOf" scheme="http://robin-front.github.io/tags/isPrototypeOf/"/>
    
  </entry>
  
  <entry>
    <title>javascript通过Vibration API实现手机振动反馈提高用户体验</title>
    <link href="http://robin-front.github.io/2017/01/10/javascript%E5%AE%9E%E7%8E%B0%E6%89%8B%E6%9C%BA%E6%8C%AF%E5%8A%A8%E5%8F%8D%E9%A6%88%E6%8F%90%E9%AB%98%E7%94%A8%E6%88%B7%E4%BD%93%E9%AA%8C/"/>
    <id>http://robin-front.github.io/2017/01/10/javascript实现手机振动反馈提高用户体验/</id>
    <published>2017-01-10T05:35:00.000Z</published>
    <updated>2017-01-11T01:13:00.000Z</updated>
    
    <content type="html">&lt;p&gt;目前大多数的移动设备均具备硬件能力支持振动，让软件代码通过使设备摇晃来向用户提供物理反馈。Vibration API 为 Web应用程序提供访问此硬件的能力。如果设备不支持，则不会产生任何效果。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;振动描述&quot;&gt;&lt;a href=&quot;#振动描述&quot; class=&quot;headerlink&quot; title=&quot;振动描述&quot;&gt;&lt;/a&gt;振动描述&lt;/h3&gt;&lt;p&gt;振动被抽象成【开-关】脉冲的模式，且可以具有变化的长度。参数可以是单个整数，表示持续振动的毫秒数 (ms)；或可由多个整数组成的数组，达到振动和暂停循环的效果。只要单一 window.navigator.vibrate() 函式即可控制振动。&lt;/p&gt;
&lt;h3 id=&quot;单次振动&quot;&gt;&lt;a href=&quot;#单次振动&quot; class=&quot;headerlink&quot; title=&quot;单次振动&quot;&gt;&lt;/a&gt;单次振动&lt;/h3&gt;&lt;p&gt;你可指定单一数值，或用只有一个数值成员的数组，让设备振动 1 次：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.navigator&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.vibrate&lt;/span&gt;(200);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.navigator&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.vibrate&lt;/span&gt;(&lt;span class=&quot;selector-attr&quot;&gt;[200]&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上两个例子都可以使设备振动 200 ms.&lt;/p&gt;
&lt;h3 id=&quot;多次振动&quot;&gt;&lt;a href=&quot;#多次振动&quot; class=&quot;headerlink&quot; title=&quot;多次振动&quot;&gt;&lt;/a&gt;多次振动&lt;/h3&gt;&lt;p&gt;一个数组的值描述了装置振动与不振动的交替时间段。数组中的每个值都转换为整数，然后交替解释为设备应该振动的毫秒数和不振动的毫秒数。例如:&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.navigator&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.vibrate&lt;/span&gt;(&lt;span class=&quot;selector-attr&quot;&gt;[200, 100, 200]&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这会使设备振动200 ms，然后暂停100 ms，然后再次振动设备200 ms。&lt;/p&gt;
&lt;p&gt;您可以根据需要设定多个振动/暂停对，数组的值可以是偶数或奇数个； 值得注意的是，由于振动在每个振动周期结束时自动停止，因此您不必提供最后一个值去暂停，换句话说，数组长度只需要设置奇数个。&lt;/p&gt;
&lt;h3 id=&quot;停止振动&quot;&gt;&lt;a href=&quot;#停止振动&quot; class=&quot;headerlink&quot; title=&quot;停止振动&quot;&gt;&lt;/a&gt;停止振动&lt;/h3&gt;&lt;p&gt;当调用 window.navigator.vibrate() 的参数为「0」、空白数组，或数组全为「0」时，即可取消目前进行中的振动。&lt;/p&gt;
&lt;h3 id=&quot;持续振动&quot;&gt;&lt;a href=&quot;#持续振动&quot; class=&quot;headerlink&quot; title=&quot;持续振动&quot;&gt;&lt;/a&gt;持续振动&lt;/h3&gt;&lt;p&gt;一些基于setInterval和clearInterval操作将允许您创建持续的振动：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vibrateInterval;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Starts vibration at passed in level&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;startVibrate&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;duration&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    navigator.vibrate(duration);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Stops vibration&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stopVibrate&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Clear interval and stop persistent vibrating&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(vibrateInterval) clearInterval(vibrateInterval);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    navigator.vibrate(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Start persistent vibration at given duration and interval&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Assumes a number value is given&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;startPeristentVibrate&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;duration, interval&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vibrateInterval = setInterval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        startVibrate(duration);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, interval);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然上面的代码片段没有考虑到振动参数为数组情况; 基于阵列的持久性振动将需要计算数组项的和，并基于该数量创建周期（可能具有额外的延迟）。&lt;/p&gt;
&lt;h3 id=&quot;生成振动节奏&quot;&gt;&lt;a href=&quot;#生成振动节奏&quot; class=&quot;headerlink&quot; title=&quot;生成振动节奏&quot;&gt;&lt;/a&gt;生成振动节奏&lt;/h3&gt;&lt;p&gt;可以通过&lt;a href=&quot;https://naschq.github.io/vibe.js/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vibe.js tool&lt;/a&gt;这个工具来生成你需要的振动频率，然后复制它到你的代码里。&lt;/p&gt;
&lt;h3 id=&quot;lib&quot;&gt;&lt;a href=&quot;#lib&quot; class=&quot;headerlink&quot; title=&quot;lib&quot;&gt;&lt;/a&gt;lib&lt;/h3&gt;&lt;p&gt;我写了一个小lib，方便使用&lt;a href=&quot;https://github.com/Robin-front/vibrate.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vibrate.js&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;demo: &lt;a href=&quot;https://robin-front.github.io/vibrate.js/example/demo.html&quot;&gt;DEMO&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;译自： &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Vibration_API&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN Vibration API&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;目前大多数的移动设备均具备硬件能力支持振动，让软件代码通过使设备摇晃来向用户提供物理反馈。Vibration API 为 Web应用程序提供访问此硬件的能力。如果设备不支持，则不会产生任何效果。&lt;br&gt;
    
    </summary>
    
      <category term="Vibration" scheme="http://robin-front.github.io/categories/Vibration/"/>
    
      <category term="html5" scheme="http://robin-front.github.io/categories/Vibration/html5/"/>
    
    
      <category term="Vibration" scheme="http://robin-front.github.io/tags/Vibration/"/>
    
  </entry>
  
  <entry>
    <title>由lodash引出数组Array的slice方法性能探究</title>
    <link href="http://robin-front.github.io/2016/11/25/%E7%94%B1lodash%E5%BC%95%E5%87%BA%E6%95%B0%E7%BB%84Array%E7%9A%84slice%E6%96%B9%E6%B3%95%E6%80%A7%E8%83%BD%E6%8E%A2%E7%A9%B6/"/>
    <id>http://robin-front.github.io/2016/11/25/由lodash引出数组Array的slice方法性能探究/</id>
    <published>2016-11-25T03:05:19.000Z</published>
    <updated>2016-11-25T03:05:19.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;code&gt;lodash&lt;/code&gt; 源码中，发现数组截取操作并没有直接使用&lt;code&gt;array&lt;/code&gt;的&lt;code&gt;slice&lt;/code&gt;方法，而是写了个 &lt;code&gt;baseSlice&lt;/code&gt; 方法，更重要的是 &lt;code&gt;baseSlice&lt;/code&gt; 方法里，也并没有使用 &lt;code&gt;slice&lt;/code&gt; 方法，而是使用循环索引的方式去实现。这让我陷入思考，难道原生Array的&lt;code&gt;slice&lt;/code&gt;方法还不如循环快？&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;code&gt;lodash&lt;/code&gt; 源码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;baseSlice&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;array, start, end&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      length = array.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (start &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    start = -start &amp;gt; length ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : (length + start);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  end = end &amp;gt; length ? length : end;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (end &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    end += length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  length = start &amp;gt; end ? &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; : ((end - start) &amp;gt;&amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  start &amp;gt;&amp;gt;&amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(length);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (++index &amp;lt; length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result[index] = array[index + start];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;于是就开始写代码比较：&lt;/p&gt;
&lt;p&gt;  操作长度为100的数组，执行10000次：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; baseArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (++ i &amp;lt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 定义一个10000长度的数组以供使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baseArray[i] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;slice with no args&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baseArray.slice();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;slice with no args&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;slice with args&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baseArray.slice(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;40&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;slice with args&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;index&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; length = baseArray.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (++index &amp;lt; length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result[index] = baseArray[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;index&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;index with no init array&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10000&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; length = baseArray.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (++index &amp;lt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result[index] = baseArray[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;index with no init array&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对比结果：&lt;/p&gt;
&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// chrome 版本 54.0.2840.98 (64-bit)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;93.3&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;175&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;365&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no init &lt;span class=&quot;attribute&quot;&gt;array&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;546&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// safari 版本 9.0.2 (11601.3.9)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;122.152&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;117.181&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;60076.301&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no init &lt;span class=&quot;attribute&quot;&gt;array&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;62055.406&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//firefox 50.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;462.07&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;442.25&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;194206.08&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no init &lt;span class=&quot;attribute&quot;&gt;array&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;184714.59&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于mac ox无法测试IE,&lt;br&gt;可以看出，chrome总体要比safafi、firefox快很多；&lt;br&gt;slice方法上，safari和chrome差不多， chrome下slice有参数比无参数慢；&lt;br&gt;新建数组Array()和 []性能差不多；&lt;/p&gt;
&lt;p&gt;这么看来，那用原生 slice 明显会更好，为什么 lodash 要用循环索引呢？难道是因为一般应用数组都不会这么大，那改成长度为100的数组进行操作；&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// chrome&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;4.12&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5.82&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no init &lt;span class=&quot;attribute&quot;&gt;array&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;7.96&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// safari&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;9.158&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;8.432&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;640.311&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no init &lt;span class=&quot;attribute&quot;&gt;array&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;643.174&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//firefox&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;17.56&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;17.53&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2174.15&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; no init &lt;span class=&quot;attribute&quot;&gt;array&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;2198.15&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;发现结论并没有改变。&lt;br&gt;然后就向lodash提了question, 回复是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The perf wins of Array#slice vs. baseSlice depends on the size of the array. That is a minor point though as the perf of that method is not likely to be an issue. The reason we use baseSlice is because we treat arrays as dense while Array#slice will respect sparse arrays.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概意思是，他觉得性能没有太大的差别，Array#slice和baseSlice性能强弱取决于数组的大小。这里采用baseSlice是因为他们要视所有为密集数据，而Array#slice会处理稀疏数组。&lt;/p&gt;
&lt;p&gt;然后就有下面的测试：&lt;/p&gt;
&lt;p&gt;使用 Array#slice和baseSlice 分别截取数组其中一段，循环1000000次：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; baseArray = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (++ i &amp;lt; &lt;span class=&quot;number&quot;&gt;100000&lt;/span&gt;) &amp;#123; &lt;span class=&quot;comment&quot;&gt;// 定义一个10000长度的数组以供使用,这里数组长度并不影响性能，性能影响主要在于截取的长度。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baseArray[i] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;slice with args&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  baseArray.slice(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;slice with args&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.time(&lt;span class=&quot;string&quot;&gt;&#39;index&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;1000000&lt;/span&gt;; i++)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; result = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (++index &amp;lt; &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    result[index] = baseArray[index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.timeEnd(&lt;span class=&quot;string&quot;&gt;&#39;index&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不同截取长度在chrome下的效果：&lt;br&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 截取长度 20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;110&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;78.9&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 截取长度 30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;114&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;112&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 截取长度 30&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;slice &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;args&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;132&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;index&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;146&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由此看出，截取长度为30左右时，Array#slice和loop方式性能基本一样，而 Array#slice 基本不受截取长度的影响。&lt;br&gt;所以结论是，当长度为30以下时，lodash的方法是比较高效的，当然，这影响微乎其微。像_.chunk方法，一般场景分组都不会太长。&lt;/p&gt;
&lt;p&gt;疑惑是，对我的回复的后半句我没怎么看懂，密集数据和稀疏数据对这有什么影响呢？&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;lodash&lt;/code&gt; 源码中，发现数组截取操作并没有直接使用&lt;code&gt;array&lt;/code&gt;的&lt;code&gt;slice&lt;/code&gt;方法，而是写了个 &lt;code&gt;baseSlice&lt;/code&gt; 方法，更重要的是 &lt;code&gt;baseSlice&lt;/code&gt; 方法里，也并没有使用 &lt;code&gt;slice&lt;/code&gt; 方法，而是使用循环索引的方式去实现。这让我陷入思考，难道原生Array的&lt;code&gt;slice&lt;/code&gt;方法还不如循环快？&lt;/p&gt;
    
    </summary>
    
      <category term="lodash" scheme="http://robin-front.github.io/categories/lodash/"/>
    
      <category term="array" scheme="http://robin-front.github.io/categories/lodash/array/"/>
    
      <category term="slice" scheme="http://robin-front.github.io/categories/lodash/array/slice/"/>
    
    
      <category term="lodash" scheme="http://robin-front.github.io/tags/lodash/"/>
    
      <category term="array" scheme="http://robin-front.github.io/tags/array/"/>
    
      <category term="slice" scheme="http://robin-front.github.io/tags/slice/"/>
    
  </entry>
  
  <entry>
    <title>Debounce-and-Throttle-的可視化解釋</title>
    <link href="http://robin-front.github.io/2016/11/17/Debounce-and-Throttle-%E7%9A%84%E5%8F%AF%E8%A6%96%E5%8C%96%E8%A7%A3%E9%87%8B/"/>
    <id>http://robin-front.github.io/2016/11/17/Debounce-and-Throttle-的可視化解釋/</id>
    <published>2016-11-17T02:22:22.000Z</published>
    <updated>2016-11-21T03:19:22.000Z</updated>
    
    <content type="html">&lt;p&gt;Debounce 和 Throttle是两个概念，我们可以在JavaScript中使用，以提高我们对执行功能的控制，在事件处理的时候特别有用。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;比喻&quot;&gt;&lt;a href=&quot;#比喻&quot; class=&quot;headerlink&quot; title=&quot;比喻&quot;&gt;&lt;/a&gt;比喻&lt;/h3&gt;&lt;p&gt;这两种技术都回答同样的问题“一个功能可以随着时间被推移多久？”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debounce：把它看成是“多个分组事件之一”。试想一下，你回家，再进入电梯，门正在关闭……，突然你的邻居出现在大厅，并试图跳上电梯。要有礼貌！并打开大门，他说：你等等，让我一起上。相同的情况下，可以与第三人再次发生，等等…这可能会延缓出发几分钟。&lt;/li&gt;
&lt;li&gt;Throttle：把它看成是一个阀，它规定了执行的流程。我们可以判断函数可以在一定时间内被调用的最大次数。因此，再用电梯比喻..你有足够的礼貌，持续10秒等人，但一旦时间到了，你一定要走！&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无 Debounce 或 Throttle 事件处理程序就像一次只能一个人用的电梯：没有那么高效。&lt;/p&gt;
&lt;p&gt;我希望这个坏比喻对你有所帮助，但有时言语并不会对掌握这些概念有多大的帮助，所以我创建了一个演示去理解 Debounce 和 Throttle 概念，并把它们应用到mousemove事件。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;elevator_departure&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(name + &lt;span class=&quot;string&quot;&gt;&quot; was the last one. Nobody else? Let&#39;s go then&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; debounced_elevator_departure = $.debounce(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, elevator_departure);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;debounced_elevator_departure(&lt;span class=&quot;string&quot;&gt;&#39;John&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;debounced_elevator_departure(&lt;span class=&quot;string&quot;&gt;&#39;Mike&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;debounced_elevator_departure(&lt;span class=&quot;string&quot;&gt;&#39;Peter&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// You will see *only* one message, &quot;Peter was the last one. Nobody else? Let&#39;s go then&quot;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我发现这3个人在JavaScript中都通过debounce和throttle执行了。我真的建议你先读一下 &lt;a href=&quot;http://benalman.com/projects/jquery-throttle-debounce-plugin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;code&gt;Ben Alman&amp;#39;s&lt;/code&gt;&lt;/a&gt; 的文章，以便更好地理解  debounce 和 throttle. &lt;code&gt;underscore&lt;/code&gt; 和 &lt;code&gt;lodash&lt;/code&gt; 有不同的实现方式，但参数都是一样的（除了 &lt;code&gt;throttle&lt;/code&gt;没有 &lt;code&gt;trailing&lt;/code&gt;）.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://underscorejs.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Underscore.js&lt;/a&gt; by Jeremy Ashkenas *&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lodash.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Lodash.js&lt;/a&gt; by John-David Dalton *&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://benalman.com/projects/jquery-throttle-debounce-plugin/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jQuery Plugin&lt;/a&gt; by Ben Alman.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;演示&quot;&gt;&lt;a href=&quot;#演示&quot; class=&quot;headerlink&quot; title=&quot;演示&quot;&gt;&lt;/a&gt;演示&lt;/h3&gt;&lt;p&gt;这里是视觉演示:&lt;/p&gt;
&lt;iframe src=&quot;http://drupalmotion.com/sites/default/files/demos/debounce-throttle/index.html&quot; height=&quot;350px&quot; width=&quot;1000px&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;这是截图：&lt;br&gt;&lt;img src=&quot;http://drupalmotion.com/sites/default/files/pics/screenshot.png&quot; alt=&quot;debounce-throttle&quot;&gt;&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个的源代码演示在&lt;a href=&quot;https://github.com/dcorb/debounce-throttle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub上托管&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;如果你看到动画在浏览器中并不流畅，请在一个单独的页面打开演示，或者尝试在Chrome中。&lt;/li&gt;
&lt;li&gt;我通过在鼠标区域 &lt;code&gt;tapping&lt;/code&gt;来去在&lt;code&gt;Android&lt;/code&gt;环境下演示它&lt;/li&gt;
&lt;li&gt;每个单元代表约30毫秒，但JS是单线程的，所以浏览器是不是准确。这个演示并不是想成为一个最佳实践，只是为了更好地去理解概念。&lt;/li&gt;
&lt;li&gt;当你做了&lt;code&gt;setTimeout&lt;/code&gt;，时间间隔可能不同，在每个浏览器在4ms和15ms的之间（&lt;a href=&quot;http://www.nczonline.net/blog/2011/12/14/timer-resolution-in-browsers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;尼古拉斯Zakas的文章&lt;/a&gt;），甚至是&lt;code&gt;setTimeout(fn,0)&lt;/code&gt;至少需要4毫秒。在另一方面，时间为1毫秒为最小单位的。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;mousemove&lt;/code&gt;第一行中的事件也有做节流（80毫秒）。这对理解演示有所帮助。&lt;/li&gt;
&lt;li&gt;要获得 &lt;code&gt;trailing&lt;/code&gt;选项&lt;code&gt;$.throttle&lt;/code&gt;，你需要传递&lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;不要忘了，这一切都是builder，他们返回一个函数，所以你只需要执行一次。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h3&gt;&lt;h4 id=&quot;debounce-案例&quot;&gt;&lt;a href=&quot;#debounce-案例&quot; class=&quot;headerlink&quot; title=&quot;debounce 案例&quot;&gt;&lt;/a&gt;debounce 案例&lt;/h4&gt;&lt;p&gt;用它减少执行频繁的事件。例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当将要处理的textarea的快速打字：你不想执行处理函数，直到用户停止输入再来处理文本。&lt;/li&gt;
&lt;li&gt;当数据保存到通过AJAX服务器：你不想每秒调用非常缓慢的邮件服务器&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;throttle-案例&quot;&gt;&lt;a href=&quot;#throttle-案例&quot; class=&quot;headerlink&quot; title=&quot;throttle 案例&quot;&gt;&lt;/a&gt;throttle 案例&lt;/h4&gt;&lt;p&gt;和&lt;code&gt;debounce&lt;/code&gt; 一样，但如果想每隔一段时间必须执行事件，可以使用它：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;假设用户不停地快速输入30秒，可能你会想每5秒执行一次函数；&lt;/li&gt;
&lt;li&gt;一些对性能有影响的事件但又必须处理：scroll, mouseweel, mousemove。一个简单的鼠标滚轮运动可以在一秒钟内触发几十个事件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文翻译自 &lt;a href=&quot;http://drupalmotion.com/article/debounce-and-throttle-visual-explanation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Debounce and Throttle: a visual explanation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;========= update on 11-21 =========&lt;/p&gt;
&lt;h3 id=&quot;example&quot;&gt;&lt;a href=&quot;#example&quot; class=&quot;headerlink&quot; title=&quot;example&quot;&gt;&lt;/a&gt;example&lt;/h3&gt;&lt;h4 id=&quot;debounce&quot;&gt;&lt;a href=&quot;#debounce&quot; class=&quot;headerlink&quot; title=&quot;debounce&quot;&gt;&lt;/a&gt;debounce&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; validation = _.debounce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ... &lt;span class=&quot;comment&quot;&gt;// 校验输入，逻辑可能还会有点复杂&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;250&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jQuery(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;).keyup(validation) &lt;span class=&quot;comment&quot;&gt;// 输入完成或停顿250ms后才去执行校验，如果不停输入10s，则10s内都不会触发&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  debounce第三个参数为可选参数，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  leading为true时，则在事件开始时首先执行一次， 默认值为 false；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  trailing为true时，则在结束时触发, 默认值为 true；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; *  maxWait设置每隔多长时间必须触发；&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; ... &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jQuery(&lt;span class=&quot;string&quot;&gt;&#39;input&#39;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;keyup&#39;&lt;/span&gt;, _.debounce(foo, &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;leading&#39;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 注意： 执行的前提是定时器为undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;trailing&#39;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;maxWait&#39;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// debounce还可以被取消&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jQuery(&lt;span class=&quot;string&quot;&gt;&#39;button&#39;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  validation.cancel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;throttle&quot;&gt;&lt;a href=&quot;#throttle&quot; class=&quot;headerlink&quot; title=&quot;throttle&quot;&gt;&lt;/a&gt;throttle&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;mousemove&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jQuery(&lt;span class=&quot;string&quot;&gt;&#39;#div&#39;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;, _.throttle(mousemove, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)) &lt;span class=&quot;comment&quot;&gt;// 每100ms必须触发一次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// mousemove会在定时器开始时触发, 但5分钟内不会有第二次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jQuery(&lt;span class=&quot;string&quot;&gt;&#39;#div&#39;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;mousemove&#39;&lt;/span&gt;, _.throttle(mousemove, &lt;span class=&quot;number&quot;&gt;300000&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;leading&#39;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// 定时器前沿触发，默认值为true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&#39;trailing&#39;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 定时器后沿触发，默认值为true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// throttle 同样可以被取消&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jQuery(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;popstate&#39;&lt;/span&gt;, throttled.cancel);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Debounce 和 Throttle是两个概念，我们可以在JavaScript中使用，以提高我们对执行功能的控制，在事件处理的时候特别有用。&lt;/p&gt;
    
    </summary>
    
      <category term="函数节流" scheme="http://robin-front.github.io/categories/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/"/>
    
    
      <category term="debounce" scheme="http://robin-front.github.io/tags/debounce/"/>
    
      <category term="throttle" scheme="http://robin-front.github.io/tags/throttle/"/>
    
  </entry>
  
  <entry>
    <title>使用 npm shrinkwrap 来管理项目依赖</title>
    <link href="http://robin-front.github.io/2016/10/20/%E4%BD%BF%E7%94%A8-npm-shrinkwrap-%E6%9D%A5%E7%AE%A1%E7%90%86%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96/"/>
    <id>http://robin-front.github.io/2016/10/20/使用-npm-shrinkwrap-来管理项目依赖/</id>
    <published>2016-10-20T09:35:22.000Z</published>
    <updated>2016-10-20T09:35:22.000Z</updated>
    
    <content type="html">&lt;p&gt;管理依赖是一个复杂软件开发过程中必定会遇到的问题。&lt;/p&gt;
&lt;p&gt;在Node.js项目开发的时候，我们也经常需要安装和升级对应的依赖。虽然 npm 以及语意化的版本号 (semantic versioning, semver) 让开发过程中依赖的获取和升级变得非常容易， 但不严格的版本号限制，也带来了版本号的不确定性。主要的问题可能有三个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;npm 建议使用 semver 的应用程序版本，但这也完全依赖第三方包遵守这一规则。如果你依赖于的包不遵循 semver ，或者依赖的包的新版本有重大更改（而你使用了 ^ 的宽泛版本安装），这潜在可能是会导致问题的。&lt;/li&gt;
&lt;li&gt;另一个问题的出现是由于 npm 安装依赖的机制。npm 的安装包是有层次结构的，手动控制要安装的软件包的版本号可以实现，但是你只能在 package.json 使用精确的版本号控制你的直接依赖包，但那些多层以上的依赖就没办法控制了；一个第三方包不严谨的版本依赖生命可能破坏你的依赖管理。&lt;/li&gt;
&lt;li&gt;在开发阶段执行得到的版本，和后续部署时得到的可能是不一致的，更不可控的是，你依赖的第三方包也有这样的情况会导致潜在的上线风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要控制上线的风险，我们就必需要解决这个问题，这时候，就需要使用 npm shrinkwrap 这个命令来解决问题。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;npm-shrinkwrap&quot;&gt;&lt;a href=&quot;#npm-shrinkwrap&quot; class=&quot;headerlink&quot; title=&quot;npm shrinkwrap&quot;&gt;&lt;/a&gt;npm shrinkwrap&lt;/h3&gt;&lt;p&gt;&lt;code&gt;npm shrinkwrap&lt;/code&gt; 可以按照当前项目 &lt;code&gt;node_modules&lt;/code&gt; 目录内的安装包情况生成稳定的版本号描述。&lt;/p&gt;
&lt;p&gt;比方说，有一个包 A&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;B&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;0.1.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还有一个包 B&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;B&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;C&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;0.1.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以及包 C&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;C&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;你的项目只依赖于 A，于是 &lt;code&gt;npm install&lt;/code&gt; 会得到这样的目录结构&lt;br&gt;&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A&lt;span class=&quot;symbol&quot;&gt;@0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  `-- B&lt;span class=&quot;symbol&quot;&gt;@0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      `-- C&lt;span class=&quot;symbol&quot;&gt;@0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这时候，B@0.0.2 发布了，这时候在一个新的环境下执行 &lt;code&gt;npm install&lt;/code&gt; 将得到&lt;br&gt;&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A&lt;span class=&quot;symbol&quot;&gt;@0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    `-- B&lt;span class=&quot;symbol&quot;&gt;@0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        `-- C&lt;span class=&quot;symbol&quot;&gt;@0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这时候两次安装得到的版本号就不一致了。而通过 shrinkwrap 命令，我们可以保证在所有环境下安装得到稳定的结果。&lt;/p&gt;
&lt;p&gt;在项目引入新包的时候，或者 A 的开发者执行一下 npm shrinkwrap，可以在项目根目录得到一个 npm-shrinkwrap.json 文件。&lt;/p&gt;
&lt;p&gt;这个文件内容如下&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;A&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;B&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;&quot;C&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;attr&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.0.1&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;shrinkwrap 命令根据目前安装在node_modules的文件情况锁定依赖版本。在项目中执行 &lt;code&gt;npm install&lt;/code&gt; 的时候，npm 会检查在根目录下有没有 npm-shrinkwrap.json 文件，如果 shrinkwrap 文件存在的话，npm 会使用它（而不是 package.json）来确定安装的各个包的版本号信息。&lt;/p&gt;
&lt;p&gt;这样一来，在安装时候确定的所有版本信息会稳定的固化在 shrinkwrap 里。无论是A，B 和 C中的版本如何变化，或者它们的 package.json 文件如何修改，你始终能保证，在你项目中执行 &lt;code&gt;npm install&lt;/code&gt; 的到的版本号时稳定的。&lt;/p&gt;
&lt;h3 id=&quot;在开发中使用-shrinkwrap&quot;&gt;&lt;a href=&quot;#在开发中使用-shrinkwrap&quot; class=&quot;headerlink&quot; title=&quot;在开发中使用 shrinkwrap&quot;&gt;&lt;/a&gt;在开发中使用 shrinkwrap&lt;/h3&gt;&lt;h5 id=&quot;在开发过程中，引入一个新包的流程如下&quot;&gt;&lt;a href=&quot;#在开发过程中，引入一个新包的流程如下&quot; class=&quot;headerlink&quot; title=&quot;在开发过程中，引入一个新包的流程如下&quot;&gt;&lt;/a&gt;在开发过程中，引入一个新包的流程如下&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm install PACKAGE_NAME@VERSION --save&lt;/code&gt; 获取特定版本的包&lt;/li&gt;
&lt;li&gt;测试功能&lt;/li&gt;
&lt;li&gt;测试功能正常后，执行 &lt;code&gt;npm shrinkwrap&lt;/code&gt; 把依赖写入 shrinkwrap 文件&lt;/li&gt;
&lt;li&gt;在代码仓库中提交 &lt;code&gt;shrinkwrap / package.json&lt;/code&gt;描述&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;升级一个包的流程应该是这样&quot;&gt;&lt;a href=&quot;#升级一个包的流程应该是这样&quot; class=&quot;headerlink&quot; title=&quot;升级一个包的流程应该是这样&quot;&gt;&lt;/a&gt;升级一个包的流程应该是这样&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm outdated&lt;/code&gt; 获取项目所有依赖的更新信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;npm install PACKAGE_NAME@VERSION --save&lt;/code&gt; 获取特定版本的包&lt;/li&gt;
&lt;li&gt;测试功能&lt;/li&gt;
&lt;li&gt;测试功能正常后，执行 &lt;code&gt;npm shrinkwrap&lt;/code&gt;把依赖写入 shrinkwrap 文件&lt;/li&gt;
&lt;li&gt;在代码仓库中提交 &lt;code&gt;shrinkwrap / package.json&lt;/code&gt;描述&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;删除一个包的流程如下&quot;&gt;&lt;a href=&quot;#删除一个包的流程如下&quot; class=&quot;headerlink&quot; title=&quot;删除一个包的流程如下&quot;&gt;&lt;/a&gt;删除一个包的流程如下&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;npm uninstall PACKAGE_NAME --save&lt;/code&gt; 删除这个包&lt;/li&gt;
&lt;li&gt;测试功能&lt;/li&gt;
&lt;li&gt;测试功能正常后，执行 &lt;code&gt;npm shrinkwrap&lt;/code&gt; 把更新的依赖写入 shrinkwrap 文件&lt;/li&gt;
&lt;li&gt;在代码仓库中提交 &lt;code&gt;shrinkwrap / package.json&lt;/code&gt; 描述&lt;/li&gt;
&lt;li&gt;比一般的安装多了一步手工生成 shrinkwrap 文件。在实际工作中，有时候我们会忘记这一步，导致上线时候没有获取到依赖包的特定版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文转自&lt;a href=&quot;http://tech.meituan.com/npm-shrinkwrap.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用 npm shrinkwrap 来管理项目依赖&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;管理依赖是一个复杂软件开发过程中必定会遇到的问题。&lt;/p&gt;
&lt;p&gt;在Node.js项目开发的时候，我们也经常需要安装和升级对应的依赖。虽然 npm 以及语意化的版本号 (semantic versioning, semver) 让开发过程中依赖的获取和升级变得非常容易， 但不严格的版本号限制，也带来了版本号的不确定性。主要的问题可能有三个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;npm 建议使用 semver 的应用程序版本，但这也完全依赖第三方包遵守这一规则。如果你依赖于的包不遵循 semver ，或者依赖的包的新版本有重大更改（而你使用了 ^ 的宽泛版本安装），这潜在可能是会导致问题的。&lt;/li&gt;
&lt;li&gt;另一个问题的出现是由于 npm 安装依赖的机制。npm 的安装包是有层次结构的，手动控制要安装的软件包的版本号可以实现，但是你只能在 package.json 使用精确的版本号控制你的直接依赖包，但那些多层以上的依赖就没办法控制了；一个第三方包不严谨的版本依赖生命可能破坏你的依赖管理。&lt;/li&gt;
&lt;li&gt;在开发阶段执行得到的版本，和后续部署时得到的可能是不一致的，更不可控的是，你依赖的第三方包也有这样的情况会导致潜在的上线风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果要控制上线的风险，我们就必需要解决这个问题，这时候，就需要使用 npm shrinkwrap 这个命令来解决问题。&lt;br&gt;
    
    </summary>
    
      <category term="npm" scheme="http://robin-front.github.io/categories/npm/"/>
    
    
      <category term="npm" scheme="http://robin-front.github.io/tags/npm/"/>
    
      <category term="shrinkwrap" scheme="http://robin-front.github.io/tags/shrinkwrap/"/>
    
  </entry>
  
  <entry>
    <title>用Git-Hooks进行自动部署,让提交发布自动化</title>
    <link href="http://robin-front.github.io/2016/08/11/%E7%94%A8Git-Hooks%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-%E8%AE%A9%E6%8F%90%E4%BA%A4%E5%8F%91%E5%B8%83%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>http://robin-front.github.io/2016/08/11/用Git-Hooks进行自动部署-让提交发布自动化/</id>
    <published>2016-08-11T11:51:56.000Z</published>
    <updated>2016-08-11T11:51:56.000Z</updated>
    
    <content type="html">&lt;p&gt;之前了解的自动化部署都是&lt;code&gt;jekins&lt;/code&gt;这样集成化的成熟的工具。最近因为有朋友提交代码时，不想登陆服务器拉取代码，才了解到 &lt;code&gt;git hooks&lt;/code&gt;。看来还是git使用不到位。之前一直都是本地开发并提交代码，测试时，人工登陆测试服务器去拉取最新代码。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;网上资料还是比较多的，最后在本机测试是成功了的。&lt;/p&gt;
&lt;p&gt;主要选要明白几个关键点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;git init –bare&lt;/li&gt;
&lt;li&gt;post-receive 文件&lt;/li&gt;
&lt;li&gt;SSH 认证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这几个都比较容易找到资料。&lt;/p&gt;
&lt;h3 id=&quot;git-init-–bare&quot;&gt;&lt;a href=&quot;#git-init-–bare&quot; class=&quot;headerlink&quot; title=&quot;git init –bare&quot;&gt;&lt;/a&gt;git init –bare&lt;/h3&gt;&lt;p&gt;和 &lt;code&gt;git init&lt;/code&gt; 不一样的是，&lt;code&gt;git init --bare&lt;/code&gt;并不存储实际代码，仓库文件夹不会看到任何项目代码，反而生成了一些 &lt;code&gt;.git&lt;/code&gt;之外的文件夹，其中 &lt;code&gt;hooks&lt;/code&gt;文件夹就是存放git命令操作后需要执行的脚本。&lt;br&gt;需要新建两个文件夹，一个执行&lt;code&gt;git init --bare&lt;/code&gt;作为远端仓库，一个执行&lt;code&gt;git init&lt;/code&gt;作为服务器项目目录。&lt;br&gt;本地开发目录和服务器项目目录的&lt;code&gt;remote&lt;/code&gt;都要指向 服务器的远端仓库。&lt;/p&gt;
&lt;h3 id=&quot;post-receive-文件&quot;&gt;&lt;a href=&quot;#post-receive-文件&quot; class=&quot;headerlink&quot; title=&quot;post-receive 文件&quot;&gt;&lt;/a&gt;post-receive 文件&lt;/h3&gt;&lt;p&gt;post-receive 文件是git push 之后，执行的脚本文件，自动部署的脚本代码就写在这里。&lt;br&gt;如：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/bin/sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;unset&lt;/span&gt; GIT_DIR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;远程开始更新&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NowPath=`&lt;span class=&quot;built_in&quot;&gt;pwd&lt;/span&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$NowPath&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DeployPath=&lt;span class=&quot;string&quot;&gt;&quot;../deploy&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$DeployPath&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git pull origin master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;远程更新完毕&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$NowPath&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt; 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这里有一点比较容易出问题的就是路径，最好还是使用绝对路径。&lt;br&gt;脚本里还可以加入任何想执行的脚本，比如打包编译。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不过要注意使用 chmod +x post-receive 改变一下权限，服务器端的配置就基本完成了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;SSH认证&quot;&gt;&lt;a href=&quot;#SSH认证&quot; class=&quot;headerlink&quot; title=&quot;SSH认证&quot;&gt;&lt;/a&gt;SSH认证&lt;/h3&gt;&lt;p&gt;这个在 mac os x 和 linux都没有问题，我用别人的windows配置的时候经常都会出现认证失败，就算认证成功了，也无法执行脚本，对这个还是不太熟悉。我猜可能是 cmd 的问题，ssh 登陆后还遇到过乱码。&lt;/p&gt;
&lt;p&gt;这些都配置好之后，本地开发只需要提交代码，服务器就可以预览最新代码了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;之前了解的自动化部署都是&lt;code&gt;jekins&lt;/code&gt;这样集成化的成熟的工具。最近因为有朋友提交代码时，不想登陆服务器拉取代码，才了解到 &lt;code&gt;git hooks&lt;/code&gt;。看来还是git使用不到位。之前一直都是本地开发并提交代码，测试时，人工登陆测试服务器去拉取最新代码。&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://robin-front.github.io/categories/git/"/>
    
    
      <category term="git" scheme="http://robin-front.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>webpack-sourcemap选项应该选哪个</title>
    <link href="http://robin-front.github.io/2016/08/08/webpack-sourcemap%E9%80%89%E9%A1%B9%E5%BA%94%E8%AF%A5%E9%80%89%E5%93%AA%E4%B8%AA/"/>
    <id>http://robin-front.github.io/2016/08/08/webpack-sourcemap选项应该选哪个/</id>
    <published>2016-08-08T09:08:53.000Z</published>
    <updated>2016-08-08T09:08:53.000Z</updated>
    
    <content type="html">&lt;p&gt;使用 webpack 也有一段时间了，但是每次看到别的项目配置，还是会去浏览一遍。这次刚好看到一个 &lt;code&gt;devtool: &amp;#39;#eval-source-map&amp;#39;&lt;/code&gt;，就有些好奇，之前都是默认使用 &lt;code&gt;#source-map&lt;/code&gt; 并没有过多去注意它。google一下，发现这个 devtool 选项还不少，那我们到底选哪个呢，它们有哪些区别。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;先来看看官方文档的相关描述：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/Robin-front/blog/master/source/images/201608/webpack-sourcemap.png&quot; alt=&quot;devtool&quot;&gt;&lt;/p&gt;
&lt;p&gt;有构建速度，重新构建速度，打包速度，来源 这几项的展示。&lt;/p&gt;
&lt;p&gt;然后可以看看这一篇文章，对这几个选项描述得比较详细：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://chemzqm.me/webpack-sourcemap&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://chemzqm.me/webpack-sourcemap&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;摘出主要部分：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eval&lt;/code&gt; 文档上解释的很明白，每个模块都封装到 &lt;code&gt;eval&lt;/code&gt; 包裹起来，并在后面添加 &lt;code&gt;//# sourceURL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;source-map&lt;/code&gt; 这是最原始的 &lt;code&gt;source-map&lt;/code&gt; 实现方式，其实现是打包代码同时创建一个新的 &lt;code&gt;sourcemap&lt;/code&gt; 文件， 并在打包文件的末尾添加 &lt;code&gt;//# sourceURL&lt;/code&gt; 注释行告诉 JS 引擎文件在哪儿&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hidden-source-map&lt;/code&gt; 文档上也说了，就是 soucremap 但没注释，没注释怎么找文件呢？貌似只能靠后缀，譬如 &lt;code&gt;xxx/bundle.js&lt;/code&gt; 文件，某些引擎会尝试去找 &lt;code&gt;xxx/bundle.js.map&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline-source-map&lt;/code&gt; 为每一个文件添加 &lt;code&gt;sourcemap&lt;/code&gt; 的 DataUrl，注意这里的文件是打包前的每一个文件而不是最后打包出来的，同时这个 &lt;code&gt;DataUrl&lt;/code&gt; 是包含一个文件完整 &lt;code&gt;souremap&lt;/code&gt; 信息的 &lt;code&gt;Base64&lt;/code&gt; 格式化后的字符串，而不是一个 url。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval-source-map&lt;/code&gt; 这个就是把 &lt;code&gt;eval&lt;/code&gt; 的 &lt;code&gt;sourceURL&lt;/code&gt; 换成了完整 &lt;code&gt;souremap&lt;/code&gt; 信息的 DataUrl&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cheap-source-map&lt;/code&gt; 不包含列信息，不包含 &lt;code&gt;loader&lt;/code&gt; 的 &lt;code&gt;sourcemap&lt;/code&gt;，（譬如 &lt;code&gt;babel&lt;/code&gt; 的 sourcemap）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cheap-module-source-map&lt;/code&gt; 不包含列信息，同时 &lt;code&gt;loader&lt;/code&gt; 的 &lt;code&gt;sourcemap&lt;/code&gt; 也被简化为只包含对应行的。最终的 &lt;code&gt;sourcemap&lt;/code&gt; 只有一份，它是 &lt;code&gt;webpack&lt;/code&gt; 对 &lt;code&gt;loader&lt;/code&gt; 生成的 &lt;code&gt;sourcemap&lt;/code&gt; 进行简化，然后再次生成的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;webpack 不仅支持这 7 种，而且它们还是可以任意组合的，就如文档所说，你可以设置 souremap 选项为 &lt;code&gt;cheap-module-inline-source-map&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;结合官方的列表比较和引用的这篇文章的介绍，就比较容易选择合适的选项了。建议开发时使用 &lt;code&gt;#cheap-module-eval-source-map&lt;/code&gt;，测试环境或线上有需要的话使用 &lt;code&gt;#cheap-module-source-map&lt;/code&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;使用 webpack 也有一段时间了，但是每次看到别的项目配置，还是会去浏览一遍。这次刚好看到一个 &lt;code&gt;devtool: &amp;#39;#eval-source-map&amp;#39;&lt;/code&gt;，就有些好奇，之前都是默认使用 &lt;code&gt;#source-map&lt;/code&gt; 并没有过多去注意它。google一下，发现这个 devtool 选项还不少，那我们到底选哪个呢，它们有哪些区别。&lt;br&gt;
    
    </summary>
    
      <category term="webpack" scheme="http://robin-front.github.io/categories/webpack/"/>
    
    
      <category term="webpack" scheme="http://robin-front.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>使用ApplicationCache离线缓存做一个h5离线应用</title>
    <link href="http://robin-front.github.io/2016/06/30/%E4%BD%BF%E7%94%A8ApplicationCache%E7%A6%BB%E7%BA%BF%E7%BC%93%E5%AD%98%E5%81%9A%E4%B8%80%E4%B8%AAh5%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/"/>
    <id>http://robin-front.github.io/2016/06/30/使用ApplicationCache离线缓存做一个h5离线应用/</id>
    <published>2016-06-30T14:41:14.000Z</published>
    <updated>2016-06-30T14:41:14.000Z</updated>
    
    <content type="html">&lt;p&gt;原生app可以离线操作，在以前是相对web app的优势，web必须联网才能刷新使用。虽然所有浏览器都有缓存机制，但它们并不一定总能起到预期的作用。HTML5 使用 ApplicationCache 接口解决了由离线带来的部分难题。即使用户在离线状态下按了刷新按钮，您的应用也会正常加载和运行。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用缓存接口可为您的应用带来以下三个优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;离线浏览 - 用户可在离线时浏览您的完整网站&lt;/li&gt;
&lt;li&gt;速度 - 缓存资源为本地资源，因此加载速度较快。&lt;/li&gt;
&lt;li&gt;服务器负载更少 - 浏览器只会从发生了更改的服务器下载资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;引用清单文件&quot;&gt;&lt;a href=&quot;#引用清单文件&quot; class=&quot;headerlink&quot; title=&quot;引用清单文件&quot;&gt;&lt;/a&gt;引用清单文件&lt;/h3&gt;&lt;h4 id=&quot;manifest属性&quot;&gt;&lt;a href=&quot;#manifest属性&quot; class=&quot;headerlink&quot; title=&quot;manifest属性&quot;&gt;&lt;/a&gt;manifest属性&lt;/h4&gt;&lt;p&gt;要启用某个应用的应用缓存，请在文档的 html 标记中添加 manifest 属性：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;manifest&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;app.manifest&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;您应在要缓存的网络应用的每个页面上都添加 manifest 属性。如果网页不包含 manifest 属性，浏览器就不会缓存该网页（除非清单文件中明确列出了该属性）。这就意味着用户浏览的每个包含 manifest 的网页都会隐式添加到应用缓存。因此，您无需在清单中列出每个网页。&lt;/p&gt;
&lt;p&gt;manifest 属性可指向绝对网址或相对路径，但绝对网址必须与相应的网络应用同源。&lt;/p&gt;
&lt;h4 id=&quot;清单文件格式与-MIME-类型设置&quot;&gt;&lt;a href=&quot;#清单文件格式与-MIME-类型设置&quot; class=&quot;headerlink&quot; title=&quot;清单文件格式与 MIME 类型设置&quot;&gt;&lt;/a&gt;清单文件格式与 MIME 类型设置&lt;/h4&gt;&lt;p&gt;清单文件可使用任何文件扩展名，但必须以正确的 &lt;code&gt;text/cache-manifest&lt;/code&gt; MIME 类型提供。&lt;br&gt;下面是几件网络服务的配置例子：&lt;/p&gt;
&lt;p&gt;Apache:&lt;br&gt;新建或者编辑现有的 &lt;code&gt;.htaccess&lt;/code&gt; 文件，在里面加上一行&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;AddType &lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;/cache-manifest .manifest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Nginx:&lt;br&gt;修改 &lt;code&gt;mime.types&lt;/code&gt; 文件，在里面增加 manifest 文件的映射&lt;br&gt;&lt;figure class=&quot;highlight applescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;text&lt;/span&gt;/cache-manifest manifest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Tomcat：&lt;br&gt;修改 &lt;code&gt;web.xml&lt;/code&gt; 文件，在里面增加&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;mime-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;extension&lt;/span&gt;&amp;gt;&lt;/span&gt;manifest&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;extension&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;mime-type&lt;/span&gt;&amp;gt;&lt;/span&gt;text/cache-manifest&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;mime-type&lt;/span&gt;&amp;gt;&lt;/span&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;mime-mapping&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;清单文件结构&quot;&gt;&lt;a href=&quot;#清单文件结构&quot; class=&quot;headerlink&quot; title=&quot;清单文件结构&quot;&gt;&lt;/a&gt;清单文件结构&lt;/h4&gt;&lt;p&gt;基本的清单格式：&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CACHE MANIFEST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index&lt;span class=&quot;selector-class&quot;&gt;.html&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stylesheet&lt;span class=&quot;selector-class&quot;&gt;.css&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;images/logo&lt;span class=&quot;selector-class&quot;&gt;.png&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scripts/main.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;您需要注意以下几点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CACHE MANIFEST 字符串应在第一行，且必不可少。&lt;/li&gt;
&lt;li&gt;网站的缓存数据量不得超过 5 MB。不过，如果您要编写的是针对 &lt;a href=&quot;http://code.google.com/chrome/apps/docs/developers_guide.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Chrome 网上应用店&lt;/a&gt;的应用，可使用 unlimitedStorage 取消该限制。&lt;/li&gt;
&lt;li&gt;如果清单文件或其中指定的资源无法下载，就无法进行整个缓存更新进程。在这种情况下，浏览器将继续使用原应用缓存。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完整的清单格式：&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CACHE&lt;/span&gt; MANIFEST&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# daksfljs3kl23j3k43  &lt;span class=&quot;keyword&quot;&gt;hash&lt;/span&gt; 以便做版本控制&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 默认部分，显式缓存这些文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CACHE&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/favicon.ico&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;index&lt;/span&gt;.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;stylesheet.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;images/logo.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;scripts/&lt;span class=&quot;keyword&quot;&gt;main&lt;/span&gt;.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 此部分下列出的文件是需要连接到服务器的白名单资源。无论用户是否处于离线状态，对这些资源的所有请求都会绕过缓存。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NETWORK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;login.php&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/myapi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;http&lt;/span&gt;://api.twitter.com&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 此部分是可选的，用于指定无法访问资源时的后备网页。其中第一个 URI 代表资源，第二个代表后备网页。两个 URI 必须相关，并且必须与清单文件同源。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;offline&lt;/span&gt;.jpg will be served &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; place &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; all images &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; images/&lt;span class=&quot;keyword&quot;&gt;large&lt;/span&gt;/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# &lt;span class=&quot;keyword&quot;&gt;offline&lt;/span&gt;.html will be served &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; place &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; all other .html files&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FALLBACK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;images/&lt;span class=&quot;keyword&quot;&gt;large&lt;/span&gt;/ images/&lt;span class=&quot;keyword&quot;&gt;offline&lt;/span&gt;.jpg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;*.html /&lt;span class=&quot;keyword&quot;&gt;offline&lt;/span&gt;.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;应用缓存只在其清单文件发生更改时才会更新。例如，如果您修改了图片资源或更改了 JavaScript 函数，这些更改不会重新缓存。&lt;em&gt;您必须修改清单文件本身才能让浏览器刷新缓存文件。&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这些部分可按任意顺序排列，且每个部分均可在同一清单中重复出现;&lt;br&gt;可使用通配符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;请注意：&lt;/em&gt; HTTP 缓存标头以及对通过 SSL 提供的网页设置的缓存限制将被替换为缓存清单。因此，通过 https 提供的网页可实现离线运行。chrome 未来将会禁止非 https 网页使用 &lt;code&gt;ApplicationCache&lt;/code&gt; 功能（updated 2016-06-30）&lt;/p&gt;
&lt;h3 id=&quot;更新缓存&quot;&gt;&lt;a href=&quot;#更新缓存&quot; class=&quot;headerlink&quot; title=&quot;更新缓存&quot;&gt;&lt;/a&gt;更新缓存&lt;/h3&gt;&lt;p&gt;应用在离线后将保持缓存状态，除非发生以下某种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户清除了浏览器对您网站的数据存储。&lt;/li&gt;
&lt;li&gt;清单文件经过修改。请注意：更新清单中列出的某个文件并不意味着浏览器会重新缓存该资源。清单文件本身必须进行更改。&lt;/li&gt;
&lt;li&gt;应用缓存通过编程方式进行更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;缓存状态&quot;&gt;&lt;a href=&quot;#缓存状态&quot; class=&quot;headerlink&quot; title=&quot;缓存状态&quot;&gt;&lt;/a&gt;缓存状态&lt;/h3&gt;&lt;p&gt;window.applicationCache 对象是对浏览器的应用缓存的编程访问方式。其 status 属性可用于查看缓存的当前状态：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; appCache = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.applicationCache;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (appCache.status) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; appCache.UNCACHED: &lt;span class=&quot;comment&quot;&gt;// UNCACHED == 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;UNCACHED&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; appCache.IDLE: &lt;span class=&quot;comment&quot;&gt;// IDLE == 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;IDLE&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; appCache.CHECKING: &lt;span class=&quot;comment&quot;&gt;// CHECKING == 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;CHECKING&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; appCache.DOWNLOADING: &lt;span class=&quot;comment&quot;&gt;// DOWNLOADING == 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;DOWNLOADING&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; appCache.UPDATEREADY:  &lt;span class=&quot;comment&quot;&gt;// UPDATEREADY == 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;UPDATEREADY&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; appCache.OBSOLETE: &lt;span class=&quot;comment&quot;&gt;// OBSOLETE == 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;OBSOLETE&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;UKNOWN CACHE STATUS&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;用 js  调用 &lt;code&gt;applicationCache.update()&lt;/code&gt; 将尝试更新用户的缓存（前提是已更改清单文件）。最后，当 &lt;code&gt;applicationCache.status&lt;/code&gt; 处于 &lt;code&gt;UPDATEREADY&lt;/code&gt; 状态时，调用 &lt;code&gt;applicationCache.swapCache()&lt;/code&gt; 即可将原缓存换成新缓存。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; appCache = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.applicationCache;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appCache.update(); &lt;span class=&quot;comment&quot;&gt;// Attempt to update the user&#39;s cache.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (appCache.status == &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.applicationCache.UPDATEREADY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  appCache.swapCache();  &lt;span class=&quot;comment&quot;&gt;// The fetch was successful, swap in the new cache.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请注意：以这种方式使用 update() 和 swapCache() 不会向用户提供更新的资源。此流程只是让浏览器检查是否有新的清单、下载指定的更新内容以及重新填充应用缓存。因此，还需要对网页进行两次重新加载才能向用户提供新的内容，其中第一次是获得新的应用缓存，第二次是刷新网页内容。&lt;/p&gt;
&lt;p&gt;好消息是，您可以避免重新加载两次的麻烦。要使用户更新到最新版网站，可设置监听器，以监听网页加载时的 updateready 事件：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Check if a new cache is available on page load.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;load&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.applicationCache.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;updateready&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.applicationCache.status == &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.applicationCache.UPDATEREADY) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Browser downloaded a new app cache.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Swap it in and reload the page to get the new hotness.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.applicationCache.swapCache();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (confirm(&lt;span class=&quot;string&quot;&gt;&#39;A new version of this site is available. Load it?&#39;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.location.reload();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Manifest didn&#39;t changed. Nothing new to server.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;applicationCache-事件&quot;&gt;&lt;a href=&quot;#applicationCache-事件&quot; class=&quot;headerlink&quot; title=&quot;applicationCache 事件&quot;&gt;&lt;/a&gt;applicationCache 事件&lt;/h3&gt;&lt;p&gt;事件会用于监听缓存的状态。浏览器会对下载进度、应用缓存更新和错误状态等情况触发相应事件。以下代码段为每种缓存事件类型设置了事件监听器：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; appCache = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.applicationCache;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;unction handleCacheEvent(e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;//...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handleCacheError&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  alert(&lt;span class=&quot;string&quot;&gt;&#39;Error: Cache failed to update!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Fired after the first cache of the manifest.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appCache.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;cached&#39;&lt;/span&gt;, handleCacheEvent, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Checking for an update. Always the first event fired in the sequence.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appCache.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;checking&#39;&lt;/span&gt;, handleCacheEvent, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// An update was found. The browser is fetching resources.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appCache.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;downloading&#39;&lt;/span&gt;, handleCacheEvent, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// The manifest returns 404 or 410, the download failed,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// or the manifest changed while the download was in progress.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appCache.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;, handleCacheError, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Fired after the first download of the manifest.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appCache.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;noupdate&#39;&lt;/span&gt;, handleCacheEvent, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Fired if the manifest file returns a 404 or 410.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This results in the application cache being deleted.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appCache.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;obsolete&#39;&lt;/span&gt;, handleCacheEvent, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Fired for each resource listed in the manifest as it is being fetched.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appCache.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;progress&#39;&lt;/span&gt;, handleCacheEvent, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Fired when the manifest resources have been newly redownloaded.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;appCache.addEventListener(&lt;span class=&quot;string&quot;&gt;&#39;updateready&#39;&lt;/span&gt;, handleCacheEvent, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果清单文件或其中指定的资源无法下载，整个更新都将失败。在这种情况下，浏览器将继续使用原应用缓存。&lt;/p&gt;
&lt;p&gt;原文： &lt;a href=&quot;http://www.html5rocks.com/zh/tutorials/appcache/beginner/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;应用缓存初级使用指南&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://html.spec.whatwg.org/#applicationcache&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;html标准&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;原生app可以离线操作，在以前是相对web app的优势，web必须联网才能刷新使用。虽然所有浏览器都有缓存机制，但它们并不一定总能起到预期的作用。HTML5 使用 ApplicationCache 接口解决了由离线带来的部分难题。即使用户在离线状态下按了刷新按钮，您的应用也会正常加载和运行。&lt;br&gt;
    
    </summary>
    
      <category term="ApplicationCache" scheme="http://robin-front.github.io/categories/ApplicationCache/"/>
    
      <category term="html5" scheme="http://robin-front.github.io/categories/ApplicationCache/html5/"/>
    
    
      <category term="ApplicationCache" scheme="http://robin-front.github.io/tags/ApplicationCache/"/>
    
      <category term="html5" scheme="http://robin-front.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>正确检测Javascript数据类型</title>
    <link href="http://robin-front.github.io/2016/06/08/%E6%AD%A3%E7%A1%AE%E6%A3%80%E6%B5%8BJavascript%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://robin-front.github.io/2016/06/08/正确检测Javascript数据类型/</id>
    <published>2016-06-08T15:53:10.000Z</published>
    <updated>2016-06-08T15:53:10.000Z</updated>
    
    <content type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;typeof&quot;&gt;&lt;a href=&quot;#typeof&quot; class=&quot;headerlink&quot; title=&quot;typeof&quot;&gt;&lt;/a&gt;typeof&lt;/h3&gt;&lt;p&gt;对于任何变量来说，使用typeof 总是以字符串形式返回以下6种类型之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;li&gt;function&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;要注意 null 使用 typeof 检测时返回的是 ‘object’&lt;br&gt;对于 null 可以使用&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;o&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (o === &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) ? &lt;span class=&quot;string&quot;&gt;&#39;null&#39;&lt;/span&gt; : &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;(o)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;constructor-构造函数属性值&quot;&gt;&lt;a href=&quot;#constructor-构造函数属性值&quot; class=&quot;headerlink&quot; title=&quot;constructor(构造函数属性值)&quot;&gt;&lt;/a&gt;constructor(构造函数属性值)&lt;/h3&gt;&lt;p&gt;使用 constructor 属性可以判断绝大部分数据的类型。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; a.constructor &lt;span class=&quot;comment&quot;&gt;// number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &amp;#123;&amp;#125;; a.constructor &lt;span class=&quot;comment&quot;&gt;// object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = []; a.constructor &lt;span class=&quot;comment&quot;&gt;// array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;; a.constructor &lt;span class=&quot;comment&quot;&gt;// boolean&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;string&quot;&gt;&#39;true&#39;&lt;/span&gt;; a.constructor &lt;span class=&quot;comment&quot;&gt;// string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;aaa&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;; a.constructor &lt;span class=&quot;comment&quot;&gt;// function&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;但是对于 &lt;code&gt;undefined&lt;/code&gt; 和 &lt;code&gt;null&lt;/code&gt; 特殊值，不能能使用 constructor,会直接抛出异常。可以先转换布尔值，如果为 true，则说明不是 undefined 和null , 再调用 constructor属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;o&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !o ? o : (o).constructor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Object-prototype-toString&quot;&gt;&lt;a href=&quot;#Object-prototype-toString&quot; class=&quot;headerlink&quot; title=&quot;Object.prototype.toString&quot;&gt;&lt;/a&gt;Object.prototype.toString&lt;/h3&gt;&lt;p&gt;使用 toString() 方法检测对象类型是最安全、最准确的。它返回的字符串形式如下 [object class], 其中， object表示对象的通用类型，class表示对象的内部类型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但是，要获取对象class值的唯一方法是必须调用 Object 对象定义的默认 toString() 方法，因为不同对象都会预定义自己的 toString() 方法，所以不能直接调用对象的 toString() 方法。&lt;br&gt;var a = new Date()&lt;br&gt;a.toString() // 当前的UTC时间字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString.apply(a)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完善的检测方法&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 返回值有： &#39;undefined&#39;, &#39;null&#39;, &#39;number&#39;, &#39;boolean&#39;, &#39;object&#39;, &#39;function&#39;, &#39;regexp&#39;, &#39;string&#39;, &#39;array&#39;, &#39;date&#39;, &#39;error&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;typeOf&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;o&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _toString =  &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.toString;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _type = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;number&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;number&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;boolean&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;boolean&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;[object Function]&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;[object RegExp]&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;regexp&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;[object Array]&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;array&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;[object Date]&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;date&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;[object Error]&#39;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _type[&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; o] || _type[_toString.call(o)] || (o ? &lt;span class=&quot;string&quot;&gt;&#39;object&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;null&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;typeof&quot;&gt;&lt;a href=&quot;#typeof&quot; class=&quot;headerlink&quot; title=&quot;typeof&quot;&gt;&lt;/a&gt;typeof&lt;/h3&gt;&lt;p&gt;对于任何变量来说，使用typeof 总是以字符串形式返回以下6种类型之一
    
    </summary>
    
      <category term="Javascript" scheme="http://robin-front.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="http://robin-front.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>git小记</title>
    <link href="http://robin-front.github.io/2016/05/16/git%E5%B0%8F%E8%AE%B0/"/>
    <id>http://robin-front.github.io/2016/05/16/git小记/</id>
    <published>2016-05-16T12:57:45.000Z</published>
    <updated>2016-05-16T12:57:45.000Z</updated>
    
    <content type="html">&lt;p&gt;有一些不太常用的git命令记录下&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;git-amend&quot;&gt;&lt;a href=&quot;#git-amend&quot; class=&quot;headerlink&quot; title=&quot;git amend&quot;&gt;&lt;/a&gt;git amend&lt;/h3&gt;&lt;p&gt;当一些更改已提交，却发现漏提交了一部分文件，这时就可以用这个命令，可以把漏的部分追加到上一次提交&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add forgotten_file.rb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git commit ––amend&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;reset-soft&quot;&gt;&lt;a href=&quot;#reset-soft&quot; class=&quot;headerlink&quot; title=&quot;reset soft&quot;&gt;&lt;/a&gt;reset soft&lt;/h3&gt;&lt;p&gt;刚刚提交，却又发现刚才的代码还有bug，想再次修改后再提交&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git reset ––soft HEAD^&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意与 &lt;code&gt;git reset --hard HEAD^&lt;/code&gt; 不同的是，&lt;code&gt;--soft&lt;/code&gt;并不同把上一次提交的代码删除，只是把它变成未提交的状态，而&lt;code&gt;--hard&lt;/code&gt;却会完全撤消上一次提交的代码。&lt;/p&gt;
&lt;h3 id=&quot;git-blame&quot;&gt;&lt;a href=&quot;#git-blame&quot; class=&quot;headerlink&quot; title=&quot;git blame&quot;&gt;&lt;/a&gt;git blame&lt;/h3&gt;&lt;p&gt;当你想查出，一个文件里，每一行代码是谁编辑的，可以使用这个命令&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git blame robin.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;git-checkout-tags-v1-0&quot;&gt;&lt;a href=&quot;#git-checkout-tags-v1-0&quot; class=&quot;headerlink&quot; title=&quot;git checkout tags/v1.0&quot;&gt;&lt;/a&gt;git checkout tags/v1.0&lt;/h3&gt;&lt;p&gt;当分支名和标签名相同时，需要这样写&lt;/p&gt;
&lt;h3 id=&quot;branch-at&quot;&gt;&lt;a href=&quot;#branch-at&quot; class=&quot;headerlink&quot; title=&quot;branch_at&quot;&gt;&lt;/a&gt;branch_at&lt;/h3&gt;&lt;p&gt;当你想从某一历史版本中开一个分支，而不是最新的版本中开分支，可以这样写：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git branch &lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;_branch eadnadk213dsafdsafkl234j32ll34l2l&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;rebase&quot;&gt;&lt;a href=&quot;#rebase&quot; class=&quot;headerlink&quot; title=&quot;rebase&quot;&gt;&lt;/a&gt;rebase&lt;/h3&gt;&lt;p&gt;当远程mater分支已更改， 本地又基于旧版本的master进行的提交，可以重新指定基于远程master，之后再提交，避免冲突时把远程的代码merge 掉：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git rebase origin/master master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git push origin master&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;git-reflog&quot;&gt;&lt;a href=&quot;#git-reflog&quot; class=&quot;headerlink&quot; title=&quot;git reflog&quot;&gt;&lt;/a&gt;git reflog&lt;/h3&gt;&lt;p&gt;reflog是git用来记录引用变化的一种机制，比如记录分支的变化或者是HEAD引用的变化。可以用来查找操作记录以及恢复数据&lt;/p&gt;
&lt;h3 id=&quot;git-submodule-add&quot;&gt;&lt;a href=&quot;#git-submodule-add&quot; class=&quot;headerlink&quot; title=&quot;git submodule add&quot;&gt;&lt;/a&gt;git submodule add&lt;/h3&gt;&lt;p&gt;添加外部项目为子模块&lt;/p&gt;
&lt;h3 id=&quot;git-rebase-i&quot;&gt;&lt;a href=&quot;#git-rebase-i&quot; class=&quot;headerlink&quot; title=&quot;git rebase -i&quot;&gt;&lt;/a&gt;git rebase -i&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;有一些不太常用的git命令记录下&lt;br&gt;
    
    </summary>
    
      <category term="git" scheme="http://robin-front.github.io/categories/git/"/>
    
    
      <category term="git" scheme="http://robin-front.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>pm2一个带有负载均衡功能的Node应用的进程管理器</title>
    <link href="http://robin-front.github.io/2016/05/04/pm2%E4%B8%80%E4%B8%AA%E5%B8%A6%E6%9C%89%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%8A%9F%E8%83%BD%E7%9A%84Node%E5%BA%94%E7%94%A8%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>http://robin-front.github.io/2016/05/04/pm2一个带有负载均衡功能的Node应用的进程管理器/</id>
    <published>2016-05-04T14:04:27.000Z</published>
    <updated>2016-05-04T14:04:27.000Z</updated>
    
    <content type="html">&lt;p&gt;PM2是一个提供了内置的负载均衡的Node.js应用程序进程管理器。它可以让你保持应用程序永远在线，无需停机地重启应用，也有助于系统管理员工作。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装-PM2&quot;&gt;&lt;a href=&quot;#安装-PM2&quot; class=&quot;headerlink&quot; title=&quot;安装 PM2&quot;&gt;&lt;/a&gt;安装 PM2&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install pm2 -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;启动应用&quot;&gt;&lt;a href=&quot;#启动应用&quot; class=&quot;headerlink&quot; title=&quot;启动应用&quot;&gt;&lt;/a&gt;启动应用&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 start app.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，应用就已经在后台启动，并被监测保持在线。&lt;/p&gt;
&lt;h3 id=&quot;模块系统&quot;&gt;&lt;a href=&quot;#模块系统&quot; class=&quot;headerlink&quot; title=&quot;模块系统&quot;&gt;&lt;/a&gt;模块系统&lt;/h3&gt;&lt;p&gt;PM2 内嵌一个简单强大的模块系统，可以直接像下面这样安装模块&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 install &amp;lt;module_name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pm2-hive/pm2-logrotate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pm2-logrotate&lt;/a&gt; 日志管理及分割模块&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pm2-hive/pm2-webshell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pm2-webshell&lt;/a&gt; 强大的浏览器模拟终端&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pm2-hive/pm2-auto-pull&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;pm2-auto-pull&lt;/a&gt; 持续集成，自动拉取代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;更新PM2&quot;&gt;&lt;a href=&quot;#更新PM2&quot; class=&quot;headerlink&quot; title=&quot;更新PM2&quot;&gt;&lt;/a&gt;更新PM2&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Install latest pm2 version&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install pm2 -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Save process list, exit old PM2 &amp;amp; restore all processes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 update&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;主要特性&quot;&gt;&lt;a href=&quot;#主要特性&quot; class=&quot;headerlink&quot; title=&quot;主要特性&quot;&gt;&lt;/a&gt;主要特性&lt;/h3&gt;&lt;h4 id=&quot;命令概览&quot;&gt;&lt;a href=&quot;#命令概览&quot; class=&quot;headerlink&quot; title=&quot;命令概览&quot;&gt;&lt;/a&gt;命令概览&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install pm2 -g            &lt;span class=&quot;comment&quot;&gt;# Install PM2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 start app.js              &lt;span class=&quot;comment&quot;&gt;# Start, Daemonize and auto restart application&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 start app.js -i 4         &lt;span class=&quot;comment&quot;&gt;# Start 4 instances of application in cluster mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;comment&quot;&gt;# it will load balance network queries to each app&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 start app.js --name=&lt;span class=&quot;string&quot;&gt;&quot;api&quot;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# Start application and name it &quot;api&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 start app.js --watch      &lt;span class=&quot;comment&quot;&gt;# Restart application on file change&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 start script.sh           &lt;span class=&quot;comment&quot;&gt;# Start bash script&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 list                      &lt;span class=&quot;comment&quot;&gt;# List all processes started with PM2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 monit                     &lt;span class=&quot;comment&quot;&gt;# Display memory and cpu usage of each app&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 show [app-name]           &lt;span class=&quot;comment&quot;&gt;# Show all informations about application&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 logs                      &lt;span class=&quot;comment&quot;&gt;# Display logs of all apps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 logs [app-name]           &lt;span class=&quot;comment&quot;&gt;# Display logs for a specific app&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 flush&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 stop all                  &lt;span class=&quot;comment&quot;&gt;# Stop all apps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 stop 0                    &lt;span class=&quot;comment&quot;&gt;# Stop process with id 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 restart all               &lt;span class=&quot;comment&quot;&gt;# Restart all apps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 reload all                &lt;span class=&quot;comment&quot;&gt;# Reload all apps in cluster mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 gracefulReload all        &lt;span class=&quot;comment&quot;&gt;# Graceful reload all apps in cluster mode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 delete all                &lt;span class=&quot;comment&quot;&gt;# Kill and delete all apps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 delete 0                  &lt;span class=&quot;comment&quot;&gt;# Delete app with id 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 scale api 10              &lt;span class=&quot;comment&quot;&gt;# Scale app with name api to 10 instances&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 reset [app-name]          &lt;span class=&quot;comment&quot;&gt;# Reset number of restart for [app-name]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 startup                   &lt;span class=&quot;comment&quot;&gt;# Generate a startup script to respawn PM2 on boot&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 save                      &lt;span class=&quot;comment&quot;&gt;# Save current process list&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 resurrect                 &lt;span class=&quot;comment&quot;&gt;# Restore previously save processes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 update                    &lt;span class=&quot;comment&quot;&gt;# Save processes, kill PM2 and restore processes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 generate                  &lt;span class=&quot;comment&quot;&gt;# Generate a sample json configuration file&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 deploy app.json prod setup    &lt;span class=&quot;comment&quot;&gt;# Setup &quot;prod&quot; remote server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 deploy app.json prod          &lt;span class=&quot;comment&quot;&gt;# Update &quot;prod&quot; remote server&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 deploy app.json prod revert 2 &lt;span class=&quot;comment&quot;&gt;# Revert &quot;prod&quot; remote server by 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 module:generate [name]    &lt;span class=&quot;comment&quot;&gt;# Generate sample module with name [name]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 install pm2-logrotate     &lt;span class=&quot;comment&quot;&gt;# Install module (here a log rotation system)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 uninstall pm2-logrotate   &lt;span class=&quot;comment&quot;&gt;# Uninstall module&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 publish                   &lt;span class=&quot;comment&quot;&gt;# Increment version, git push and npm publish&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;开启进程的多种方式&quot;&gt;&lt;a href=&quot;#开启进程的多种方式&quot; class=&quot;headerlink&quot; title=&quot;开启进程的多种方式&quot;&gt;&lt;/a&gt;开启进程的多种方式&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 start app.js --watch      &lt;span class=&quot;comment&quot;&gt;# Restart application on file change&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 start script.sh           &lt;span class=&quot;comment&quot;&gt;# Start bash script&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 start app.js -- &lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt; 34     &lt;span class=&quot;comment&quot;&gt;# Start app and pass option -a 34&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 start app.json            &lt;span class=&quot;comment&quot;&gt;# Start all applications declared in app.json&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 start my-python-script.py --interpreter python&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;进程管理&quot;&gt;&lt;a href=&quot;#进程管理&quot; class=&quot;headerlink&quot; title=&quot;进程管理&quot;&gt;&lt;/a&gt;进程管理&lt;/h4&gt;&lt;p&gt;列出所有进程：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;管理进程&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 stop     &amp;lt;app_name|id|&lt;span class=&quot;string&quot;&gt;&#39;all&#39;&lt;/span&gt;|json_conf&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 restart  &amp;lt;app_name|id|&lt;span class=&quot;string&quot;&gt;&#39;all&#39;&lt;/span&gt;|json_conf&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 delete   &amp;lt;app_name|id|&lt;span class=&quot;string&quot;&gt;&#39;all&#39;&lt;/span&gt;|json_conf&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;查看进程的详情&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 describe &amp;lt;id|app_name&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;CPU-内存监测&quot;&gt;&lt;a href=&quot;#CPU-内存监测&quot; class=&quot;headerlink&quot; title=&quot;CPU / 内存监测&quot;&gt;&lt;/a&gt;CPU / 内存监测&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 monit&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;日志工具&quot;&gt;&lt;a href=&quot;#日志工具&quot; class=&quot;headerlink&quot; title=&quot;日志工具&quot;&gt;&lt;/a&gt;日志工具&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pm2 logs [&lt;span class=&quot;string&quot;&gt;&#39;all&#39;&lt;/span&gt;|&lt;span class=&quot;string&quot;&gt;&#39;PM2&#39;&lt;/span&gt;|app_name|app_id] [--err|--out] [--lines &amp;lt;n&amp;gt;] [--raw] [--timestamp [format]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 logs&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 logs WEB-API --err&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 logs all --raw&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 logs --lines 5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 logs --timestamp &lt;span class=&quot;string&quot;&gt;&quot;HH:mm:ss&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 logs WEB-API --lines 0 --timestamp &lt;span class=&quot;string&quot;&gt;&quot;HH:mm&quot;&lt;/span&gt; --out&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 logs PM2 --timestamp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 flush          // Clear all the logs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;开机启动&quot;&gt;&lt;a href=&quot;#开机启动&quot; class=&quot;headerlink&quot; title=&quot;开机启动&quot;&gt;&lt;/a&gt;开机启动&lt;/h4&gt;&lt;p&gt;PM2可以自动生成并配置开机启动脚本，让服务器在重启的时候可以保持应用在线&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 startup&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# auto-detect platform&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pm2 startup [platform]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# render startup-script for a specific platform, the [platform] could be one of:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#   ubuntu|centos|redhat|gentoo|systemd|darwin|amazon&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://pm2.keymetrics.io/docs/usage/quick-start/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;更多查看&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;PM2是一个提供了内置的负载均衡的Node.js应用程序进程管理器。它可以让你保持应用程序永远在线，无需停机地重启应用，也有助于系统管理员工作。&lt;br&gt;
    
    </summary>
    
      <category term="Node" scheme="http://robin-front.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="http://robin-front.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Node.js的cluster模块发挥CPU的多核优势</title>
    <link href="http://robin-front.github.io/2016/04/24/Node-js%E7%9A%84cluster%E6%A8%A1%E5%9D%97%E5%8F%91%E6%8C%A5CPU%E7%9A%84%E5%A4%9A%E6%A0%B8%E4%BC%98%E5%8A%BF/"/>
    <id>http://robin-front.github.io/2016/04/24/Node-js的cluster模块发挥CPU的多核优势/</id>
    <published>2016-04-24T14:20:00.000Z</published>
    <updated>2016-04-24T14:20:00.000Z</updated>
    
    <content type="html">&lt;p&gt;一个Node.js应用程序只能使用在一个线程中。为了充分发挥多核CPU的优势，Node.js中提供了一个 &lt;code&gt;cluster&lt;/code&gt;模块，允许在多个子进程中运行不同的Node.js应用程序。&lt;code&gt;cluster&lt;/code&gt;模块是对 &lt;code&gt;child_process.fork()&lt;/code&gt;的一个封装。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;一个Node.js应用程序只能使用在一个线程中。为了充分发挥多核CPU的优势，Node.js中提供了一个 &lt;code&gt;cluster&lt;/code&gt;模块，允许在多个子进程中运行不同的Node.js应用程序。&lt;code&gt;cluster&lt;/code&gt;模块是对 &lt;code&gt;child_process.fork()&lt;/code&gt;的一个封装。&lt;br&gt;
    
    </summary>
    
      <category term="Node" scheme="http://robin-front.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="http://robin-front.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>子进程child_process让Node.js具备命令行的功能</title>
    <link href="http://robin-front.github.io/2016/04/22/%E5%AD%90%E8%BF%9B%E7%A8%8Bchild-process%E8%AE%A9Node-js%E5%85%B7%E5%A4%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <id>http://robin-front.github.io/2016/04/22/子进程child-process让Node-js具备命令行的功能/</id>
    <published>2016-04-21T16:02:56.000Z</published>
    <updated>2016-04-21T16:02:56.000Z</updated>
    
    <content type="html">&lt;p&gt;在&lt;code&gt;Node&lt;/code&gt;中使用子进程的目的，正是希望从&lt;code&gt;Node&lt;/code&gt;应用程序中通过命令行的方式访问计算机资源。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;共有四种不同的技术来创建一个子进程&lt;/p&gt;
&lt;h3 id=&quot;child-process-spawn&quot;&gt;&lt;a href=&quot;#child-process-spawn&quot; class=&quot;headerlink&quot; title=&quot;child_process.spawn&quot;&gt;&lt;/a&gt;child_process.spawn&lt;/h3&gt;&lt;p&gt;&lt;code&gt;spawn&lt;/code&gt;是创建子进程最常见的方法。例：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; spawn = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;child_process&#39;&lt;/span&gt;).spawn,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pwd = spawn(&lt;span class=&quot;string&quot;&gt;&#39;pwd&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pwd.stdout.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;stdout:&#39;&lt;/span&gt; + data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pwd.stderr.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;stderr&#39;&lt;/span&gt; + data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pwd.on(&lt;span class=&quot;string&quot;&gt;&#39;close&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;code&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;child process close with code&#39;&lt;/span&gt; + code);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pwd.on(&lt;span class=&quot;string&quot;&gt;&#39;exit&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;code&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;child process exit with code&#39;&lt;/span&gt; + code);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;参数作为数组传入&lt;/li&gt;
&lt;li&gt;子进程对 &lt;code&gt;stdout&lt;/code&gt; 和 &lt;code&gt;stderr&lt;/code&gt; 相关事件可以进行捕获&lt;/li&gt;
&lt;li&gt;子进程退出代码为 1，表示发生了错误；没有错误时，退出代码为 0&lt;/li&gt;
&lt;li&gt;尽量使用&lt;code&gt;close&lt;/code&gt;事件而不是&lt;code&gt;exit&lt;/code&gt;事件，在进程结束后访问其数据可能会导致应用程序崩溃&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何使用 &lt;code&gt;stdin&lt;/code&gt; 标准输入对象呢：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; spawn = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;child_process&#39;&lt;/span&gt;).spawn,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    find = spawn(&lt;span class=&quot;string&quot;&gt;&#39;find&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;.&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;-ls&#39;&lt;/span&gt;]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    grep = spawn(&lt;span class=&quot;string&quot;&gt;&#39;grep&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;test&#39;&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grep.stdout.setEncoding(&lt;span class=&quot;string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find.stdout.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  grep.stdin.write(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grep.stdout.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;上面这段例子模拟了&lt;code&gt;Unix&lt;/code&gt;管道（|）功能，可以将一个命令的结果传递给另一个命令作为输入。&lt;/p&gt;
&lt;h3 id=&quot;child-process-exec-和-child-process-execFile&quot;&gt;&lt;a href=&quot;#child-process-exec-和-child-process-execFile&quot; class=&quot;headerlink&quot; title=&quot;child_process.exec 和 child_process.execFile&quot;&gt;&lt;/a&gt;child_process.exec 和 child_process.execFile&lt;/h3&gt;&lt;p&gt;通过 &lt;code&gt;child_process.exec&lt;/code&gt; 和 &lt;code&gt;child_process.execFile&lt;/code&gt; 来启动 &lt;code&gt;shell&lt;/code&gt; 执行命令可以缓存命令执行的结果&lt;/p&gt;
&lt;p&gt;&lt;code&gt;child_process.execFile&lt;/code&gt; 的第一个参数是命令或执行文件路径， 第二个参数是可选参数列表， 第三个参数是回调函数，该回调函数有三个参数： error, stdout 和 stderr。如果没有发生错误，执行结果会保存到 stdout。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;child_process.exec&lt;/code&gt; 则没有可选参数列表，只有 &lt;code&gt;execFile&lt;/code&gt; 方法的第一个和第三个参数。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; execFile = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;child_process&#39;&lt;/span&gt;).execFile,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    child;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;child = execFile(&lt;span class=&quot;string&quot;&gt;&#39;ls&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;-l&#39;&lt;/span&gt;], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;error, stdout, stderr&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;stdout: &#39;&lt;/span&gt; + stdout);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;execFile&lt;/code&gt; 方法会更安全，因为它的命令行参数作为数组传入。&lt;/p&gt;
&lt;h3 id=&quot;child-process-fork&quot;&gt;&lt;a href=&quot;#child-process-fork&quot; class=&quot;headerlink&quot; title=&quot;child_process.fork&quot;&gt;&lt;/a&gt;child_process.fork&lt;/h3&gt;&lt;p&gt;&lt;code&gt;fork&lt;/code&gt; 其实是对 &lt;code&gt;spawn&lt;/code&gt;的封装，目的是为了启动子进程并运行 &lt;code&gt;Node.js&lt;/code&gt;模块。&lt;/p&gt;
&lt;p&gt;例：&lt;br&gt;&lt;code&gt;fork(&amp;#39;./child.js&amp;#39;)&lt;/code&gt; 相当于 &lt;code&gt;spawn(&amp;#39;node&amp;#39;, [&amp;#39;./child.js&amp;#39;])&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此方法会在父进程与子进程之间建立一个真实的通信管道，用于进程之间的通信。但通过&lt;code&gt;fork&lt;/code&gt;生成的每个子进程都需要一个全新的 V8 实例，这需要耗费更多时间和内存。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; n = child_process.fork(&lt;span class=&quot;string&quot;&gt;&#39;./child.js&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n.on(&lt;span class=&quot;string&quot;&gt;&#39;message&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;m&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;PARENT got message:&#39;&lt;/span&gt;, m);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n.send(&amp;#123; hello: &lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;send&lt;/code&gt; 方法用于进程间通信， 通过监听&lt;code&gt;message&lt;/code&gt;事件来获取消息&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;code&gt;Node&lt;/code&gt;中使用子进程的目的，正是希望从&lt;code&gt;Node&lt;/code&gt;应用程序中通过命令行的方式访问计算机资源。&lt;br&gt;
    
    </summary>
    
      <category term="Node" scheme="http://robin-front.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="http://robin-front.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>React-v15.0升级指南</title>
    <link href="http://robin-front.github.io/2016/04/19/React-v15-0%E5%8D%87%E7%BA%A7%E6%8C%87%E5%8D%97/"/>
    <id>http://robin-front.github.io/2016/04/19/React-v15-0升级指南/</id>
    <published>2016-04-19T14:38:50.000Z</published>
    <updated>2016-04-19T14:38:50.000Z</updated>
    
    <content type="html">&lt;p&gt;React-v15.0升级指南&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;主要变化&quot;&gt;&lt;a href=&quot;#主要变化&quot; class=&quot;headerlink&quot; title=&quot;主要变化&quot;&gt;&lt;/a&gt;主要变化&lt;/h3&gt;&lt;h4 id=&quot;加入document-createElement-并且废弃-data-reactid&quot;&gt;&lt;a href=&quot;#加入document-createElement-并且废弃-data-reactid&quot; class=&quot;headerlink&quot; title=&quot;加入document.createElement 并且废弃 data-reactid&quot;&gt;&lt;/a&gt;加入&lt;code&gt;document.createElement&lt;/code&gt; 并且废弃 &lt;code&gt;data-reactid&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;经过我们讨论，&lt;code&gt;DOM&lt;/code&gt; 有很大的改变。其中最值得关注的一个变化就是，我们不再给每个 &lt;code&gt;DOM&lt;/code&gt;设置&lt;code&gt;data-reactid&lt;/code&gt;属性。虽然这更难看出一个网页是否使用了 &lt;code&gt;React&lt;/code&gt;，但优势是&lt;code&gt;DOM&lt;/code&gt;更轻量了。这一改变让我们使用 &lt;code&gt;document.createElement&lt;/code&gt;来初始渲染成为可能。在此之前，我们会生成大量的HTML字符串，然后使用 &lt;code&gt;node.innerHTML&lt;/code&gt;来插入。当时，我们决定尽快在大部分案例和支持的浏览器中使用&lt;code&gt;document.createElement&lt;/code&gt;。浏览器持续地改善，因此兼容所有浏览器不再是正确的。使用 &lt;code&gt;createElement&lt;/code&gt;可以让&lt;code&gt;React&lt;/code&gt;的其他功能运行得更快。原来的&lt;code&gt;ids&lt;/code&gt;用来映射&lt;code&gt;React&lt;/code&gt;组件的事件，这意味着，我们不得不对每一个事件做很多工作，即使我们尽可能地缓存这些数据。正如我们遇到过的，缓存和缓存失效很容易出错，我们发现许多问题都无法重现。现在我们在渲染的时候可以直接建立映射，因为我们有了节点的钩子。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;data-reactid&lt;/code&gt;仍然存在于服务端渲染中。不管怎样，这已经比以前要小很多了，并且这只是一个简单的自增计数器。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;不再有额外的-lt-span-gt-标签&quot;&gt;&lt;a href=&quot;#不再有额外的-lt-span-gt-标签&quot; class=&quot;headerlink&quot; title=&quot;不再有额外的 &amp;lt;span&amp;gt;标签&quot;&gt;&lt;/a&gt;不再有额外的 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;标签&lt;/h4&gt;&lt;p&gt;另一个关于&lt;code&gt;DOM&lt;/code&gt;讨论的重大变化是如何渲染文本块。之前你可能关注到&lt;code&gt;React&lt;/code&gt;渲染了很多额外的&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;标签。举个例子，我们在主页渲染&lt;code&gt;&amp;lt;div&amp;gt;Hello {this.props.name}&amp;lt;/div&amp;gt;&lt;/code&gt;，结果包含了两层&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;标签。现在我们渲染时使用注释节点穿插在普通文本外来划分。这让我们同样拥有更新部分文本的能力，而不用额外的标签。很少人会这些真实的额外标签有依赖，所以你很可以不会受到任何影响。但是如果你在样式文件中对&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;标签有定义，你可能需要作出相应的调整。你仍然可以在你的组件里显式地指定渲染这些标签。&lt;/p&gt;
&lt;h4 id=&quot;现在使用注释节点渲染-null&quot;&gt;&lt;a href=&quot;#现在使用注释节点渲染-null&quot; class=&quot;headerlink&quot; title=&quot;现在使用注释节点渲染 null&quot;&gt;&lt;/a&gt;现在使用注释节点渲染 &lt;code&gt;null&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;我们还利用注释节点来渲染&lt;code&gt;null&lt;/code&gt;。渲染&lt;code&gt;null&lt;/code&gt;是我们在&lt;code&gt;React v0.11&lt;/code&gt;版本添加的特性，并且通来渲染 &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;元素来应用。现在通过渲染注释节点，你的样式可能会有一些错乱，尤其是当你使用了&lt;code&gt;:nth-child&lt;/code&gt;这样的选择器。&lt;code&gt;React&lt;/code&gt;使用&lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;标签，一直在考虑如何&lt;code&gt;React&lt;/code&gt;命中&lt;code&gt;DOM&lt;/code&gt;的实现细节。我们相信这些变化是安全的。另外，我们已经在许多典型的应用中看到这些变化在提升&lt;code&gt;React&lt;/code&gt;的性能。&lt;/p&gt;
&lt;h4 id=&quot;组件现在也可以返回-null&quot;&gt;&lt;a href=&quot;#组件现在也可以返回-null&quot; class=&quot;headerlink&quot; title=&quot;组件现在也可以返回 null&quot;&gt;&lt;/a&gt;组件现在也可以返回 &lt;code&gt;null&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;我们在&lt;code&gt;React v0.14&lt;/code&gt;添加了定义无状态组件的功能。不管怎样，&lt;code&gt;React 0.14&lt;/code&gt;仍然允许你定义一个非继承&lt;code&gt;React.Component&lt;/code&gt;或者使用 &lt;code&gt;React.createClass()&lt;/code&gt;创建的组件。所以我们不能准确地判断你的组件是一个函数还是一个类，并且也不允许你从中返回一个&lt;code&gt;null&lt;/code&gt;。这个问题在&lt;code&gt;React 15&lt;/code&gt;中已经解决，你可以在你任何组件中返回&lt;code&gt;null&lt;/code&gt;，不管是函数还是类。&lt;/p&gt;
&lt;h4 id=&quot;增加SVG支持&quot;&gt;&lt;a href=&quot;#增加SVG支持&quot; class=&quot;headerlink&quot; title=&quot;增加SVG支持&quot;&gt;&lt;/a&gt;增加&lt;code&gt;SVG&lt;/code&gt;支持&lt;/h4&gt;&lt;p&gt;所有的&lt;code&gt;SVG&lt;/code&gt;标签现在都已完美支持。（极少的标签在&lt;code&gt;React.DOM&lt;/code&gt;里不存在，但&lt;code&gt;JSX&lt;/code&gt;和&lt;code&gt;React.createElement&lt;/code&gt;支持所有标签名）。所有被浏览器支持的&lt;code&gt;SVG&lt;/code&gt;属性也全部支持。如果你发现少了什么属性，请给我们提 &lt;code&gt;issue&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;本文翻译自 &lt;a href=&quot;https://facebook.github.io/react/blog/2016/04/07/react-v15.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React v15.0&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;React-v15.0升级指南&lt;br&gt;
    
    </summary>
    
      <category term="react" scheme="http://robin-front.github.io/categories/react/"/>
    
    
      <category term="react" scheme="http://robin-front.github.io/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react-router动态路由与Webpack分片thunks</title>
    <link href="http://robin-front.github.io/2016/04/18/react-router%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E4%B8%8EWebpack%E5%88%86%E7%89%87thunks/"/>
    <id>http://robin-front.github.io/2016/04/18/react-router动态路由与Webpack分片thunks/</id>
    <published>2016-04-18T14:16:27.000Z</published>
    <updated>2016-04-18T14:16:27.000Z</updated>
    
    <content type="html">&lt;p&gt;对于大型应用来说，一个首当其冲的问题就是所需加载的 JavaScript 的大小。程序应当只加载当前渲染页所需的 JavaScript。有些开发者将这种方式称之为“代码分拆” — 将所有的代码分拆成多个小包，在用户浏览过程中按需加载。&lt;/p&gt;
&lt;p&gt;对于底层细节的修改不应该需要它上面每一层级都进行修改。举个例子，为一个照片浏览页添加一个路径不应该影响到首页加载的 JavaScript 的大小。也不能因为多个团队共用一个大型的路由配置文件而造成合并时的冲突。&lt;/p&gt;
&lt;p&gt;路由是个非常适于做代码分拆的地方：它的责任就是配置好每个 view。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果你使用过单页应用的框架，那你可能应用过路由。路由可以让你的应用看起来好像有很多“页面”。用户可以通过 &lt;code&gt;youdomain.com/about&lt;/code&gt;来获取公司相关的介绍信息。&lt;/p&gt;
&lt;p&gt;在这里使用双引号，是因为这并不是一个真正意义上的“页面”。&lt;/p&gt;
&lt;p&gt;通过各种流行的构建工具的配置，所有的脚本最后都得到连成一片巨大的&lt;code&gt;.js&lt;/code&gt;文件。当你访问  &lt;code&gt;youdomain.com/about&lt;/code&gt; 这个页面的时候，你会下载应用程序的所有内容。但用户可能根本不想，也不会去浏览这些内容。这是非常糟糕的，也会让你的应用变得越来越大。&lt;/p&gt;
&lt;p&gt;对于一个不使用任何框架的普通网页，你首先是下载一个 &lt;code&gt;.html&lt;/code&gt; 文件，然后是从缓存中获取脚本和样式文件。用户只下载他需要的内容，仅此而已。&lt;/p&gt;
&lt;p&gt;你想让你的&lt;code&gt;React.js&lt;/code&gt;应用也按需加载吗？&lt;/p&gt;
&lt;h3 id=&quot;前提条件&quot;&gt;&lt;a href=&quot;#前提条件&quot; class=&quot;headerlink&quot; title=&quot;前提条件&quot;&gt;&lt;/a&gt;前提条件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;react-router&lt;/code&gt; 做为路由解决方案，因为这是功能最强大的 &lt;code&gt;React&lt;/code&gt;路由方案；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Webpack&lt;/code&gt;作为构建工具，因为它有强大的分片能力和齐全的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;react-router&quot;&gt;&lt;a href=&quot;#react-router&quot; class=&quot;headerlink&quot; title=&quot;react-router&quot;&gt;&lt;/a&gt;react-router&lt;/h3&gt;&lt;p&gt;下面是一个常见的路由例子：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; HomePage = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./HomePage.jsx&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; AboutPage = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./AboutPage.jsx&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; FAQPage = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./FAQPage.jsx&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Router history=&amp;#123;history&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;Route path=&quot;/&quot; component=&amp;#123;HomePage&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;Route path=&quot;/about&quot; component=&amp;#123;AboutPage&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;Route path=&quot;/faq&quot; component=&amp;#123;FAQPage&amp;#125; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/Router&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了方便解释，省略了很多代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果一个用户浏览 &lt;code&gt;yourdomain.com/about&lt;/code&gt;页面，他将看到&lt;code&gt;AboutPage&lt;/code&gt; 组件；如果查看 &lt;code&gt;yourdomain.com/faq&lt;/code&gt;页面，将看到 &lt;code&gt;FAQPage&lt;/code&gt;组件等等。当你使用路由去配置你的应用，这些组件和相关代码将被打包成一个&lt;code&gt;.js&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;值得庆幸的是，&lt;code&gt;react-router&lt;/code&gt;的 &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt;标签有一个叫做&lt;code&gt;getComponent&lt;/code&gt;的异步的方法去获取组件。他是一个&lt;code&gt;function&lt;/code&gt;接受两个参数，分别是&lt;code&gt;location&lt;/code&gt;和&lt;code&gt;callback&lt;/code&gt;。当&lt;code&gt;react-router&lt;/code&gt;执行回调函数 &lt;code&gt;callback(null, ourComponent)&lt;/code&gt;时，路由只渲染&lt;code&gt;ourComponent&lt;/code&gt;组件。&lt;/p&gt;
&lt;h4 id=&quot;getComponent&quot;&gt;&lt;a href=&quot;#getComponent&quot; class=&quot;headerlink&quot; title=&quot;getComponent&quot;&gt;&lt;/a&gt;getComponent&lt;/h4&gt;&lt;p&gt;让我们来重写上面的例子来支持异步组件：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Router history=&amp;#123;history&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;Route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path=&quot;/&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getComponent=&amp;#123;(location, callback) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 在这里执行异步操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      callback(null, HomePage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;Route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path=&quot;/about&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getComponent=&amp;#123;(location, callback) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 在这里执行异步操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      callback(null, AboutPage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;Route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path=&quot;/faq&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getComponent=&amp;#123;(location, callback) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      // 在这里执行异步操作&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      callback(null, FAQPage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/Router&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这些组件会在需要的时候异步加载。这些组件仍然会在同一个文件中，并且你的应用看起来不会有任何不同。但是没有它，我们的网页将无法运行。&lt;/p&gt;
&lt;h3 id=&quot;Webpack&quot;&gt;&lt;a href=&quot;#Webpack&quot; class=&quot;headerlink&quot; title=&quot;Webpack&quot;&gt;&lt;/a&gt;Webpack&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Webpack&lt;/code&gt; 有一个特性叫做 &lt;code&gt;chunking（分片）&lt;/code&gt;，意思就是通过输出多个文件（chunks）来替代一个总的大的文件。你代码里的分割点（&lt;code&gt;split points&lt;/code&gt;）决定了哪些模块被分到哪些文件里。&lt;/p&gt;
&lt;h4 id=&quot;Split-Points-分块点&quot;&gt;&lt;a href=&quot;#Split-Points-分块点&quot; class=&quot;headerlink&quot; title=&quot;Split Points(分块点)&quot;&gt;&lt;/a&gt;Split Points(分块点)&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Webpack&lt;/code&gt; 提供了很多方式去让我们设置分块点。但最有用的一个就是 &lt;code&gt;require.ensure&lt;/code&gt;方法。下面是一个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadModule&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.ensure([], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;require&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;module.js&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;string&quot;&gt;&quot;MyModule&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;module.js&lt;/code&gt; 模块将通过&lt;code&gt;Webpack&lt;/code&gt; 输出在第二个文件里，并且当浏览器执行&lt;code&gt;require.ensure&lt;/code&gt;的时候加载。（当&lt;code&gt;loadModule&lt;/code&gt;被调用的时候并不会加载）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;require.ensure&lt;/code&gt;方法的第三个参数是指定模块名称。它是一个可选项，如果不填，将会自动生成一个 ID作为文件名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这离成功还差一步，我们还需要配置&lt;code&gt;Webpack.config.js&lt;/code&gt;文件来支持分片&lt;code&gt;thunks&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;配置&quot;&gt;&lt;a href=&quot;#配置&quot; class=&quot;headerlink&quot; title=&quot;配置&quot;&gt;&lt;/a&gt;配置&lt;/h4&gt;&lt;p&gt;在&lt;code&gt;Webpack&lt;/code&gt; 配置文件中的 &lt;code&gt;output&lt;/code&gt;选项设置&lt;code&gt;chunkFilename&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;output: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  chunkFilename: &lt;span class=&quot;string&quot;&gt;&#39;[name].chunk.js&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你也可以设置&lt;code&gt;[chunkhash]&lt;/code&gt;和&lt;code&gt;[ID]&lt;/code&gt;变量作为分块的文件名。如果没有指定&lt;code&gt;[name]&lt;/code&gt;变量，将会使用 &lt;code&gt;ID&lt;/code&gt; 作为分块文件名。&lt;/p&gt;
&lt;p&gt;这可以正常运行，但有个问题。通用的依赖通常都在一个单独的文件中。如果在你应用的模块中使用了&lt;code&gt;React&lt;/code&gt;，&lt;code&gt;React&lt;/code&gt;将包含在每一个分片文件&lt;code&gt;thunks&lt;/code&gt;中。&lt;/p&gt;
&lt;p&gt;我们可以通过 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt;插件来解决这个问题。在你的配置文件中添加 &lt;code&gt;plugins&lt;/code&gt; 选项：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;plugins: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; webpack.optimize.CommonsChunkPlugin(&lt;span class=&quot;string&quot;&gt;&#39;common.js&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我喜欢使用 &lt;code&gt;common.js&lt;/code&gt; 作为文件名，因为这样很直观，但它也可以任意指定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;非常好，代码分割完成。让我们配合&lt;code&gt;react-router&lt;/code&gt;一起使用。&lt;/p&gt;
&lt;h3 id=&quot;整合&quot;&gt;&lt;a href=&quot;#整合&quot; class=&quot;headerlink&quot; title=&quot;整合&quot;&gt;&lt;/a&gt;整合&lt;/h3&gt;&lt;p&gt;还记得我们上面提到的异步加载组件的路由吗？上面通过 &lt;code&gt;require&lt;/code&gt;引用 &lt;code&gt;HomePage&lt;/code&gt;组件。让我们配合使用 &lt;code&gt;getComponent&lt;/code&gt; 和 &lt;code&gt;require.ensure&lt;/code&gt; 来实现按需加载。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  path=&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getComponent=&amp;#123;(location, callback) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.ensure([], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;require&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; HomePage = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./HomePage.jsx&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      callback(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, HomePage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;string&quot;&gt;&#39;HomePage&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;把 &lt;code&gt;require&lt;/code&gt;放在 &lt;code&gt;callback&lt;/code&gt;里更简洁：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  path=&lt;span class=&quot;string&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  getComponent=&amp;#123;(location, callback) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;.ensure([], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;require&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      callback(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;./HomePage.jsx&#39;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;string&quot;&gt;&#39;HomePage&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;完整的代码如下：&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;Router history=&amp;#123;history&amp;#125;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;Route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path=&quot;/&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getComponent=&amp;#123;(location, callback) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      require.ensure([], function (require) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        callback(null, require(&#39;./HomePage.jsx&#39;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;Route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path=&quot;/about&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getComponent=&amp;#123;(location, callback) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      require.ensure([], function (require) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        callback(null, require(&#39;./AboutPage.jsx&#39;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;Route&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path=&quot;/faq&quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    getComponent=&amp;#123;(location, callback) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      require.ensure([], function (require) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        callback(null, require(&#39;./FAQPage.jsx&#39;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/Router&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;本文翻译自 &lt;a href=&quot;http://blog.mxstbr.com/2016/01/react-apps-with-pages/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.mxstbr.com/2016/01/react-apps-with-pages/&lt;/a&gt;&lt;br&gt;参考 &lt;a href=&quot;http://react-guide.github.io/react-router-cn/docs/guides/advanced/DynamicRouting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://react-guide.github.io/react-router-cn/docs/guides/advanced/DynamicRouting.html&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;对于大型应用来说，一个首当其冲的问题就是所需加载的 JavaScript 的大小。程序应当只加载当前渲染页所需的 JavaScript。有些开发者将这种方式称之为“代码分拆” — 将所有的代码分拆成多个小包，在用户浏览过程中按需加载。&lt;/p&gt;
&lt;p&gt;对于底层细节的修改不应该需要它上面每一层级都进行修改。举个例子，为一个照片浏览页添加一个路径不应该影响到首页加载的 JavaScript 的大小。也不能因为多个团队共用一个大型的路由配置文件而造成合并时的冲突。&lt;/p&gt;
&lt;p&gt;路由是个非常适于做代码分拆的地方：它的责任就是配置好每个 view。&lt;br&gt;
    
    </summary>
    
      <category term="react" scheme="http://robin-front.github.io/categories/react/"/>
    
      <category term="Webpack" scheme="http://robin-front.github.io/categories/react/Webpack/"/>
    
    
      <category term="react" scheme="http://robin-front.github.io/tags/react/"/>
    
      <category term="Webpack" scheme="http://robin-front.github.io/tags/Webpack/"/>
    
      <category term="react-router" scheme="http://robin-front.github.io/tags/react-router/"/>
    
  </entry>
  
</feed>
